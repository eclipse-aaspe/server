@page "/db";
@page "/db/aasx";
@page "/db/aas";
@page "/db/sm";
@page "/db/smjson";
@page "/db/sme";
@page "/db/svalue";
@page "/db/ivalue";
@page "/db/dvalue";
@page "/db/ovalue";
@using AasxServer
@using AasxServerDB
@using Microsoft.AspNetCore.Html;
@using AasxRestServerLibrary;
@using Microsoft.IdentityModel.Tokens;
@using AasxServerDB.Entities;
@using TimeStamp;
@using Nodes = System.Text.Json.Nodes;
@inject NavigationManager NavMan

<div>
@{
    if (!Program.withDb)
    {
        <span>This is a in memory server!</span>
    }
    else
    {
        // get parameters
        var url      = NavMan.Uri;
        var    splitUrl = url.Split("?");
        url = splitUrl[ 0 ].ToLower();
        var    sUrl     = url.Split("/");
        var shorturl = url.Substring(0, url.Length - ($"/{sUrl[ sUrl.Length - 1 ]}").Length);
        if (splitUrl.Length == 2)
        {
            var query = System.Web.HttpUtility.ParseQueryString(splitUrl[ 1 ]);
            var list  = query.Get("size");
            if (!list.IsNullOrEmpty())
                size = Convert.ToInt32(list);
            list = query.Get("search");
            if (!list.IsNullOrEmpty())
                search = list;
            list = query.Get("aasxid");
            if (!list.IsNullOrEmpty())
                aasxid = Convert.ToInt32(list);
            list = query.Get("aasid");
            if (!list.IsNullOrEmpty())
                aasid = Convert.ToInt32(list);
            list = query.Get("smid");
            if (!list.IsNullOrEmpty())
                smid = Convert.ToInt32(list);
            list = query.Get("smeid");
            if (!list.IsNullOrEmpty())
                smeid = Convert.ToInt32(list);
            list = query.Get("parid");
            if (!list.IsNullOrEmpty())
                parid = Convert.ToInt32(list);
            list = query.Get("smidentifier");
            if (!list.IsNullOrEmpty())
                smidentifier = list;
        }

        // change parameters to input window
        if (url.EndsWith("/aasx") || url.EndsWith("/aas") || url.EndsWith("/sm")
            || url.EndsWith("/sme") || url.EndsWith("/svalue") || url.EndsWith("/ivalue") || url.EndsWith("/dvalue") || url.EndsWith("/ovalue"))
        {
            <input @bind="CurrentValue" style="width:200px; border-width: 1px; border-color: black;"/>
            @code {
                private string CurrentValue { get; set; }
            }
            if (!CurrentValue.IsNullOrEmpty())
            {
                var splitCur = CurrentValue.Split("=");
                if (splitCur.Count() == 2)
                {
                    switch (splitCur[ 0 ])
                    {
                        case "size":
                            size = 1000;
                            if (!splitCur[ 1 ].IsNullOrEmpty())
                                size = Convert.ToInt32(splitCur[ 1 ]);
                            break;
                        case "search":
                            search = splitCur[ 1 ];
                            break;
                        case "aasxid":
                            aasxid = 0;
                            if (!splitCur[ 1 ].IsNullOrEmpty())
                                aasxid = Convert.ToInt32(splitCur[ 1 ]);
                            break;
                        case "aasid":
                            aasid = 0;
                            if (!splitCur[ 1 ].IsNullOrEmpty())
                                aasid = Convert.ToInt32(splitCur[ 1 ]);
                            break;
                        case "smid":
                            smid = 0;
                            if (!splitCur[ 1 ].IsNullOrEmpty())
                                smid = Convert.ToInt32(splitCur[ 1 ]);
                            break;
                        case "smeid":
                            smeid = 0;
                            if (!splitCur[ 1 ].IsNullOrEmpty())
                                smeid = Convert.ToInt32(splitCur[ 1 ]);
                            break;
                        case "parid":
                            parid = 0;
                            if (!splitCur[ 1 ].IsNullOrEmpty())
                                parid = Convert.ToInt32(splitCur[ 1 ]);
                            break;
                    }
                }

                CurrentValue = string.Empty;
            }
        }

        string searchLower = search.ToLower();
        var    watch       = System.Diagnostics.Stopwatch.StartNew();

        using (AasContext db = new AasContext())
        {
            if (!(url.EndsWith("/aasx") || url.EndsWith("/aas") || url.EndsWith("/sm") || url.EndsWith("/smjson")
                || url.EndsWith("/sme") || url.EndsWith("/svalue") || url.EndsWith("/ivalue") || url.EndsWith("/dvalue") || url.EndsWith("/ovalue")))
            {
                if (AasContext.IsPostgres)
                {
                    <span>PostgreSQL database</span>
                    <br/>
                }
                else
                {
                    <span>SQLite database</span>
                    <br/>
                }

                <br/>
                <table class="table table-bordered table-sm" style="word-wrap:break-word;word-break:break-all;">
                    <thead>
                    <tr>
                        <th style="word-break:keep-all">Tabel</th>
                        <th style="word-break:keep-all">Count</th>
                        <th style="word-break:keep-all">Links</th>
                    </tr>
                    </thead>
                    <tbody>
                    <tr>
                        <td>
                            <span>AASX#:</span>
                        </td>
                        <td>
                            <span>@db.AASXSets.Count()</span>
                        </td>
                        <td>
                            <a href="@($"{url}/aasx")" target="_blank">aasx</a>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <span>AAS#:</span>
                        </td>
                        <td>
                            <span>@db.AASSets.Count()</span>
                        </td>
                        <td>
                            <a href="@($"{url}/aas")" target="_blank">aas</a>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <span>SM#:</span>
                        </td>
                        <td>
                            <span>@db.SMSets.Count()</span>
                        </td>
                        <td>
                            <a href="@($"{url}/sm")" target="_blank">sm</a>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <span>SME#:</span>
                        </td>
                        <td>
                            <span>@db.SMESets.Count()</span>
                        </td>
                        <td>
                            <a href="@($"{url}/sme")" target="_blank">sme</a>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <span>IValue#:</span>
                        </td>
                        <td>
                            <span>@db.IValueSets.Count()</span>
                        </td>
                        <td>
                            <a href="@($"{url}/ivalue")" target="_blank">ivalue</a>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <span>SValue#:</span>
                        </td>
                        <td>
                            <span>@db.SValueSets.Count()</span>
                        </td>
                        <td>
                            <a href="@($"{url}/svalue")" target="_blank">svalue</a>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <span>DValue#:</span>
                        </td>
                        <td>
                            <span>@db.DValueSets.Count()</span>
                        </td>
                        <td>
                            <a href="@($"{url}/dvalue")" target="_blank">dvalue</a>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <span>OValue#:</span>
                        </td>
                        <td>
                            <span>@db.OValueSets.Count()</span>
                        </td>
                        <td>
                            <a href="@($"{url}/ovalue")" target="_blank">ovalue</a>
                        </td>
                    </tr>
                    </tbody>
                </table>
                <br/>
                <b>Database structure:</b>
                <br/>
                <img src="db-schema.jpg"/>
            }

            if (url.EndsWith("/aasx"))
            {
                List<AASXSet> data = PageRetriever.GetPageAASXData(size, searchLower, aasxid);
                <span>&nbsp&nbsp@($"AASX#: {data.Count}/{db.AASXSets.Count()} size={size} search={search} aasxid={aasxid}")</span>
                <br/>
                <br/>
                @if (size > 1000 && data.Count > 1000)
                {
                    <b>
                        <span style="color:red;">First 1000 as TABLE</span>
                    </b>
                    <br/>
                }

                <table class="table table-bordered table-sm" style="width:100%;word-wrap:break-word;word-break:break-all;">
                    <thead>
                    <tr>
                        <th style="word-break:keep-all">AASX#</th>
                        <th style="word-break:keep-all">AASX</th>
                        <th style="word-break:keep-all">Links</th>
                    </tr>
                    </thead>
                    <tbody>
                    @for (int i = 0; i < data.Count && i < 1000; i++)
                    {
                        var aasxDB = data[ i ];
                        <tr>
                            <td style="word-break:keep-all">
                                <b>@aasxDB.Id</b>
                            </td>
                            <td>@aasxDB.AASX</td>
                            <td style="word-break:keep-all">
                                <a href="@($"{shorturl}/aas?aasxid={aasxDB.Id}")" target="_blank">aas </a>
                                <a href="@($"{shorturl}/sm?aasxid={aasxDB.Id}")" target="_blank">sm</a>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
                @if (size > 1000 && data.Count > 1000)
                {
                    <b>
                        <span style="color:red;">All other as text</span>
                    </b>
                    <br/>
                    @for (int i = 1000; i < data.Count; i++)
                    {
                        var aasxDB = data[ i ];
                        <span style="background-color:blue;">&nbsp</span>
                        <span>
                            <b>@aasxDB.Id</b>
                        </span>
                        <span style="background-color:blue;">&nbsp</span>
                        <span>@aasxDB.AASX</span>
                        <span style="background-color:blue;">&nbsp</span>
                        <a href="@($"{shorturl}/aas?aasxid={aasxDB.Id}")" target="_blank">aas </a>
                        <a href="@($"{shorturl}/sm?aasxid={aasxDB.Id}")" target="_blank">sm</a>
                        <br/>
                    }

                    <br/>
                }

                <span>@($"Count: {data.Count}")</span>
                <br/>
            }

            if (url.EndsWith("/aas"))
            {
                List<AASSet> data = PageRetriever.GetPageAASData(size, TimeStamp.StringToDateTime(searchLower), searchLower, aasxid, aasid);
                <span>&nbsp&nbsp@($"AAS#: {data.Count}/{db.AASSets.Count()} size={size} search={search} aasxid={aasxid} aasid={aasid}")</span>
                <br/>
                <br/>
                @if (size > 1000 && data.Count > 1000)
                {
                    <b>
                        <span style="color:red;">First 1000 as TABLE</span>
                    </b>
                    <br/>
                }

                <table class="table table-bordered table-sm" style="width:100%;word-wrap:break-word;word-break:break-all;">
                    <thead>
                    <tr>
                        <th style="word-break:keep-all">AASX#</th>
                        <th style="word-break:keep-all">AAS#</th>
                        <th style="word-break:keep-all">Id</th>
                        <th style="word-break:keep-all">IdShort</th>
                        <th style="word-break:keep-all">AssetKind</th>
                        <th style="word-break:keep-all">GlobalAssetId</th>
                        <th style="word-break:keep-all">Extensions</th>
                        <th style="word-break:keep-all">TimeStamp</th>
                        <th style="word-break:keep-all">Links</th>
                        <th style="word-break:keep-all">API</th>
                    </tr>
                    </thead>
                    <tbody>
                    @for (int i = 0; i < data.Count && i < 1000; i++)
                    {
                        var    aasDB = data[ i ];
                        var aas64 = Base64UrlEncoder.Encode(aasDB.Identifier);
                        var link  = $"{AasxServer.Program.externalBlazor}/shells/{aas64}";
                        <tr>
                            <td style="word-break:keep-all">@aasDB.AASXId</td>
                            <td style="word-break:keep-all">
                                <b>@aasDB.Id</b>
                            </td>
                            <td>@aasDB.Identifier</td>
                            <td>@aasDB.IdShort</td>
                            <td>@aasDB.AssetKind</td>
                            <td>@aasDB.GlobalAssetId</td>
                            <td style="word-break:keep-all;font-size:small;max-width:200px">@aasDB.Extensions</td>
                            <td style="word-break:keep-all;color:lightgray;font-size:x-small">
                                @($"UPDATE {TimeStamp.DateTimeToString(aasDB.TimeStamp)}")<br/>
                                @($"CREATE {TimeStamp.DateTimeToString(aasDB.TimeStampCreate)}")<br/>
                                @($"TREE {TimeStamp.DateTimeToString(aasDB.TimeStampTree)}")<br />
                                @($"DELETE {TimeStamp.DateTimeToString(aasDB.TimeStampDelete)}")
                            </td>
                            <td style="word-break:keep-all">
                                <a href="@($"{shorturl}/aasx?aasxid={aasDB.AASXId}")" target="_blank">aasx </a>
                                <a href="@($"{shorturl}/sm?aasid={aasDB.Id}")" target="_blank">sm</a>
                            </td>
                            <td>
                                <a href="@link" target="_blank">@link</a>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
                @if (size > 1000 && data.Count > 1000)
                {
                    <b>
                        <span style="color:red;">All other as text</span>
                    </b>
                    <br/>
                    @for (int i = 1000; i < data.Count; i++)
                    {
                        var    aasDB = data[ i ];
                        var aas64 = Base64UrlEncoder.Encode(aasDB.Identifier);
                        var link  = $"{AasxServer.Program.externalBlazor}/shells/{aas64}";
                        <span style="background-color:blue;">&nbsp</span>
                        <span>@aasDB.AASXId</span>
                        <span style="background-color:blue;">&nbsp</span>
                        <span>
                            <b>@aasDB.Id</b>
                        </span>
                        <span smDB="background-color:blue;">&nbsp</span>
                        <span>@aasDB.Identifier</span>
                        <span smDB="background-color:blue;">&nbsp</span>
                        <span>@aasDB.IdShort</span>
                        <span smDB="background-color:blue;">&nbsp</span>
                        <span>@aasDB.AssetKind</span>
                        <span smDB="background-color:blue;">&nbsp</span>
                        <span>@aasDB.GlobalAssetId</span>
                        <span style="background-color:blue;">&nbsp</span>
                        <td>@aasDB.Extensions</td>
                        <span style="background-color:blue;">&nbsp</span>
                        <span>@($"UPDATE {TimeStamp.DateTimeToString(aasDB.TimeStamp)}")</span>
                        <span>@($"CREATE {TimeStamp.DateTimeToString(aasDB.TimeStampCreate)}")</span>
                        <span>@($"TREE {TimeStamp.DateTimeToString(aasDB.TimeStampTree)}")</span>
                        <span>@($"DELETE {TimeStamp.DateTimeToString(aasDB.TimeStampDelete)}")</span>
                        <span style="background-color:blue;">&nbsp</span>
                        <a href="@($"{shorturl}/aasx?aasxid={aasDB.AASXId}")" target="_blank">aasx </a>
                        <a href="@($"{shorturl}/sm?aasid={aasDB.Id}")" target="_blank">sm</a>
                        <span style="background-color:blue;">&nbsp</span>
                        <a href="@link" target="_blank">@link</a>
                        <br/>
                    }

                    <br/>
                }

                <span>@($"Count: {data.Count}")</span>
                <br/>
            }

            if (url.EndsWith("/sm"))
            {
                List<SMSet> data = PageRetriever.GetPageSMData(size, TimeStamp.StringToDateTime(searchLower), searchLower, aasxid, aasid, smid);
                <span>
                    &nbsp&nbsp@($"SM#: {data.Count}/{db.SMSets.Count()} size={size} search={search} aasxid={aasxid} aasid={aasid} smid={smid}")
                </span>
                <br/>
                <br/>
                @if (size > 1000 && data.Count > 1000)
                {
                    <b>
                        <span style="color:red;">First 1000 as TABLE</span>
                    </b>
                    <br/>
                }

                <table class="table table-bordered table-sm" style="width:100%;word-wrap:break-word;word-break:break-all;">
                    <thead>
                    <tr>
                        <th style="word-break:keep-all">AASX#</th>
                        <th style="word-break:keep-all">AAS#</th>
                        <th style="word-break:keep-all">SM#</th>
                        <th style="word-break:keep-all">Identifier</th>
                        <th style="word-break:keep-all">IdShort</th>
                        <th style="word-break:keep-all">SemanticId</th>
                        <th style="word-break:keep-all">Extensions</th>
                        <th style="word-break:keep-all">TimeStamp</th>
                        <th style="word-break:keep-all">Links</th>
                        <th style="word-break:keep-all">API</th>
                    </tr>
                    </thead>
                    <tbody>
                    @for (int i = 0; i < data.Count && i < 1000; i++)
                    {
                        var smDB       = data[ i ];
                        var submodel64 = Base64UrlEncoder.Encode(smDB.Identifier);
                        var link       = $"{AasxServer.Program.externalBlazor}/submodels/{submodel64}";
                        var smeCount   = db.SMESets.Where(sme => sme.SMId == smDB.Id).Count();

                        <tr>
                            <td style="word-break:keep-all">@smDB.AASXId</td>
                            <td style="word-break:keep-all">@smDB.AASId</td>
                            <td style="word-break:keep-all">
                                <b>@smDB.Id</b>
                            </td>
                            <td>@smDB.Identifier</td>
                            <td>@smDB.IdShort</td>
                            <td>@smDB.SemanticId</td>
                            <td style="word-break:keep-all;font-size:small;max-width:200px">@smDB.Extensions</td>
                            <td style="word-break:keep-all;color:lightgray;font-size:x-small">
                                @($"UPDATE {TimeStamp.DateTimeToString(smDB.TimeStamp)}")<br/>
                                @($"CREATE {TimeStamp.DateTimeToString(smDB.TimeStampCreate)}")<br/>
                                @($"TREE {TimeStamp.DateTimeToString(smDB.TimeStampTree)}")<br />
                                @($"DELETE {TimeStamp.DateTimeToString(smDB.TimeStampDelete)}")
                            </td>
                            <td style="word-break:keep-all">
                                <a href="@($"{shorturl}/aasx?aasxid={smDB.AASXId}")" target="_blank">aasx </a>
                                <a href="@($"{shorturl}/aas?aasid={smDB.AASId}")" target="_blank">aas </a>
                                <a href="@($"{shorturl}/sme?smid={smDB.Id}")" target="_blank">sme:@(smeCount)</a>
                            </td>
                            <td>
                                <a href="@link" target="_blank">@link</a>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
                @if (size > 1000 && data.Count > 1000)
                {
                    <b>
                        <span style="color:red;">All other as text</span>
                    </b>
                    <br/>
                    @for (int i = 1000; i < data.Count; i++)
                    {
                        var smDB       = data[ i ];
                        var submodel64 = Base64UrlEncoder.Encode(smDB.Identifier);
                        var link       = $"{AasxServer.Program.externalBlazor}/submodels/{submodel64}";
                        var smeCount   = db.SMESets.Where(sme => sme.SMId == smDB.Id).Count();
                        <span style="background-color:blue;">&nbsp</span>
                        <span>@smDB.AASXId</span>
                        <span style="background-color:blue;">&nbsp</span>
                        <span>@smDB.AASId</span>
                        <span smDB="background-color:blue;">&nbsp</span>
                        <span>
                            <b>@smDB.Id</b>
                        </span>
                        <span smDB="background-color:blue;">&nbsp</span>
                        <span>@smDB.Identifier</span>
                        <span smDB="background-color:blue;">&nbsp</span>
                        <span>@smDB.IdShort</span>
                        <span smDB="background-color:blue;">&nbsp</span>
                        <span>@smDB.SemanticId</span>
                        <span style="background-color:blue;">&nbsp</span>
                        <span>@smDB.Extensions</span>
                        <span style="background-color:blue;">&nbsp</span>
                        <span>@($"UPDATE {TimeStamp.DateTimeToString(smDB.TimeStamp)}")</span>
                        <span>@($"CREATE {TimeStamp.DateTimeToString(smDB.TimeStampCreate)}")</span>
                        <span>@($"TREE {TimeStamp.DateTimeToString(smDB.TimeStampTree)}")</span>
                        <span>@($"DELETE {TimeStamp.DateTimeToString(smDB.TimeStampDelete)}")</span>
                        <span style="background-color:blue;">&nbsp</span>
                        <a href="@($"{shorturl}/aasx?aasxid={smDB.AASXId}")" target="_blank">aasx </a>
                        <a href="@($"{shorturl}/aas?aasid={smDB.AASId}")" target="_blank">aas </a>
                        <a href="@($"{shorturl}/sme?smid={smDB.Id}")" target="_blank">sme:@(smeCount)</a>
                        <span style="background-color:blue;">&nbsp</span>
                        <a href="@link" target="_blank">@link</a>
                        <br/>
                    }

                    <br/>
                }

                <span>@($"Count: {data.Count}")</span>
                <br/>
            }

            if (url.EndsWith("/smjson") && !smidentifier.IsNullOrEmpty())
            {
                var smDBList = db.SMSets.Where(s => s.Identifier.Equals(smidentifier)).ToList();
                if (smDBList.Any())
                {
                    var smDB     = smDBList.First();
                    var submodel = Converter.GetSubmodel(smDB: smDB);

                    string json = string.Empty;
                    if (submodel != null)
                    {
                        var j = Jsonization.Serialize.ToJsonObject(submodel);
                        json = j.ToJsonString();
                    }

                    <span>@json</span>
                    <br/>
                }
            }

            if (url.EndsWith("/sme"))
            {
                List<SMESet> data = PageRetriever.GetPageSMEData(size, TimeStamp.StringToDateTime(searchLower), searchLower, smid, smeid, parid);
                <span>
                    &nbsp&nbsp@($"SME#: {data.Count}/{db.SMESets.Count()} size={size} search={search} smid={smid} smeid={smeid} parid={parid}")
                </span>
                <br/>
                <br/>
                @if (size > 1000 && data.Count > 1000)
                {
                    <b>
                        <span style="color:red;">First 1000 as TABLE</span>
                    </b>
                    <br/>
                }

                <table class="table table-bordered table-sm" style="width:100%;word-wrap:break-word;word-break:break-all;">
                    <thead>
                    <tr>
                        <th style="word-break:keep-all">SM#</th>
                        <th style="word-break:keep-all">Par#</th>
                        <th style="word-break:keep-all">SME#</th>
                        <th style="word-break:keep-all">Type</th>
                        <th style="word-break:keep-all">IdShort</th>
                        <th style="word-break:keep-all">SemanticId</th>
                        <th style="word-break:keep-all">TValue</th>
                        <th style="word-break:keep-all">Value</th>
                        <th style="word-break:keep-all">Additional Attributes</th>
                        <th style="word-break:keep-all">Extensions</th>
                        <th style="word-break:keep-all">TimeStamp</th>
                        <th style="word-break:keep-all">Links</th>
                        <th style="word-break:keep-all">API</th>
                    </tr>
                    </thead>
                    <tbody>
                    @for (int i = 0; i < data.Count && i < 1000; i++)
                    {
                        var smeDB = data[i];
                        string path = smeDB.IdShort;
                        int? pId = smeDB.ParentSMEId;
                        while (pId != null)
                        {
                            var smeDBP = db.SMESets.Where(s => s.Id == pId).First();
                            path = $"{smeDBP.IdShort}.{path}";
                            pId = smeDBP.ParentSMEId;
                        }

                        var split = !smeDB.SMEType.IsNullOrEmpty() ? smeDB.SMEType.Split(VisitorAASX.OPERATION_SPLIT) : [string.Empty];
                        var smeTypeWithoutOperation = split.Length == 2 ? split[1] : split[0];

                        var smDB = db.SMSets.Where(s => s.Id == smeDB.SMId).First();
                        string submodel64 = Base64UrlEncoder.Encode(smDB.Identifier);
                        string link = $"{AasxServer.Program.externalBlazor}/submodels/{submodel64}/submodel-elements/{path}";
                        var value = smeDB.GetValue();

                        <tr>
                            <td style="word-break:keep-all">@smeDB.SMId</td>
                            <td style="word-break:keep-all">@smeDB.ParentSMEId</td>
                            <td style="word-break:keep-all">
                                <b>@smeDB.Id</b>
                            </td>
                            <td style="word-break:keep-all">@smeDB.SMEType</td>
                            <td>@smeDB.IdShort</td>
                            <td>@smeDB.SemanticId</td>
                            <td style="word-break:keep-all">@smeDB.TValue</td>
                            <td>
                                @if (smeTypeWithoutOperation != null && smeTypeWithoutOperation.Equals("MLP"))
                                {
                                    <ul>
                                        @for (int z = 0; z < value.Count; z++)
                                        {
                                            <li>
                                                [@value[z][1]] @value[z][0]
                                            </li>
                                        }
                                    </ul>
                                }
                                else if (smeTypeWithoutOperation != null && smeTypeWithoutOperation.Equals("Range"))
                                {
                                    <ul>
                                        @{
                                            var valueType = (string) db.OValueSets.Where(ovalue => ovalue.SMEId == smeDB.Id && ovalue.Attribute.Equals("ValueType")).Select(ovalue => ovalue.Value).FirstOrDefault();
                                            if (!valueType.IsNullOrEmpty())
                                            {
                                                <li>
                                                    (@valueType)
                                                </li>
                                            }
                                        }
                                        
                                        @for (int z = 0; z < value.Count; z++)
                                        {
                                            <li>
                                                [@value[z][1]] @value[z][0]
                                            </li>
                                        }
                                    </ul>
                                }
                                else if (smeTypeWithoutOperation != null && (smeTypeWithoutOperation.Equals("Prop") || smeTypeWithoutOperation.Equals("File") || smeTypeWithoutOperation.Equals("Blob")))
                                {
                                    <ul>
                                        <li>
                                            (@value[0][1]) @value[0][0]
                                        </li>
                                    </ul>
                                }
                                else
                                {
                                    @value.First()[0]
                                }
                            </td>
                            <td style="word-break:keep-all;font-size:small;max-width:200px">
                                @if (db.OValueSets.Where(value => value.SMEId == smeDB.Id).Any())
                                {
                                    var dic = smeDB.GetOValue();
                                    <ul>
                                        @foreach(KeyValuePair<string, Nodes.JsonNode> dicValue in dic)
                                        {
                                            <li>
                                                @dicValue.Key = @dicValue.Value.ToString()
                                            </li>
                                        }
                                    </ul>
                                }
                            </td>
                            <td style="word-break:keep-all;font-size:small;max-width:200px">@smeDB.Extensions</td>
                            <td style="word-break:keep-all;color:lightgray;font-size:x-small">
                                @($"UPDATE {TimeStamp.DateTimeToString(smeDB.TimeStamp)}")<br/>
                                @($"CREATE {TimeStamp.DateTimeToString(smeDB.TimeStampCreate)}")<br/>
                                @($"TREE {TimeStamp.DateTimeToString(smeDB.TimeStampTree)}")<br />
                                @($"DELETE {TimeStamp.DateTimeToString(smeDB.TimeStampDelete)}")
                            </td>
                            <td style="word-break:keep-all">
                                <a href="@($"{shorturl}/sm?smid={smeDB.SMId}")" target="_blank">sm </a>
                                @if (smeDB.ParentSMEId != null)
                                {
                                    <a href="@($"{shorturl}/sme?smid={smeDB.SMId}&smeid={smeDB.ParentSMEId}")" target="_blank">par </a>
                                }
                                @if (db.SMESets.Where(smeV => smeV.ParentSMEId == smeDB.Id).Any())
                                {
                                    <a href="@($"{shorturl}/sme?parid={smeDB.Id}")" target="_blank">children </a>
                                }
                                @if (smeDB.TValue != null)
                                {
                                    if (smeDB.TValue.Equals("S"))
                                    {
                                        <a href="@($"{shorturl}/svalue?smeid={smeDB.Id}")" target="_blank">svalue </a>
                                    }
                                    else if (smeDB.TValue.Equals("I"))
                                    {
                                        <a href="@($"{shorturl}/ivalue?smeid={smeDB.Id}")" target="_blank">ivalue </a>
                                    }
                                    else if (smeDB.TValue.Equals("D"))
                                    {
                                        <a href="@($"{shorturl}/dvalue?smeid={smeDB.Id}")" target="_blank">dvalue </a>
                                    }
                                }
                                @if (db.OValueSets.Where(value => value.SMEId == smeDB.Id).Any())
                                {
                                    <a href="@($"{shorturl}/ovalue?smeid={smeDB.Id}")" target="_blank">ovalue </a>
                                }
                                </td>
                            <td>
                                <a href="@link" target="_blank">@link</a>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
                @if (size > 1000 && data.Count > 1000)
                {
                    <b>
                        <span style="color:red;">All other as text</span>
                    </b>
                    <br/>
                    @for (int i = 1000; i < data.Count; i++)
                    {

                        var smeDB = data[i];
                        string path = smeDB.IdShort;
                        int? pId = smeDB.ParentSMEId;
                        while (pId != null)
                        {
                            var smeDBP = db.SMESets.Where(s => s.Id == pId).First();
                            path = $"{smeDBP.IdShort}.{path}";
                            pId = smeDBP.ParentSMEId;
                        }

                        var split = !smeDB.SMEType.IsNullOrEmpty() ? smeDB.SMEType.Split(VisitorAASX.OPERATION_SPLIT) : [string.Empty];
                        var smeTypeWithoutOperation = split.Length == 2 ? split[1] : split[0];

                        var smDB = db.SMSets.Where(s => s.Id == smeDB.SMId).First();
                        string submodel64 = Base64UrlEncoder.Encode(smDB.Identifier);
                        string link = $"{AasxServer.Program.externalBlazor}/submodels/{submodel64}/submodel-elements/{path}";
                        var value = smeDB.GetValue();

                        <span>@smeDB.SMId</span>
                        <span style="background-color:blue;">&nbsp</span>
                        <span>@smeDB.ParentSMEId</span>
                        <span style="background-color:blue;">&nbsp</span>
                        <span>
                            <b>@smeDB.Id</b>
                        </span>
                        <span style="background-color:blue;">&nbsp</span>
                        <span>@smeDB.SMEType</span>
                        <span style="background-color:blue;">&nbsp</span>
                        <span>@smeDB.IdShort</span>
                        <span style="background-color:blue;">&nbsp</span>
                        <span>@smeDB.SemanticId</span>
                        <span style="background-color:blue;">&nbsp</span>
                        <span>@smeDB.TValue</span>
                        <span style="background-color:blue;">&nbsp</span>
                        <span>
                            @if (smeTypeWithoutOperation != null && smeTypeWithoutOperation.Equals("MLP"))
                            {
                                @for (int z = 0; z < value.Count; z++)
                                {
                                    <span>
                                        [@value[z][1]] @value[z][0] 
                                    </span>
                                }
                            }
                            else if (smeTypeWithoutOperation != null && smeTypeWithoutOperation.Equals("Range"))
                            {
                                var valueType = (string)db.OValueSets.Where(ovalue => ovalue.SMEId == smeDB.Id && ovalue.Attribute.Equals("ValueType")).Select(ovalue => ovalue.Value).FirstOrDefault();
                                if (!valueType.IsNullOrEmpty())
                                {
                                    <span>
                                        (@valueType)
                                    </span>
                                }

                                for (int z = 0; z < value.Count; z++)
                                {
                                    <span>
                                        [@value[z][1]] @value[z][0]
                                    </span>
                                }
                            }
                            else if (smeTypeWithoutOperation != null && (smeTypeWithoutOperation.Equals("Prop") || smeTypeWithoutOperation.Equals("File") || smeTypeWithoutOperation.Equals("Blob")))
                            {
                                <span>
                                    (@value[0][1]) @value[0][0]
                                </span>
                            }
                            else
                            {
                                @value.First()[0]
                            }
                        </span>
                        <span style="background-color:blue;">&nbsp</span>
                        <span>
                            @if (db.OValueSets.Where(value => value.SMEId == smeDB.Id).Any())
                            {
                                var dic = smeDB.GetOValue();
                                <span>
                                    @foreach (KeyValuePair<string, Nodes.JsonNode> valueDic in dic)
                                    {
                                        <span>
                                            @valueDic.Key = @valueDic.Value.ToString()
                                        </span>
                                    }
                                </span>
                            }
                        </span>
                        <span style="background-color:blue;">&nbsp</span>
                        <span>@smeDB.Extensions</span>
                        <span style="background-color:blue;">&nbsp</span>
                        <span>@($"UPDATE {TimeStamp.DateTimeToString(smeDB.TimeStamp)}")</span>
                        <span>@($"CREATE {TimeStamp.DateTimeToString(smeDB.TimeStampCreate)}")</span>
                        <span>@($"TREE {TimeStamp.DateTimeToString(smeDB.TimeStampTree)}")</span>
                        <span>@($"DELETE {TimeStamp.DateTimeToString(smeDB.TimeStampDelete)}")</span>
                        <span style="background-color:blue;">&nbsp</span>
                        <a href="@($"{shorturl}/sm?smid={smeDB.SMId}")" target="_blank">sm </a>
                        @if (smeDB.ParentSMEId != null)
                        {
                            <a href="@($"{shorturl}/sme?smid={smeDB.SMId}&smeid={smeDB.ParentSMEId}")" target="_blank">par </a>
                        }
                        @if (db.SMESets.Where(smeV => smeV.ParentSMEId == smeDB.Id).Any())
                        {
                            <a href="@($"{shorturl}/sme?parid={smeDB.Id}")" target="_blank">children </a>
                        }
                        @if (smeDB.TValue != null)
                        {
                            if (smeDB.TValue.Equals("S"))
                            {
                                <a href="@($"{shorturl}/svalue?smeid={smeDB.Id}")" target="_blank">svalue </a>
                            }
                            else if (smeDB.TValue.Equals("I"))
                            {
                                <a href="@($"{shorturl}/ivalue?smeid={smeDB.Id}")" target="_blank">ivalue </a>
                            }
                            else if (smeDB.TValue.Equals("D"))
                            {
                                <a href="@($"{shorturl}/dvalue?smeid={smeDB.Id}")" target="_blank">dvalue </a>
                            }
                        }
                        @if (db.OValueSets.Where(value => value.SMEId == smeDB.Id).Any())
                        {
                            <a href="@($"{shorturl}/ovalue?smeid={smeDB.Id}")" target="_blank">ovalue </a>
                        }
                        <span style="background-color:blue;">&nbsp</span>
                        <a href="@link" target="_blank">@link</a>
                        <br/>
                    }

                    <br/>
                }

                <span>@($"Count: {data.Count}")</span>
                <br/>
            }

            if (url.EndsWith("/svalue"))
            {
                List<SValueSet> data = PageRetriever.GetPageSValueData(size, searchLower, smeid);
                <span>
                    &nbsp&nbsp@($"SValue#: {data.Count}/{db.SValueSets.Count()} size={size} search={search} smeid={smeid}")
                </span>
                <br/>
                <br/>
                @if (size > 1000 && data.Count > 1000)
                {
                    <b>
                        <span style="color:red;">First 1000 as TABLE</span>
                    </b>
                    <br/>
                }

                <table class="table table-bordered table-sm" style="width:100%;word-wrap:break-word;word-break:break-all;">
                    <thead>
                    <tr>
                        <th style="word-break:keep-all">Par#</th>
                        <th style="word-break:keep-all">Value</th>
                        <th style="word-break:keep-all">Annotation</th>
                        <th style="word-break:keep-all">Links</th>
                    </tr>
                    </thead>
                    <tbody>
                    @for (int i = 0; i < data.Count && i < 1000; i++)
                    {
                        var smeDB = data[ i ];
                        <tr>
                            <td style="word-break:keep-all">@smeDB.SMEId</td>
                            <td style="word-break:keep-all">@smeDB.Value</td>
                            <td style="word-break:keep-all">@smeDB.Annotation</td>
                            <td style="word-break:keep-all">
                            <a href="@($"{shorturl}/sme?smeid={smeDB.SMEId}")" target="_blank">par</a>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
                @if (size > 1000 && data.Count > 1000)
                {
                    <b>
                        <span style="color:red;">All other as text</span>
                    </b>
                    <br/>
                    @for (int i = 1000; i < data.Count; i++)
                    {
                        var smeDB = data[ i ];
                        <span style="background-color:blue;">&nbsp</span>
                        <span>@smeDB.SMEId</span>
                        <span style="background-color:blue;">&nbsp</span>
                        <span>@smeDB.Value</span>
                        <span style="background-color:blue;">&nbsp</span>
                        <span>@smeDB.Annotation</span>
                        <span style="background-color:blue;">&nbsp</span>
                        <a href="@($"{shorturl}/sme?smeid={smeDB.SMEId}")" target="_blank">par</a>
                        <br/>
                    }

                    <br/>
                }

                <span>@($"Count: {data.Count}")</span>
                <br/>
            }

            if (url.EndsWith("/ivalue"))
            {
                List<IValueSet> data = PageRetriever.GetPageIValueData(size, searchLower, smeid);
                <span>
                    &nbsp&nbsp@($"IValue#: {data.Count}/{db.IValueSets.Count()} size={size} search={search} smeid={smeid}")
                </span>
                <br/>
                <br/>
                @if (size > 1000 && data.Count > 1000)
                {
                    <b>
                        <span style="color:red;">First 1000 as TABLE</span>
                    </b>
                    <br/>
                }

                <table class="table table-bordered table-sm" style="width:100%;word-wrap:break-word;word-break:break-all;">
                    <thead>
                    <tr>
                        <th style="word-break:keep-all">Par#</th>
                        <th style="word-break:keep-all">Value</th>
                        <th style="word-break:keep-all">Annotation</th>
                        <th style="word-break:keep-all">Links</th>
                    </tr>
                    </thead>
                    <tbody>
                    @for (int i = 0; i < data.Count && i < 1000; i++)
                    {
                        var smeDB = data[ i ];
                        <tr>
                            <td style="word-break:keep-all">@smeDB.SMEId</td>
                            <td style="word-break:keep-all">@smeDB.Value</td>
                            <td style="word-break:keep-all">@smeDB.Annotation</td>
                            <td style="word-break:keep-all">
                            <a href="@($"{shorturl}/sme?smeid={smeDB.SMEId}")" target="_blank">par</a>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
                @if (size > 1000 && data.Count > 1000)
                {
                    <b>
                        <span style="color:red;">All other as text</span>
                    </b>
                    <br/>
                    @for (int i = 1000; i < data.Count; i++)
                    {
                        var smeDB = data[ i ];
                        <span style="background-color:blue;">&nbsp</span>
                        <span>@smeDB.SMEId</span>
                        <span style="background-color:blue;">&nbsp</span>
                        <span>@smeDB.Value</span>
                        <span style="background-color:blue;">&nbsp</span>
                        <span>@smeDB.Annotation</span>
                        <span style="background-color:blue;">&nbsp</span>
                        <a href="@($"{shorturl}/sme?smeid={smeDB.SMEId}")" target="_blank">par</a>
                        <br/>
                    }

                    <br/>
                }

                <span>@($"Count: {data.Count}")</span>
                <br/>
            }

            if (url.EndsWith("/dvalue"))
            {
                List<DValueSet> data = PageRetriever.GetPageDValueData(size, searchLower, smeid);
                <span>
                    &nbsp&nbsp@($"DValue#: {data.Count}/{db.DValueSets.Count()} size={size} search={search} smeid={smeid}")
                </span>
                <br/>
                <br/>
                @if (size > 1000 && data.Count > 1000)
                {
                    <b>
                        <span style="color:red;">First 1000 as TABLE</span>
                    </b>
                    <br/>
                }

                <table class="table table-bordered table-sm" style="width:100%;word-wrap:break-word;word-break:break-all;">
                    <thead>
                    <tr>
                        <th style="word-break:keep-all">Par#</th>
                        <th style="word-break:keep-all">Value</th>
                        <th style="word-break:keep-all">Annotation</th>
                        <th style="word-break:keep-all">Links</th>
                    </tr>
                    </thead>
                    <tbody>
                    @for (int i = 0; i < data.Count && i < 1000; i++)
                    {
                        var smeDB = data[ i ];
                        <tr>
                            <td style="word-break:keep-all">@smeDB.SMEId</td>
                            <td style="word-break:keep-all">@smeDB.Value</td>
                            <td style="word-break:keep-all">@smeDB.Annotation</td>
                            <td style="word-break:keep-all">
                            <a href="@($"{shorturl}/sme?smeid={smeDB.SMEId}")" target="_blank">par</a>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
                @if (size > 1000 && data.Count > 1000)
                {
                    <b>
                        <span style="color:red;">All other as text</span>
                    </b>
                    <br/>
                    @for (int i = 1000; i < data.Count; i++)
                    {
                        var smeDB = data[ i ];
                        <span style="background-color:blue;">&nbsp</span>
                        <span>@smeDB.SMEId</span>
                        <span style="background-color:blue;">&nbsp</span>
                        <span>@smeDB.Value</span>
                        <span style="background-color:blue;">&nbsp</span>
                        <span>@smeDB.Annotation</span>
                        <span style="background-color:blue;">&nbsp</span>
                        <a href="@($"{shorturl}/sme?smeid={smeDB.SMEId}")" target="_blank">par </a>
                        <br/>
                    }

                    <br/>
                }

                <span>@($"Count: {data.Count}")</span>
                <br/>
            }

            if (url.EndsWith("/ovalue"))
            {
                List<OValueSet> data = PageRetriever.GetPageOValueData(size, searchLower, smeid);
                <span>
                    &nbsp&nbsp@($"OValue#: {data.Count}/{db.OValueSets.Count()} size={size} search={search} smeid={smeid}")
                </span>
                <br />
                <br />
                @if (size > 1000 && data.Count > 1000)
                {
                    <b>
                        <span style="color:red;">First 1000 as TABLE</span>
                    </b>
                    <br />
                }

                <table class="table table-bordered table-sm" style="width:100%;word-wrap:break-word;word-break:break-all;">
                    <thead>
                        <tr>
                            <th style="word-break:keep-all">Par#</th>
                            <th style="word-break:keep-all">Attribute</th>
                            <th style="word-break:keep-all">Value</th>
                            <th style="word-break:keep-all">Links</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < data.Count && i < 1000; i++)
                        {
                            var smeDB = data[i];
                            <tr>
                                <td style="word-break:keep-all">@smeDB.SMEId</td>
                                <td style="word-break:keep-all">@smeDB.Attribute</td>
                                <td style="word-break:keep-all">@smeDB.Value</td>
                                <td style="word-break:keep-all">
                                <a href="@($"{shorturl}/sme?smeid={smeDB.SMEId}")" target="_blank">par</a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                @if (size > 1000 && data.Count > 1000)
                {
                    <b>
                        <span style="color:red;">All other as text</span>
                    </b>
                    <br />
                    @for (int i = 1000; i < data.Count; i++)
                    {
                        var smeDB = data[i];
                        <span style="background-color:blue;">&nbsp</span>
                        <span>@smeDB.SMEId</span>
                        <span style="background-color:blue;">&nbsp</span>
                        <span>@smeDB.Attribute</span>
                        <span style="background-color:blue;">&nbsp</span>
                        <span>@smeDB.Value</span>
                        <span style="background-color:blue;">&nbsp</span>
                        <a href="@($"{shorturl}/sme?smeid={smeDB.SMEId}")" target="_blank">par </a>
                        <br />
                    }

                    <br />
                }

                <span>@($"Count: {data.Count}")</span>
                <br />
            }

            watch.Stop();
            <span>@($"Elapsed ms: {watch.ElapsedMilliseconds}")</span>
        }

        <br/>
        <br/>
    }
}
</div>

@code {
    int size = 1000;
    string search = string.Empty;
    long aasxid = 0;
    long aasid = 0;
    long smid = 0;
    long smeid = 0;
    long parid = 0;
    string smidentifier = string.Empty;
}
