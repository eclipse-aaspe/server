<!--*******************************************************************************
* Copyright (c) {2024} Contributors to the Eclipse Foundation
*
* See the NOTICE file(s) distributed with this work for additional
* information regarding copyright ownership.
*
* This program and the accompanying materials are made available under the
* terms of the Apache License Version 2.0 which is available at
* https://www.apache.org/licenses/LICENSE-2.0
*
* SPDX-License-Identifier: Apache-2.0
*******************************************************************************-->

@page "/"
@inject AASService SubmodelService
@inject NavigationManager NavigationManager
@inject ISecurityService SecService
@using AasCore.Aas3_0
@using AasSecurity;
@using AasSecurity.Models;
@using Extensions
@using Microsoft.IdentityModel.Tokens;
@using System.Net;
@using QRCoder;
@using AasxServerBlazor.Data
@using TimeStamp
@using static AasxServerStandardBib.TimeSeriesPlotting;
@using Range = AasCore.Aas3_0.Range

@implements IDisposable

<div class="col-12 row">
    <br/>
    <div class="col-5" style="border-width:3px; border-style: solid; border-color: blue; border-radius: 8px; background-color:aliceblue;
            word-wrap: break-word; word-break: break-all; position: sticky">
        @updateVisibleTree(Items, SelectedNode)
        @if (Program.isLoading)
        {
            <span style="color:white;background-color:blue;">Loading...</span>
        }
        else
        {
            AasxRestServerLibrary.AasxRestServer.TestResource.initListOfRepositories();
        }
        <Tree @bind-ExpandedNodes="ExpandedNodes" @bind-SelectedNode="SelectedNode" ChildSelector="@(item => item.Children)"
              HasChildNodes="@(item => item.Children?.Any() == true)" HtmlId="@(item => GetHtmlId(item))" Nodes="Items">
            <TitleTemplate>
                @{
                    var getPolicy = string.Empty;
                    @if (GlobalSecurityVariables.WithAuthentication)
                    {
                        var display = false;
                        var access = false;
                        var withAllow = false;
                        switch (context.Tag)
                        {
                            case Submodel sm:
                            {
                                // check, if access to submodel is allowed
                                withAllow = false;
                                access = SecService.AuthorizeRequest(null, "/submodels", AccessRights.READ,
                                    out _, out withAllow, out getPolicy, sm.IdShort!, "submodel", sm);
                                display = true;
                                break;
                            }
                            case ISubmodelElement sme:
                            {
                                var path = sme.IdShort;
                                var p = sme.Parent;
                                while (p is not Submodel)
                                {
                                    path = $"{(p as ISubmodelElement).IdShort}.{path}";
                                    p = (p as ISubmodelElement).Parent;
                                }

                                path = $"{(p as Submodel).IdShort}.{path}";
                                var error = string.Empty;
                                access = SecService.AuthorizeRequest(null, "/submodel-elements", AccessRights.READ,
                                    out error, out withAllow, out getPolicy, path, string.Empty, p);
                                display = true;
                                break;
                            }
                        }

                        if (display)
                        {
                            if (context.Children == null || !context.Children.Any())
                                withAllow = false;
                            if (access)
                            {
                                <span style="color:green;background-color:green;">&nbsp&nbsp</span>
                            }
                            else
                            {
                                if (!withAllow)
                                {
                                    <span style="color:red;background-color:red;">&nbsp&nbsp</span>
                                }
                                else
                                {
                                    <span style="color:red;background-color:red;">&nbsp</span>
                                    <span style="color:green;background-color:green;">&nbsp</span>
                                }
                            }
                        }
                    }

                    <span style="color:white;background-color:blue;">@ViewNodeType(context)</span>
                    @ViewNodeID(context)@ViewNodeInfo(context)
                    @if (Program.withPolicy && !string.IsNullOrEmpty(getPolicy))
                    {
                        <span style="color:blue"> @getPolicy</span>
                    }

                    <span style="color:blue;font-size:14px">@GetSymbols(context)</span>
                    <span style="color:lightgray;font-size:14px">@ViewTimeStamp(context)</span>
                }
            </TitleTemplate>
        </Tree>
    </div>
    <div class="col-7" style="border-width: 3px; border-style: solid; border-color: blue; border-radius: 8px; position: sticky; background-color:aliceblue;">
        <div class="sticky-top" style="word-wrap:break-word;word-break:break-all;">
            @{
                if (SelectedNode != null)
                {
                    if (SelectedNode.Tag is not string)
                    {
                        <span style="color:white;background-color:blue;" id="SelectedNodeInfoType">@ViewNodeType(SelectedNode)</span>
                        <span id="SelectedNodeInfoId">@ViewNodeID(SelectedNode)</span>
                        <br>
                    }
                    else
                    {
                        if (SelectedNode.Tag is string && SelectedNode.Text.Contains("/readme"))
                        {
                            var text = System.IO.File.ReadAllText(SelectedNode.Text);
                            text = text.Replace("%BLAZOR%", Program.externalBlazor);
                            if (text.Contains("%ACCESSRULES%"))
                            {
                                var accessRules = SecService.GetSecurityRules();
                                <table class="table table-bordered table-sm">
                                    <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th nowrap>Kind</th>
                                        <th>Permission</th>
                                        <th>Type</th>
                                        <th>API</th>
                                        <th>Path</th>
                                        <th>SemanticID</th>
                                        <th>See</th>
                                    </tr>
                                    </thead>
                                    <tbody>
                                    @{
                                        var lines = accessRules.Split('\n');
                                        foreach (var l in lines)
                                        {
                                            <tr>
                                                @{
                                                    var cols = l.Split('\t');
                                                    for (var c = 0; c < cols.Count(); c++)
                                                    {
                                                        if (c != 1 && c != 2)
                                                        {
                                                            <td>@cols[c]</td>
                                                        }
                                                        else
                                                        {
                                                            <td nowrap>@cols[c]</td>
                                                        }
                                                    }
                                                }
                                            </tr>
                                        }
                                    }
                                    </tbody>
                                </table>
                            }
                            else
                            {
                                <span>@((MarkupString) text)</span>
                            }
                        }
                    }
                }

                for (var line = 0; line < 20; line++)
                {
                    var nodeDetails0 = ViewNodeDetails(SelectedNode, line, 0);
                    var nodeDetails1 = ViewNodeDetails(SelectedNode, line, 1);
                    var nodeDetails2 = ViewNodeDetails(SelectedNode, line, 2);
                    if (nodeDetails0 != "" && nodeDetails1 != "")
                    {
                        var detailsId = "SelectedNodeDetailsLeft_" + line;
                        <span style="color:white;background-color:blue;" id="@detailsId">@nodeDetails0</span>
                        detailsId = "SelectedNodeDetailsRight_" + line;
                        <span id="@detailsId">&nbsp;@nodeDetails1 @nodeDetails2</span>
                        <br>
                    }
                }

                if (SelectedNode != null && SelectedNode.Tag is IReferable r)
                {
                    <span style="color:lightgray;">UPDATE @TimeStamp.DateTimeToString(r.TimeStamp)</span>
                    <br/>
                    <button style="border-width: 1px; border-color: black; background-color: lightgray" @onclick="SetTimeStamp">TIMESTAMP</button>
                    <br/>
                    <span style="color:lightgray;">CREATE @TimeStamp.DateTimeToString(r.TimeStampCreate)</span>
                    <br/>
                    <span style="color:lightgray;">TREE @TimeStamp.DateTimeToString(r.TimeStampTree)</span>
                    <br/>
            @code {

                private void SetTimeStamp()
                {
                    (SelectedNode.Tag as IReferable).SetTimeStamp(DateTime.UtcNow);
                    Program.env[SelectedNode.envIndex].setWrite(true);
                }

            }
            }

                var externalLink = false;
                var link = GetLink(SelectedNode, out externalLink);
                if (SelectedNode != null && !string.IsNullOrEmpty(link))
                {
                    <a href="@link" target="_blank">@link</a>
                    <br>

                    if (SelectedNode != null && SelectedNode.Tag is Submodel && !string.IsNullOrEmpty(Program.connectServer))
                    {
                        var toPublish = Program.submodelsToPublish.Contains(SelectedNode.Tag);
                        var toSubscribe = Program.submodelsToSubscribe.Contains(SelectedNode.Tag);
                        if (toPublish)
                        {
                            <button style="color:white;background-color:blue" @onclick="ResetSubmodelToPublish">Publish</button>
                        }
                        else
                        {
                            <button @onclick="SetSubmodelToPublish">Publish</button>
                        }

                        if (toSubscribe)
                        {
                            <button style="color:white;background-color:blue" @onclick="ResetSubmodelToSubscribe">Subscribe</button>
                        }
                        else
                        {
                            <button @onclick="SetSubmodelToSubscribe">Subscribe</button>
                        }
            @code {

                private void ResetSubmodelToPublish()
                {
                    Program.submodelsToPublish.Remove(SelectedNode.Tag);
                }

                private void SetSubmodelToPublish()
                {
                    var toSubscribe = Program.submodelsToSubscribe.Contains(SelectedNode.Tag);
                    if (!toSubscribe)
                        Program.submodelsToPublish.Add(SelectedNode.Tag);
                }

                private void ResetSubmodelToSubscribe()
                {
                    Program.submodelsToSubscribe.Remove(SelectedNode.Tag);
                }

                private void SetSubmodelToSubscribe()
                {
                    var toPublish = Program.submodelsToPublish.Contains(SelectedNode.Tag);
                    if (!toPublish)
                        Program.submodelsToSubscribe.Add(SelectedNode.Tag);
                }

            }
            }
                }

                if (SelectedNode is {Tag: Property} && Program.edit)
                {
                    <input @bind="CurrentValue" style="width:500px; border-width: 1px; border-color: black;"/>
                    <span style="border-width: 1px; border-color: black; background-color: blue;">@CurrentValue</span>
                    <br>
            @code { private string CurrentValue { get; set; } }
            if (!string.IsNullOrEmpty(CurrentValue))
                    {
                        if (SelectedNode.Tag is Property)
                        {
                            if (CurrentValue == " ")
                                CurrentValue = string.Empty;
                            (SelectedNode.Tag as Property).Value = CurrentValue;
                            (SelectedNode.Tag as Property).SetTimeStamp(DateTime.UtcNow);
                            Program.env[SelectedNode.envIndex].setWrite(true);
                            Program.signalNewData(0);
                        }

                        CurrentValue = string.Empty;
                    }
                }

                if (SelectedNode is {Tag: (AssetAdministrationShell or File) and AssetAdministrationShell})
            @code {

                private void runCreateQRCodeImage()
                {
                    CreateQRCodeImage(SelectedNode);
                }

            }
            {
                    <button style="border-width: 1px; border-color: black; color: white; background-color: blue" @onclick="runCreateQRCodeImage">QRCODE</button>
                    <br/>
                    var qrcodeLink = GetQRCodeLink(SelectedNode);
                    if (Program.generatedQrCodes.ContainsKey(SelectedNode.Tag))
                    {
                        var qrcodeImage = GetQRCodeImage(SelectedNode);
                        if (qrcodeImage != "")
                        {
                            <a href="@qrcodeLink" target="_blank">
                                <div>
                                    <img src=data:image;base64,@qrcodeImage style="max-width: 25%;" alt="Qrcode Image"/>
                                </div>
                            </a>
                        }
                    }
                    else
                    {
                        <a href="@qrcodeLink" target="_blank">@qrcodeLink</a>
                        @:<br>
                    }
                }

                if (SelectedNode is {Tag: Submodel sm})
                {
                    var idEncoded = Base64UrlEncoder.Encode(sm.Id);
                    var path = Program.externalBlazor + "/submodels/" + idEncoded;
                    <span style="color:white;background-color:blue;">URL:</span>
                    <a href="@path" target="_blank">@path</a>
                    <br>
                }

                if (SelectedNode != null && SelectedNode.Tag is ISubmodelElement sme)
                {
                    var path = sme.IdShort;
                    var parent = sme.Parent as IReferable;
                    while (parent is not Submodel)
                    {
                        if (parent is ISubmodelElementList parentList)
                        {
                            if (path.Equals(sme.IdShort))
                            {
                                var index = parentList.Value?.IndexOf(sme);
                                path = $"[{index}]";
                            }

                            path = parentList.IdShort + path;
                        }
                        else if (parent.Parent is ISubmodelElementList prevParentList)
                        {
                            var index = prevParentList.Value?.IndexOf(parent as ISubmodelElement);
                            path = $"[{index}].{path}";
                        }
                        else
                        {
                            path = $"{parent.IdShort}.{path}";
                        }

                        parent = (IReferable) parent.Parent;
                    }

                    var idEncoded = Base64UrlEncoder.Encode((parent as Submodel).Id);
                    path = Program.externalBlazor + "/submodels/" + idEncoded + "/submodel-elements/" + path;
                    <span style="color:white;background-color:blue;">URL:</span>
                    <a href="@path" target="_blank">@path</a>
                    <br>
                }

                if (SelectedNode != null && SelectedNode.Tag is SubmodelElementCollection smc)
                {
                    var semanticId = string.Empty;

                    try
                    {
                        semanticId = smc.SemanticId?.GetAsIdentifier();
                    }
                    catch
                    {
                    }

                    if (semanticId == "https://admin-shell.io/sandbox/zvei/TimeSeriesData/TimeSeries/1/0" ||
                        semanticId == "https://admin-shell.io/sandbox/zvei/TimeSeriesData/TimeSeriesSegment/1/0")
                    {
                        var diff = smc.TimeStamp - timeStampPlot;

                        if (smc != collectionPlot || diff.TotalSeconds < 0 || diff.TotalSeconds >= 5)
                        {
                            watchTimeToProcessImage = System.Diagnostics.Stopwatch.StartNew();

                            collectionPlot = smc;
                            timeStampPlot = smc.TimeStampTree;

                            _timeSeriesData.Clear();

                            // make initial data for time series
                            var tsd = new TimeSeriesData() {SourceTimeSeries = smc};
                            _timeSeriesData.Add(tsd);

                            // plot arguments for time series
                            tsd.Args = PlotArguments.Parse(smc.FindQualifierOfType("TimeSeries.Args")?.Value);

                            // TODO: info - ZveiTimeSeriesDataV10 is currently hardcoded as JSON string in code
                            var pcts = ZveiTimeSeriesDataV10.Static;

                            var tssReferenceKey = new Key(KeyTypes.ConceptDescription, "https://admin-shell.io/sandbox/zvei/TimeSeriesData/TimeSeriesSegment/1/0");

                            // is it a segment
                            if (semanticId == "https://admin-shell.io/sandbox/zvei/TimeSeriesData/TimeSeriesSegment/1/0")
                            {
                                TimeSeriesAddSegmentData(pcts, tsd, smc);
                            }
                            else
                            {
                                // search for segments on current level
                                var smcAllValues = smc.Value.FindAllSemanticIdAs<SubmodelElementCollection>(tssReferenceKey, MatchMode.Relaxed);

                                if (smcAllValues.Count() != 0)
                                {
                                    foreach (var smcseg in smcAllValues)
                                    {
                                        TimeSeriesAddSegmentData(pcts, tsd, smcseg);
                                    }
                                }
                            }

                            _timeSeriesData?.RenderTimeSeries(defPlotHeight: 200, "en", bi.sessionNumber, plotFilter.combinedFromDate, plotFilter.combinedToDate);
                            watchTimeToProcessImage.Stop();
                        }

                        var timeSeriesImageBase64 = string.Empty;
                        var scottplotImgPath = $"wwwroot/images/scottplot/smc_timeseries_clientid{bi.sessionNumber}.png";

                        if (System.IO.File.Exists(scottplotImgPath))
                        {
                            var imageArray = System.IO.File.ReadAllBytes(scottplotImgPath);
                            timeSeriesImageBase64 = Convert.ToBase64String(imageArray);
                        }

                        var elapsedMsToProcessImage = watchTimeToProcessImage.ElapsedMilliseconds;

                        if (System.IO.File.Exists(scottplotImgPath))
                        {
                            <EditForm Model="@plotFilter" OnValidSubmit="() => plotFilter.UpdateFilter(_timeSeriesData, bi.sessionNumber)">
                                <label for="filterFromDate">Filter from</label>
                                <InputDate id="filterFromDate" @bind-Value="plotFilter.fromDate"/>
                                <input type="time" @bind-value="plotFilter.fromTime"/>
                                <label for="filterToDate">Filter to</label>
                                <InputDate id="filterToDate" @bind-Value="plotFilter.toDate"/>
                                <input type="time" @bind-value="plotFilter.toTime"/>
                                <div>
                                    <button style="border-width: 1px; border-color: black; background-color: lightgray"
                                            type="submit">
                                        Apply
                                    </button>
                                    <button style="border-width: 1px; border-color: black; background-color: lightgray"
                                            @onclick="plotFilter.SetInitialFilterState">
                                        Reset
                                    </button>
                                    <button style="border-width: 1px; border-color: black; background-color: lightgray"
                                            @onclick="() => { plotFilterTsdOffset = 0; plotFilter.SetFilterStateDay(0); }">
                                        Today
                                    </button>
                                    <button style="border-width: 1px; border-color: black; background-color: lightgray"
                                            @onclick="() => { plotFilterTsdOffset = -1; plotFilter.SetFilterStateDay(-1); }">
                                        Yesterday
                                    </button>
                                    <button style="border-width: 1px; border-color: black; background-color: lightgray"
                                            @onclick="() => plotFilter.SetFilterStateDay(--plotFilterTsdOffset)">
                                        Prev day
                                    </button>
                                    <button style="border-width: 1px; border-color: black; background-color: lightgray"
                                            @onclick="() => plotFilter.SetFilterStateDay(++plotFilterTsdOffset)">
                                        Next day
                                    </button>
                                </div>
                            </EditForm>

                            <div class="d-flex flex-column">
                                <img @onclick="() => showImageModal = !showImageModal" src=data:image;base64,@timeSeriesImageBase64 alt="Visualization of time series"
                                     style="max-width:950px;cursor:zoom-in;"/>
                                <span class="text-muted" style="font-size:14px;">
                                    Image processing took @elapsedMsToProcessImage ms (Last update: @TimeStamp.DateTimeToString(timeStampPlot))
                                </span>
                            </div>

                            <div class="modal modal-fullscreen @(showImageModal ? " d-block" : "d-none")" style="margin-top:3.5rem;" tabindex="-1">
                                <div class="modal-dialog">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title">Visualization of time series</h5>
                                            <button type="button" @onclick="() => showImageModal = !showImageModal" class="close" data-dismiss="modal" aria-label="Close">
                                                <span aria-hidden="true">&times;</span>
                                            </button>
                                        </div>
                                        <div class="modal-body text-center">
                                            <img @onclick="() => showImageModal = !showImageModal" src=data:image;base64,@timeSeriesImageBase64
                                                 alt="Visualization of time series" style="max-width:90%;max-height:90%;cursor:zoom-out;" class="mb-2"/>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="my-2">Rendering time series...</div>
                        }
                    }
                    else
                    {
                        collectionPlot = null;
                    }
                }
            }

            @{
                var detailsImage = CreateDetailsImage(SelectedNode, out var url, out var svg);
                if (!string.IsNullOrEmpty(detailsImage))
                {
                    if (!svg)
                    {
                        if (!url)
                        {
                            <br/>
                            <div>
                                <img src=data:image;base64,@detailsImage style="max-width: 50%" alt="Details Image"/>
                            </div>
                        }
                        else
                        {
                            <br/>
                            <div>
                                <img src="@detailsImage" style="max-width: 50%" alt="Details Image"/>
                            </div>
                        }
                    }
                    else
                    {
                        if (!url)
                        {
                            <br/>
                            <div>
                                <img src=data:image/svg+xml;base64,@detailsImage style="max-width: 50%" alt="Details Image"/>
                            </div>
                        }
                        else
                        {
                            <br/>
                            <div>
                                <img src="detailsImage" style="max-width: 50%" alt="Details Image"/>
                            </div>
                        }
                    }
                }

                if (SelectedNode is {Tag: BasicEventElement be} && be.Observed != null)
                {
                    var observedSingleKey = be.Observed.GetAsExactlyOneKey().ToStringExtended();
                    <span style="color:white;background-color:blue;">Observed</span>
                    <span>@($" {observedSingleKey}")</span>
                    <br/>
                    var refsme = Program.env[0].AasEnv.FindReferableByReference(be.Observed);
                    if (refsme != null)
                    {
                        <span style="color:lightgray;">UPDATE @TimeStamp.DateTimeToString(refsme.TimeStamp)</span>
                        <br />
                        <span style="color:lightgray;">CREATE @TimeStamp.DateTimeToString(refsme.TimeStampCreate)</span>
                        <br />
                    }
                    else
                    {
                        <span>Referenced element does not exist!</span>
                        <br />
                    }
                }
            }
        </div>
    </div>
</div>


@inject IJSRuntime js
@inject BlazorSessionService bi;
@using AasxServer;

@code {
    System.Diagnostics.Stopwatch watchTimeToProcessImage = new();
    DateTime timeStampPlot = new();
    PlotFilter plotFilter = new();
    SubmodelElementCollection collectionPlot = null;
    bool showImageModal = false;
    ListOfTimeSeriesData _timeSeriesData = new();
    int plotFilterTsdOffset = 0;

    private class PlotFilter
    {
        public DateTime fromDate { get; set; }
        public DateTime fromTime { get; set; }
        public DateTime toDate { get; set; }
        public DateTime toTime { get; set; }
        public DateTime combinedFromDate { get; set; }
        public DateTime combinedToDate { get; set; }

        public PlotFilter()
        {
            SetInitialFilterState();
        }

        public void SetInitialFilterState()
        {
            ResetTimeOfDates();
            var initialFromDate = DateTime.Now.AddYears(-3);
            var initialToDate = DateTime.Now.AddYears(3);
            fromDate = initialFromDate;
            toDate = initialToDate;
            combinedFromDate = initialFromDate;
            combinedToDate = initialToDate;
        }

        public void SetFilterStateDay(int offset)
        {
            ResetTimeOfDates();
            var day = DateTime.Today.AddDays(offset);
            var midnight = new TimeSpan(0, 23, 59, 59);
            var endOfDay = day.Add(midnight);

            fromDate = day;
            fromTime = day;
            toDate = endOfDay;
            toTime = endOfDay;
            combinedFromDate = day;
            combinedToDate = endOfDay;
        }

        public void ResetTimeOfDates()
        {
// Reset to 0 AM
            fromDate = new DateTime(fromDate.Year, fromDate.Month, fromDate.Day, 0, 0, 0);
            toDate = new DateTime(toDate.Year, toDate.Month, toDate.Day, 0, 0, 0);
        }

        public void UpdateFilter(ListOfTimeSeriesData tsd, int sessionNumber)
        {
            ResetTimeOfDates();
            var fromTimeSpan = fromTime.TimeOfDay;
            var toTimeSpan = toTime.TimeOfDay;
            combinedFromDate = fromDate.Add(fromTimeSpan);
            combinedToDate = toDate.Add(toTimeSpan);
            tsd?.RenderTimeSeries(defPlotHeight: 200, "en", sessionNumber, combinedFromDate, combinedToDate);
        }
    }

    async Task DownloadFile()
    {
        StateHasChanged();
        if (SelectedNode.Tag is File f)
        {
            var fileName = System.IO.Path.GetFileName(f.Value);
            if (!string.IsNullOrEmpty(fileName))
            {
                try
                {
                    byte[] data;
                    using (var ms = new System.IO.MemoryStream())
                    {
                        await Program.env[SelectedNode.envIndex].GetLocalStreamFromPackage(f.Value).CopyToAsync(ms);
                        data = ms.ToArray();
                    }

                    await SaveAs(js, fileName, data);
                }
                catch
                {
                }
            }
        }
    }

    async Task SaveAs(IJSRuntime js, string filename, byte[] data)
    {
        ;
        await js.InvokeAsync<object>(
            "saveAsFile",
            filename,
            data
        );
    }

    public class Item
    {
        public string Text { get; set; }
        public IEnumerable<Item> Children { get; set; }

        public object parent { get; set; }
        public string Type { get; set; }
        public object Tag { get; set; }
        public int envIndex { get; set; }
    }

    List<Item> Items = null;

    IList<Item> ExpandedNodes = new List<Item>();

    private Item SelectedNode { get; set; }

    static ulong dataVersion = 0;

    public static void checkDataVersion()
    {
        if (Program.getDataVersion() != dataVersion)
        {
            dataVersion = Program.getDataVersion();
        }
    }

    System.Threading.Timer refresh = null;

    protected override void OnInitialized()
    {
// OnInitialized() always called twice
        SubmodelService.NewDataAvailable += NewData;
        Program.signalNewData(1);
    }

    public void Dispose()
    {
        SubmodelService.NewDataAvailable -= NewData;
    }

    int newDataMode = 0;

    void NewData(object source, EventArgs args)
    {
        if (Program.isLoading)
            return;

        if (newDataMode != 0 || args is not Program.NewDataAvailableArgs newArgs)
        {
            return;
        }

        newDataMode = newArgs.signalNewDataMode;
        InvokeAsync(StateHasChanged);
    }

    bool update = true;

    string updateVisibleTree(List<Item> viewItems, Item selectedNode)
    {
        if (!update)
        {
            return string.Empty;
        }

        switch (newDataMode)
        {
            case 0:
                break;
            case 1:
            case 2:
                var isSelected = selectedNode != null;
                var isExpanded = ExpandedNodes.Count != 0;
                var expandedNodesPath = new List<string>[ExpandedNodes.Count + 1];
                var selectedNodePath = GetPath(selectedNode);
                if (isExpanded)
                {
                    for (var j = 0; j < ExpandedNodes.Count; j++)
                    {
                        expandedNodesPath[j] = GetPath(ExpandedNodes[j]);
                    }
                }

                SubmodelService.BuildTree();
                Items = SubmodelService.GetTree(selectedNode, ExpandedNodes);
                ExpandedNodes.Clear();
                selectedNode = null;
                if (isSelected)
                {
                    selectedNode = FindPath(selectedNodePath);
                }

                if (isExpanded)
                {
                    foreach (var path in expandedNodesPath)
                    {
                        var p = FindPath(path);
                        if (p != null)
                            ExpandedNodes.Add(p);
                    }
                }

                newDataMode = 0;
                break;
// 3 == build new tree, all nodes closed
            case 3:
                SubmodelService.BuildTree();
                Items = SubmodelService.GetTree(selectedNode, ExpandedNodes);
                ExpandedNodes.Clear();
                selectedNode = null;
                newDataMode = 0;
                break;
        }

        SelectedNode = selectedNode;

        return string.Empty;
    }

    List<string> GetPath(Item i)
    {
        if (i == null)
            return null;

        var upPath = new List<string> {i.Text};
        while (i.parent != null)
        {
            i = (Item) i.parent;
            upPath.Add(i.Text);
        }

        var downPath = new List<string>();
        var j = upPath.Count - 1;
        while (j >= 0)
        {
            downPath.Add(upPath[j--]);
        }

        return downPath;
    }

    Item FindPath(List<string> path)
    {
        switch (path)
        {
            case {Count: > 0}:
            {
                var k = 0;
                while (k < Items.Count)
                {
                    var i = Items[k];
                    if (i.Text != path[0])
                    {
                        k++;
                        continue;
                    }

                    var j = 0;
                    var found = i;
                    while (++j < path.Count)
                    {
                        if (i.Children != null)
                        {
                            found = i.Children.FirstOrDefault(c => c.Text == path[j]);
                        }

                        if (found == null)
                        {
                            return null;
                        }

                        i = found;
                    }

                    return found;
                }

                break;
            }
        }

        return null;
    }

    void UpdateNode(Item i)
    {
        var clist = i.Children as List<Item>;
        var listIdshort = new List<string>();
        var done = false;
        if (i.Tag is Submodel sm)
        {
            listIdshort.AddRange(sm.SubmodelElements.Select(smew1 => smew1.IdShort));

            done = true;
        }

        if (!done && i.Tag is SubmodelElementCollection smec)
        {
            listIdshort.AddRange(smec.Value.Select(smew2 => smew2.IdShort));

            done = true;
        }

        if (!done && i.Tag is ISubmodelElement sme)
        {
            listIdshort.Add(sme.IdShort);
            done = true;
        }

// check if child name exists in data children idshorts, if not delete
        if (done)
        {
            var toDelete = new List<Item>();
            if (clist != null)
            {
                toDelete.AddRange(clist.Where(c => !listIdshort.Contains(c.Text)));
            }
            else
            {
                if (!listIdshort.Contains(i.Text))
                {
                    toDelete.Add(i);
                }
            }

            foreach (var c in toDelete)
            {
                if (c.parent is Item parent)
                {
                    (parent.Children as List<Item>)?.Remove(c);
                }
            }
        }

// check if data children idshorts exist in child names, if not insert
        if (clist == null)
        {
            return;
        }

        foreach (var c in clist)
        {
            UpdateNode(c);
        }
    }

    public static string CreateDetailsImage(Item item, out bool url, out bool svg)
    {
        svg = false;
        url = false;

        if (item == null)
        {
            return string.Empty;
        }

        var itemTag = item.Tag;

        switch (itemTag)
        {
            case AssetAdministrationShell tag:
            {
                var aas = tag;
                lock (Program.changeAasxFile)
                {
                    try
                    {
                        {
                            if (Program.env[item.envIndex] == null)
                                return string.Empty;

                            using var s = Program.env[item.envIndex].GetLocalThumbnailStream();
                            if (s != null)
                            {
                                using var m = new System.IO.MemoryStream();
                                s.CopyTo(m);
                                return Convert.ToBase64String(m.ToArray());
                            }
                        }
                    }
                    catch
                    {
                    }
                }

                break;
            }
            case AasCore.Aas3_0.File f:
            {
// Test for /aasx/
                if (!string.IsNullOrEmpty(f.Value))
                {
                    var split = f.Value.Split(new[] {'/'});
                    if (split.Length == 2 || split.Length > 1 && split[1].ToLower() == "aasx")
                    {
                        split = f.Value.Split(new[] {'.'});
                        switch (split.Last().ToLower())
                        {
                            case "jpg":
                            case "bmp":
                            case "png":
                            case "svg":
                                try
                                {
                                    using var s = Program.env[item.envIndex].GetLocalStreamFromPackage(f.Value);
                                    if (s != null)
                                    {
                                        using var m = new System.IO.MemoryStream();
                                        if (split.Last().ToLower().Equals("svg"))
                                        {
                                            svg = true;
                                        }

                                        s.CopyTo(m);
                                        return Convert.ToBase64String(m.ToArray());
                                    }
                                }
                                catch
                                {
                                }

                                break;
                        }
                    }
                    else
                    {
                        url = true;
                        return f.Value;
                    }
                }

                break;
            }
        }

        return string.Empty;
    }

    string GetQRCodeLink(Item item)
    {
        if (item == null)
        {
            return string.Empty;
        }

        var prefix = "http://";


        var itemTag = item.Tag;

        if (itemTag is not AssetAdministrationShell aas)
        {
            return string.Empty;
        }

        var asset = aas.AssetInformation;
        var url = asset.GlobalAssetId;

        return url;
    }

    string GetQRCodeImage(Item item)
    {
        var itemTag = item.Tag;

        if (itemTag is not AssetAdministrationShell)
        {
            return string.Empty;
        }

        var image = Program.generatedQrCodes[item.Tag];

        return image ?? string.Empty;
    }

    void CreateQRCodeImage(Item item)
    {
        if (item == null)
        {
            return;
        }

        var prefix = "http://";

        var itemTag = item.Tag;

        if (itemTag is not AssetAdministrationShell aas)
        {
            return;
        }

        if (Program.generatedQrCodes.ContainsKey(item.Tag))
        {
            Program.generatedQrCodes.Remove(item.Tag);
            return;
        }

        var asset = aas.AssetInformation;
        var url = asset.GlobalAssetId;

        var qrGenerator = new QRCodeGenerator();
        var qrCodeData = qrGenerator.CreateQrCode(url, QRCodeGenerator.ECCLevel.Q);
        var qrCode = new QRCode(qrCodeData);
        var qrCodeImage = qrCode.GetGraphic(20);
        using var memory = new System.IO.MemoryStream();
        qrCodeImage.Save(memory, System.Drawing.Imaging.ImageFormat.Bmp);
        var base64 = Convert.ToBase64String(memory.ToArray());

        Program.generatedQrCodes.Add(item.Tag, base64);
    }

    bool HasDownloadFile(Item item)
    {
        return false;
    }

    string GetLink(Item item, out bool external)
    {
        external = false;

        if (item == null)
        {
            return string.Empty;
        }

        var itemTag = item.Tag;

        switch (itemTag)
        {
            case null when Program.envSymbols[item.envIndex] == "L":
                return $"{Program.externalRest}/server/getaasx/{Convert.ToString(SelectedNode.envIndex)}";
            case AssetAdministrationShell:
                return $"{Program.externalBlazor}/packages/{Base64UrlEncoder.Encode(Convert.ToString(SelectedNode.envIndex))}";
            case File:
            case Property:
            {
                var value = itemTag switch
                {
                    AasCore.Aas3_0.File file => file.Value,
                    Property property => property.Value,
                    _ => string.Empty
                };

                if (string.IsNullOrEmpty(value))
                    return string.Empty;

                var split = value.Split(new[] {':'});
                if (split[0].ToLower() == "http" || split[0].ToLower() == "https")
                {
                    external = true;
                    return value;
                }

// Test for /aasx/
                split = value.Split(new[] {'/'});
                if (split.Length > 1)
                {
                    if (split.Length == 2 || split[1].ToLower() == "aasx")
                    {
                        var sme = item.Tag as ISubmodelElement;
                        var path = sme.IdShort;
                        var parent = sme.Parent as IReferable;
                        while (parent is not Submodel)
                        {
                            if (parent is ISubmodelElementList parentList)
                            {
                                if (path.Equals(sme.IdShort))
                                {
                                    var index = parentList.Value?.IndexOf(sme);
                                    path = $"[{index}]";
                                }

                                path = parentList.IdShort + path;
                            }
                            else if (parent.Parent is ISubmodelElementList prevParentList)
                            {
                                var index = prevParentList.Value?.IndexOf(parent as ISubmodelElement);
                                path = $"[{index}].{path}";
                            }
                            else
                            {
                                path = $"{parent.IdShort}.{path}";
                            }

                            parent = (IReferable) parent.Parent;
                        }


                        var currentUrl = $"{Program.externalBlazor}/";

                        return $"{currentUrl}submodels/{Base64UrlEncoder.Encode((parent as Submodel).Id)}/submodel-elements/{path}/attachment";
                    }
                }

                break;
            }
        }

        return string.Empty;
    }

    string GetSymbols(Item item)
    {
        if (item == null)
        {
            return string.Empty;
        }

        var ret = string.Empty;
        var o = item.Tag;

        if (o is not AssetAdministrationShell)
        {
            return ret;
        }

        var symbols = Program.envSymbols[item.envIndex];

        if (symbols == null)
        {
            return ret;
        }

        var s = symbols.Split(';');

        foreach (var t in s)
        {
            switch (t)
            {
                case "L":
                    ret += "ENCRYPTED ";
                    break;
                case "S":
                    ret += "SIGNED ";
                    break;
                case "V":
                    ret += "VALIDATED ";
                    break;
            }
        }

        return ret;
    }

    /// <summary>
    /// This method list added to check if Node is only SubmodelElementCollection (from V2)
    /// 
    /// </summary>
    /// <param name="item"></param>
    /// <returns></returns>
    bool IsSmColl(Item item)
    {
        if (item == null)
        {
            return false;
        }

        return item.Tag switch
        {
            SubmodelElementList => false,
            SubmodelElementCollection => true,
            _ => false
        };
    }

    string ViewNodeType(Item item)
    {
        if (item == null)
        {
            return string.Empty;
        }

        var ret = string.Empty;

        if (item.Type != null)
        {
            ret = $"{item.Type} ";
        }

        var itemTag = item.Tag;


        switch (itemTag)
        {
            case string when item.Text.Contains("/readme"):
                ret += item.Text;
                break;
            case null when Program.envSymbols[item.envIndex] == "L":
                ret += "AASX2";
                break;
            case AssetAdministrationShell:
                ret += "AAS";
                break;
            case Submodel:
                ret += "Sub";
                break;
            case ISubmodelElement:
            {
                switch (itemTag)
                {
                    case SubmodelElementList:
                        ret += "SML";
                        break;
                    case SubmodelElementCollection:
                        ret += "Coll";
                        break;
                    case Property:
                        ret += "Prop";
                        break;
                }

                break;
            }
        }

        switch (itemTag)
        {
            case Operation:
                ret += "Opr";
                break;
            case File:
                ret += "File";
                break;
            case Blob:
                ret += "Blob";
                break;
            case Range:
                ret += "Range";
                break;
            case MultiLanguageProperty:
                ret += "Lang";
                break;
            case RelationshipElement:
                ret += "Rel";
                break;
            case ReferenceElement:
                ret += "Ref";
                break;
            case Entity:
                ret += "Ent";
                break;
            case BasicEventElement:
                ret += "Evt";
                break;
            case AnnotatedRelationshipElement:
                ret += "RelA";
                break;
            case Capability:
                ret += "Cap";
                break;
        }

        return (ret);
    }

    string ViewTimeStamp(Item item)
    {
        if (item == null)
        {
            return string.Empty;
        }

        var ret = string.Empty;

        var itemTag = item.Tag;

        if (itemTag is IReferable r)
            ret += $" ({TimeStamp.DateTimeToString(r.TimeStampTree)}) ";

        return ret;
    }

    string ViewNodeID(Item item)
    {
        if (item == null)
        {
            return string.Empty;
        }

        var ret = "NULL";

        var itemTag = item.Tag;

        switch (itemTag)
        {
            case null when Program.envSymbols[item.envIndex] == "L":
                ret = item.Text;
                break;
            case string when item.Text.Contains("/readme"):
                ret = " ";
                break;
            case AssetAdministrationShell tag:
            {
                ret = tag.IdShort;
                break;
            }
            case Submodel tag:
            {
                ret = string.Empty;
                if (tag.Kind is ModellingKind.Template)
                    ret += "<T> ";
                ret += tag.IdShort;
                break;
            }
            case ISubmodelElement tag:
            {
                ret = string.Empty;
                ret += tag.IdShort;
                break;
            }
        }

        switch (itemTag)
        {
            case AasCore.Aas3_0.File f:
                ret = string.Empty;
                ret += f.IdShort;
                break;
            case Blob tag:
            {
                ret = string.Empty;
                ret += tag.IdShort;
                break;
            }
            case Range tag:
            {
                ret = string.Empty;
                ret += tag.IdShort;
                break;
            }
            case MultiLanguageProperty tag:
            {
                ret = string.Empty;
                ret += tag.IdShort;
                break;
            }
        }

        return (ret);
    }

    string GetHtmlId(Item item)
    {
        var ret = ViewNodeID(item);
        if (item.parent != null)
        {
            ret = $"{GetHtmlId(item.parent as Item)}.{ret}";
        }

        return (ret);
    }

    string ViewNodeInfo(Item item)
    {
        if (item == null)
        {
            return string.Empty;
        }

        var ret = string.Empty;

        var itemTag = item.Tag;

        switch (itemTag)
        {
            case AssetAdministrationShell tag:
            {
                var aas = tag;
                break;
            }
            case Submodel tag:
            {
                if (tag.Qualifiers is {Count: > 0})
                {
                    ret += " @QUALIFIERS";
                }

                break;
            }
            case SubmodelElementCollection tag:
            {
                if (tag.Value != null && tag.Value.Count > 0)
                {
                    ret += $" #{tag.Value.Count}";
                }

                if (tag.Qualifiers != null && tag.Qualifiers.Count > 0)
                {
                    ret += " @QUALIFIERS";
                }

                break;
            }
        }

        if (itemTag is ISubmodelElement)
        {
            switch (itemTag)
            {
                case Property prop:
                {
                    if (!string.IsNullOrEmpty(prop.Value))
                    {
                        var v = prop.Value;
                        if (v.Length > 100)
                            v = v[..100] + " ..";
                        ret = $" = {v}";
                    }

                    if (prop.Qualifiers != null && prop.Qualifiers.Count > 0)
                    {
                        ret += " @QUALIFIERS";
                    }

                    break;
                }
                case AasCore.Aas3_0.File f:
                {
                    if (f.Value != null)
                        ret = $" = {f.Value}";
                    if (f.Qualifiers is {Count: > 0})
                    {
                        ret += " @QUALIFIERS";
                    }

                    break;
                }
            }
        }

        switch (itemTag)
        {
            case AasCore.Aas3_0.Range range:
            {
                if (range.Min != null && range.Max != null)
                    ret = $" = {range.Min} .. {range.Max}";
                if (range.Qualifiers is {Count: > 0})
                {
                    ret += " @QUALIFIERS";
                }

                break;
            }
            case MultiLanguageProperty tag:
            {
                var ls = tag.Value;
                if (ls != null)
                {
                    ret = " = ";
                    for (var i = 0; i < ls.Count; i++)
                    {
                        ret += $"{ls[i].Language} ";
                        if (i == 0)
                            ret += $"{ls[i].Text} ";
                    }
                }

                if (tag.Qualifiers != null && tag.Qualifiers.Count > 0)
                {
                    ret += " @QUALIFIERS";
                }

                break;
            }
        }

        return (ret);
    }

    string ViewNodeDetails(Item item, int line, int col)
    {
        if (item == null)
        {
            return string.Empty;
        }

        var ret = string.Empty;

        var itemTag = item.Tag;

        switch (itemTag)
        {
            case null:
                return string.Empty;
            case AssetAdministrationShell tag:
            {
                ret = string.Empty;

                var asset = tag.AssetInformation;

                switch (line)
                {
                    case 0:
                        ret = col switch
                        {
                            0 => "ID",
                            1 => $"{tag.Id}",
                            2 => $" ==> {Base64UrlEncoder.Encode(tag.Id)}",
                            _ => ret
                        };
                        break;
                    case 1:
                        if (asset != null)
                        {
                            ret = col switch
                            {
                                0 => "ASSET",
                                1 => asset.GlobalAssetId,
                                _ => ret
                            };
                        }

                        break;
                    case 2:
                        switch (col)
                        {
                            case 0:
                                ret = "ASSETID";
                                break;
                            case 1:
                                ret = $"{asset.GlobalAssetId}";
                                break;
                            case 2:
                            {
                                if (asset.GlobalAssetId != null)
                                {
                                    ret = $" ==> {Base64UrlEncoder.Encode(asset.GlobalAssetId)}";
                                }

                                break;
                            }
                        }

                        break;
                    case 3:
                        switch (col)
                        {
                            case 0:
                                ret = "ASSETID URLENCODED";
                                break;
                            case 1:
                            {
                                var url = WebUtility.UrlEncode(asset.GlobalAssetId);
                                ret = url;
                                break;
                            }
                        }

                        break;

                    case 4:
                        if (tag.Extensions != null)
                        {
                            ret = col switch
                            {
                                0 => "Extensions",
                                1 => tag.Extensions.Aggregate(string.Empty, (current, e) => current + ($"{e.Name} : {e.Value}; ")),
                                _ => ret
                            };
                        }

                        break;
                    default:
                        ret = string.Empty;
                        break;
                }

                return ret;
            }
            case Submodel tag:
            {
                ret = string.Empty;
                switch (line)
                {
                    case 0:
                        ret = col switch
                        {
                            0 => "ID",
                            1 => $"{tag.Id}",
                            2 => $" ==> {Base64UrlEncoder.Encode(tag.Id)}",
                            _ => ret
                        };
                        break;
                    case 1:
                        switch (col)
                        {
                            case 0:
                                ret = "Semantic ID";
                                break;
                            case 1:
                            {
                                ret = "NULL";
                                var k = tag.SemanticId?.GetAsExactlyOneKey();
                                if (k != null)
                                {
                                    ret = $"[{k.Type}, {k.Value}]";
                                }

                                break;
                            }
                        }

                        break;
                    case 2:
                        ret = GetQualifiers(tag.Qualifiers, col);
                        break;
                    case 3:
                        if (tag.Extensions != null)
                        {
                            switch (col)
                            {
                                case 0:
                                    ret = "Extensions";
                                    break;
                                case 1:
                                {
                                    ret = tag.Extensions.Aggregate(string.Empty, (current, e) => current + $"{e.Name} : {e.Value}; ");

                                    break;
                                }
                            }
                        }

                        break;
                    default:
                        ret = string.Empty;
                        break;
                }

                return ret;
            }
            case Property tag:
            {
                ret = string.Empty;
                switch (line)
                {
                    case 0:
                        switch (col)
                        {
                            case 0:
                                ret = "Semantic ID";
                                break;
                            case 1:
                            {
                                ret = "NULL";
                                var k = tag.SemanticId?.GetAsExactlyOneKey();
                                if (k != null)
                                {
                                    ret = $"[{k.Type}, {k.Value}]";
                                }

                                break;
                            }
                        }

                        break;
                    case 1:
                        ret = col switch
                        {
                            0 => "Value Type",
                            1 => $"{tag.ValueType}",
                            _ => ret
                        };
                        break;
                    case 2:
                        ret = col switch
                        {
                            0 => "Value",
                            1 => $"{tag.Value}",
                            _ => ret
                        };
                        break;
                    case 3:
                        ret = GetQualifiers(tag.Qualifiers, col);
                        break;
                    case 4:
                        if (col == 0)
                            ret = GetUnit(tag);
                        break;
                    default:
                        ret = string.Empty;
                        break;
                }

                return ret;
            }
            case Entity tag:
            {
                switch (line)
                {
                    case 0:
                        switch (col)
                        {
                            case 0:
                                ret = "Semantic ID";
                                break;
                            case 1:
                            {
                                ret = "NULL";
                                var k = tag.SemanticId?.GetAsExactlyOneKey();
                                if (k != null)
                                {
                                    ret = $"[{k.Type}, {k.Value}]";
                                }

                                break;
                            }
                        }

                        break;
                    case 1:
                        ret = col switch
                        {
                            0 => "Entity Type",
                            1 => $"{tag.EntityType}",
                            _ => ret
                        };
                        break;
                    case 2:
                        ret = string.Empty;
                        if (tag.EntityType == EntityType.SelfManagedEntity)
                        {
                            if (tag.GlobalAssetId != null)
                            {
                                switch (col)
                                {
                                    case 0:
                                        ret = "Asset";
                                        break;
                                    case 1:
                                    {
                                        var k = tag.GlobalAssetId;
                                        break;
                                    }
                                }
                            }

                            if (tag.SpecificAssetIds != null)
                            {
                                switch (col)
                                {
                                    case 0:
                                        ret = "Asset";
                                        break;
                                    case 1:
                                    {
                                        foreach (var k in tag.SpecificAssetIds.Select(specificAssetId => specificAssetId.Value).Where(k => !string.IsNullOrEmpty(k)))
                                        {
                                            ret = $"[{k}]";
                                        }

                                        break;
                                    }
                                }
                            }
                        }

                        break;
                    case 3:
                        ret = GetQualifiers(tag.Qualifiers, col);
                        break;
                    default:
                        ret = string.Empty;
                        break;
                }

                return ret;
            }
            case AasCore.Aas3_0.File f:
                ret += $", {f.Value}";
                switch (line)
                {
                    case 0:
                        switch (col)
                        {
                            case 0:
                                ret = "Semantic ID";
                                break;
                            case 1:
                            {
                                ret = "NULL";
                                var k = f.SemanticId?.GetAsExactlyOneKey();
                                if (k != null)
                                {
                                    ret = $"[{k.Type}, {k.Value}]";
                                }

                                break;
                            }
                        }

                        break;
                    case 1:
                        ret = col switch
                        {
                            0 => "Value",
                            1 => f.Value,
                            _ => ret
                        };
                        break;
                    case 2:
                        ret = GetQualifiers(f.Qualifiers, col);
                        break;
                    default:
                        ret = string.Empty;
                        break;
                }

                return ret;
            case Blob b:
                ret = string.Empty;
                switch (line)
                {
                    case 0:
                        switch (col)
                        {
                            case 0:
                                ret = "Semantic ID";
                                break;
                            case 1:
                            {
                                ret = "NULL";
                                var k = b.SemanticId?.GetAsExactlyOneKey();
                                if (k != null)
                                {
                                    ret = $"[{k.Type}, {k.Value}]";
                                }

                                break;
                            }
                        }

                        break;
                    case 1:
                        ret = col switch
                        {
                            0 => "ContentType",
                            1 => b.ContentType,
                            _ => ret
                        };
                        break;
                    case 2:
                        ret = col switch
                        {
                            0 => "Value",
                            1 => System.Text.Encoding.ASCII.GetString(b.Value),
                            _ => ret
                        };
                        break;
                    case 3:
                        ret = GetQualifiers(b.Qualifiers, col);
                        break;
                    default:
                        ret = string.Empty;
                        break;
                }

                return ret;
            case Range tag:
            {
                ret = tag.IdShort;
                switch (line)
                {
                    case 0:
                        switch (col)
                        {
                            case 0:
                                ret = "Semantic ID";
                                break;
                            case 1:
                            {
                                ret = "NULL";
                                var k = tag.SemanticId?.GetAsExactlyOneKey();
                                if (k != null)
                                {
                                    ret = $"[{k.Type}, {k.Value}]";
                                }

                                break;
                            }
                        }

                        break;
                    case 1:
                        ret = col switch
                        {
                            0 => "Min",
                            1 => $"{tag.Min}",
                            _ => ret
                        };
                        break;
                    case 2:
                        ret = col switch
                        {
                            0 => "Max",
                            1 => $"{tag.Max}",
                            _ => ret
                        };
                        break;
                    case 3:
                        ret = GetQualifiers(tag.Qualifiers, col);
                        break;
                    case 4:
                        if (col == 0)
                            ret = GetUnit(tag);
                        break;
                    default:
                        ret = string.Empty;
                        break;
                }

                return ret;
            }
            case Operation tag:
            {
                switch (line)
                {
                    case 0:
                        switch (col)
                        {
                            case 0:
                                ret = "Semantic ID";
                                break;
                            case 1:
                            {
                                ret = "NULL";
                                var k = tag.SemanticId?.GetAsExactlyOneKey();
                                if (k != null)
                                {
                                    ret = $"[{k.Type}, {k.Value}]";
                                }

                                break;
                            }
                        }

                        break;
                    case 1:
                        switch (col)
                        {
                            case 0:
                                ret = "CountInputs";
                                break;
                            case 1:
                            {
                                ret = "0";
                                if (tag.InputVariables != null)
                                {
                                    ret = $"{tag.InputVariables.Count}";
                                }

                                break;
                            }
                        }

                        break;
                    case 2:
                        switch (col)
                        {
                            case 0:
                                ret = "CountOutputs";
                                break;
                            case 1:
                            {
                                ret = "0";
                                if (tag.OutputVariables != null)
                                {
                                    ret = $"{tag.OutputVariables.Count}";
                                }

                                break;
                            }
                        }

                        break;
                    case 3:
                        ret = GetQualifiers(tag.Qualifiers, col);
                        break;
                    default:
                        ret = string.Empty;
                        break;
                }

                return ret;
            }
            case AnnotatedRelationshipElement tag:
            {
                switch (line)
                {
                    case 0:
                        switch (col)
                        {
                            case 0:
                                ret = "Semantic ID";
                                break;
                            case 1:
                            {
                                ret = "NULL";
                                var k = tag.SemanticId?.GetAsExactlyOneKey();
                                if (k != null)
                                {
                                    ret = $"[{k.Type}, {k.Value}]";
                                }

                                break;
                            }
                        }

                        break;
                    case 1:
                        switch (col)
                        {
                            case 0:
                                ret = "First";
                                break;
                            case 1:
                            {
                                var k = tag.First;
                                ret = k.Keys.ToStringExtended();
                                break;
                            }
                        }

                        break;
                    case 2:
                        switch (col)
                        {
                            case 0:
                                ret = "Second";
                                break;
                            case 1:
                            {
                                var k = tag.Second;
                                ret = k.Keys.ToStringExtended();
                                break;
                            }
                        }

                        break;
                    case 3:
                        if (col == 0)
                            ret = GetQualifiers(tag.Qualifiers, col);
                        break;
                    default:
                        ret = string.Empty;
                        break;
                }

                return ret;
            }
            case RelationshipElement tag:
            {
                switch (line)
                {
                    case 0:
                        switch (col)
                        {
                            case 0:
                                ret = "Semantic ID";
                                break;
                            case 1:
                            {
                                ret = "NULL";
                                var k = tag.SemanticId?.GetAsExactlyOneKey();
                                if (k != null)
                                {
                                    ret = $"[{k.Type}, {k.Value}]";
                                }

                                break;
                            }
                        }

                        break;
                    case 1:
                        switch (col)
                        {
                            case 0:
                                ret = "First";
                                break;
                            case 1:
                            {
                                var k = tag.First;
                                ret = k.Keys.ToStringExtended();

                                break;
                            }
                        }

                        break;
                    case 2:
                        switch (col)
                        {
                            case 0:
                                ret = "Second";
                                break;
                            case 1:
                            {
                                var k = tag.Second;
                                ret = k.Keys.ToStringExtended();


                                break;
                            }
                        }

                        break;
                    case 3:
                        ret = GetQualifiers(tag.Qualifiers, col);
                        break;
                    default:
                        ret = string.Empty;
                        break;
                }

                return ret;
            }
            case ReferenceElement tag:
            {
                switch (line)
                {
                    case 0:
                        switch (col)
                        {
                            case 0:
                                ret = "Semantic ID";
                                break;
                            case 1:
                            {
                                ret = "NULL";
                                var k = tag.SemanticId?.GetAsExactlyOneKey();
                                if (k != null)
                                {
                                    ret = $"[{k.Type}, {k.Value}]";
                                }

                                break;
                            }
                        }

                        break;
                    case 1:
                        switch (col)
                        {
                            case 0:
                                ret = "Value";
                                break;
                            case 1:
                            {
                                ret = "NULL";
                                var k = tag.Value?.Keys;
                                if (k != null)
                                {
                                    ret = k.ToStringExtended();
                                }

                                break;
                            }
                        }

                        break;
                    case 2:
                        ret = GetQualifiers(tag.Qualifiers, col);
                        break;
                    default:
                        ret = string.Empty;
                        break;
                }

                return ret;
            }
            case MultiLanguageProperty multiLanguageProperty:
            {
                var ls = multiLanguageProperty.Value;
                if (ls == null)
                {
                    return ret;
                }

                ret = ls.Aggregate(ret, (current, t) => current + $"{t.Language} ");

                switch (line)
                {
                    case 0:
                    {
                        switch (col)
                        {
                            case 0:
                                ret = "Semantic ID";
                                break;
                            case 1:
                            {
                                ret = "NULL";
                                var k = multiLanguageProperty.SemanticId?.GetAsExactlyOneKey();
                                if (k != null)
                                {
                                    ret = $"[{k.Type}, {k.Value}]";
                                }

                                break;
                            }
                        }

                        break;
                    }
                    case 1:
                        ret = GetQualifiers(multiLanguageProperty.Qualifiers, col);
                        break;
                    default:
                        ret = string.Empty;
                        if (ls.Count > line - 2)
                        {
                            ret = col switch
                            {
                                0 => ls[line - 2].Language,
                                1 => $"{ls[line - 2].Text}",
                                _ => ret
                            };
                        }

                        break;
                }

                return ret;
            }
        }

        if (itemTag is not ISubmodelElement sme)
        {
            return (ret);
        }

        switch (line)
        {
            case 0:
                switch (col)
                {
                    case 0:
                        ret = "Semantic ID";
                        break;
                    case 1:
                    {
                        ret = "NULL";
                        var k = sme.SemanticId?.GetAsExactlyOneKey();
                        if (k != null)
                        {
                            ret = $"[{k.Type}, {k.Value}]";
                        }

                        break;
                    }
                }

                break;
            case 1:
                ret = GetQualifiers(sme.Qualifiers, col);
                break;
            default:
                ret = string.Empty;
                break;
        }

        return ret;
    }

    static string GetQualifiers(List<IQualifier> q, int col)
    {
        var ret = string.Empty;

        if (q is not {Count: > 0})
        {
            return ret;
        }

        switch (col)
        {
            case 0:
                ret = "Qualifiers";
                break;
            case 1:
            {
                ret = string.Empty;
                for (var i = 0; i < q.Count; i++)
                {
                    if (i != 0)
                        ret += ", ";
                    if (q[i].Type != null && q[i].Type != "")
                    {
                        ret += $"{q[i].Type} ";
                    }

                    if (!string.IsNullOrEmpty(q[i].Value))
                    {
                        ret += $"= {q[i].Value}";
                    }
                }

                break;
            }
        }

        return ret;
    }

    private string GetUnit(ISubmodelElement se)
    {
        var ret = string.Empty;
        if (se.SemanticId == null || se.SemanticId.Keys != null || se.SemanticId.Keys.Count != 0)
        {
            return ret;
        }


        return ret;
    }

}

<style>
    .modal-fullscreen {
        padding: 0 !important;
    }

    .modal-fullscreen .modal-dialog {
        width: 100%;
        max-width: none;
        height: 100%;
        margin: 0;
    }

    .modal-fullscreen .modal-content {
        height: 100%;
        border: 0;
        border-radius: 0;
    }

    .modal-fullscreen .modal-body {
        overflow-y: auto;
    }
</style>
