@page "/db-chunked";
@page "/db-chunked/env";
@page "/db-chunked/cd";
@page "/db-chunked/aas";
@page "/db-chunked/smref";
@page "/db-chunked/sm";
@page "/db-chunked/sme";
@page "/db-chunked/svalue";
@page "/db-chunked/ivalue";
@page "/db-chunked/dvalue";
@page "/db-chunked/ovalue";
@using AasxServer
@using AasxServerDB
@using Microsoft.AspNetCore.Http;
@using Microsoft.AspNetCore.Html;
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Microsoft.EntityFrameworkCore
@using System.Linq.Dynamic.Core;
@using AasxRestServerLibrary;
@using Microsoft.IdentityModel.Tokens;
@using AasxServerDB.Entities;
@using TimeStamp;
@using Nodes = System.Text.Json.Nodes;
@inject NavigationManager NavMan
@inject AasxServerBlazor.Data.AASService SubmodelService

<style>
	.cell-content {
	height: 90px;
	max-height: 90px;
	overflow: hidden;
	word-break:break-all;
	font-size:small;
	}
	
    @@media (max-width: 1920px) {
        .cell-content {
            height: 140px;
			max-height: 140px;
			overflow: hidden;
			word-break:break-all;
			font-size:small;
        }
    }

	.vcell-content {
	height: 45px;
	max-height: 45px;
	overflow: hidden;
	word-break:break-all;
	font-size:small;
	}
	

	.cell-details {
	word-break: break-all;
	}

	thead th {
	position: sticky;
	top: 0;
	background-color: #fff;
	z-index: 100;
	box-shadow: 0 2px 2px -1px rgba(0, 0, 0, 0.4);
	top: -10px;
	}

	table {
	border-collapse: separate;
	border-spacing: 0;
	}

</style>

<div>
	@{
		if (!Program.withDb)
		{
			<span>This is a in memory server!</span>
		}
		else
		{
		// get parameters
			var url      = NavMan.Uri;
			var    splitUrl = url.Split("?");
			url = splitUrl[ 0 ].ToLower();
			var    sUrl     = url.Split("/");
			var shorturl = url.Substring(0, url.Length - ($"/{sUrl[ sUrl.Length - 1 ]}").Length);
			if (splitUrl.Length == 2)
			{
				var query = System.Web.HttpUtility.ParseQueryString(splitUrl[ 1 ]);
				var list  = query.Get("size");
				if (!list.IsNullOrEmpty())
					size = Convert.ToInt32(list);
				list  = query.Get("offset");
				if (!list.IsNullOrEmpty())
					offset = Convert.ToInt32(list);
				list = query.Get("search");
				if (!list.IsNullOrEmpty())
					search = list;
				list = query.Get("envid");
				if (!list.IsNullOrEmpty())
					envid = Convert.ToInt32(list);
				list = query.Get("cdid");
				if (!list.IsNullOrEmpty())
					cdid = Convert.ToInt32(list);
				list = query.Get("aasid");
				if (!list.IsNullOrEmpty())
					aasid = Convert.ToInt32(list);
				list = query.Get("smid");
				if (!list.IsNullOrEmpty())
					smid = Convert.ToInt32(list);
				list = query.Get("smeid");
				if (!list.IsNullOrEmpty())
					smeid = Convert.ToInt32(list);
				list = query.Get("parid");
				if (!list.IsNullOrEmpty())
					parid = Convert.ToInt32(list);
				list = query.Get("smidentifier");
				if (!list.IsNullOrEmpty())
					smidentifier = list;
				list = query.Get("details");
				if (!list.IsNullOrEmpty())
					details = list.ToLower();
			}

			// change parameters to input window
			if (url.EndsWith("/env") || url.EndsWith("/cd") || url.EndsWith("/aas") || url.EndsWith("/sm")
				|| url.EndsWith("/sme") || url.EndsWith("/svalue") || url.EndsWith("/ivalue") || url.EndsWith("/dvalue") || url.EndsWith("/ovalue"))
			{
				<input @bind="CurrentValue" style="width:200px; border-width: 1px; border-color: black;"/>
				@code {
			private string CurrentValue { get; set; }
                }
				if (!CurrentValue.IsNullOrEmpty())
				{
					var splitCur = CurrentValue.Split("=");
					if (splitCur.Count() == 2)
					{
						switch (splitCur[ 0 ])
						{
							case "size":
								size = 1000;
								if (!splitCur[ 1 ].IsNullOrEmpty())
									size = Convert.ToInt32(splitCur[ 1 ]);
								break;
							case "offset":
								offset = 0;
								if (!splitCur[ 1 ].IsNullOrEmpty())
									offset = Convert.ToInt32(splitCur[ 1 ]);
								break;
							case "search":
								search = splitCur[ 1 ];
								break;
							case "details":
								details = splitCur[1].ToLower();
								break;
							case "envid":
								envid = 0;
								if (!splitCur[ 1 ].IsNullOrEmpty())
									envid = Convert.ToInt32(splitCur[1]);
								break;
							case "cdid":
								cdid = 0;
								if (!splitCur[ 1 ].IsNullOrEmpty())
									cdid = Convert.ToInt32(splitCur[1]);
								break;
							case "aasid":
								aasid = 0;
								if (!splitCur[ 1 ].IsNullOrEmpty())
									aasid = Convert.ToInt32(splitCur[ 1 ]);
								break;
							case "smid":
								smid = 0;
								if (!splitCur[ 1 ].IsNullOrEmpty())
									smid = Convert.ToInt32(splitCur[ 1 ]);
								break;
							case "smeid":
								smeid = 0;
								if (!splitCur[ 1 ].IsNullOrEmpty())
									smeid = Convert.ToInt32(splitCur[ 1 ]);
								break;
							case "parid":
								parid = 0;
								if (!splitCur[ 1 ].IsNullOrEmpty())
									parid = Convert.ToInt32(splitCur[ 1 ]);
								break;
						}
					}

					CurrentValue = string.Empty;
					update = true;
				}
			}

			string searchLower = search.ToLower();

			using (AasContext db = new AasContext())
			{
				if (!(url.EndsWith("/env") || url.EndsWith("/cd") || url.EndsWith("/aas") || url.EndsWith("/sm") || url.EndsWith("/smref")
					|| url.EndsWith("/sme") || url.EndsWith("/svalue") || url.EndsWith("/ivalue") || url.EndsWith("/dvalue") || url.EndsWith("/ovalue")))
				{
					if (AasContext.IsPostgres)
					{
						<span>PostgreSQL database</span>
						<br/>
					}
					else
					{
						<span>SQLite database</span>
						<br/>
					}

					<br/>
					<table class="table table-bordered table-sm" style="word-wrap:break-word;word-break:break-all;">
						<thead>
							<tr>
								<th style="word-break:keep-all">Table</th>
								<th style="word-break:keep-all">Count</th>
								<th style="word-break:keep-all">Links</th>
							</tr>
						</thead>
						<tbody>
							<tr>
								<td>
									<span>Env#:</span>
								</td>
								<td>
									<span>@db.EnvSets.Select(x => x.Id).Count()</span>
								</td>
								<td>
									<a href="@($"{url}/env")" target="_blank">env</a>
								</td>
							</tr>
							<tr>
								<td>
									<span>CD#:</span>
								</td>
								<td>
									<span>@db.CDSets.Select(x => x.Id).Count()</span>
								</td>
								<td>
									<a href="@($"{url}/cd")" target="_blank">cd</a>
								</td>
							</tr>
							<tr>
								<td>
									<span>AAS#:</span>
								</td>
								<td>
									<span>@db.AASSets.Select(x => x.Id).Count()</span>
								</td>
								<td>
									<a href="@($"{url}/aas")" target="_blank">aas</a>
								</td>
							</tr>
							<tr>
								<td>
									<span>SMREF#:</span>
								</td>
								<td>
									<span>@db.SMRefSets.Select(x => x.Id).Count()</span>
								</td>
								<td>
									<a href="@($"{url}/smref")" target="_blank">smref</a>
								</td>
							</tr>
							<tr>
								<td>
									<span>SM#:</span>
								</td>
								<td>
									<span>@db.SMSets.Select(x => x.Id).Count()</span>
								</td>
								<td>
									<a href="@($"{url}/sm")" target="_blank">sm</a>
								</td>
							</tr>
							<tr>
								<td>
									<span>SME#:</span>
								</td>
								<td>
									<span>@db.SMESets.Select(x => x.Id).Count()</span>
								</td>
								<td>
									<a href="@($"{url}/sme")" target="_blank">sme</a>
								</td>
							</tr>
							<tr>
								<td>
									<span>IValue#:</span>
								</td>
								<td>
									<span>@db.IValueSets.Select(x => x.Id).Count()</span>
								</td>
								<td>
									<a href="@($"{url}/ivalue")" target="_blank">ivalue</a>
								</td>
							</tr>
							<tr>
								<td>
									<span>SValue#:</span>
								</td>
								<td>
									<span>@db.SValueSets.Select(x => x.Id).Count()</span>
								</td>
								<td>
									<a href="@($"{url}/svalue")" target="_blank">svalue</a>
								</td>
							</tr>
							<tr>
								<td>
									<span>DValue#:</span>
								</td>
								<td>
									<span>@db.DValueSets.Select(x => x.Id).Count()</span>
								</td>
								<td>
									<a href="@($"{url}/dvalue")" target="_blank">dvalue</a>
								</td>
							</tr>
							<tr>
								<td>
									<span>OValue#:</span>
								</td>
								<td>
									<span>@db.OValueSets.Select(x => x.Id).Count()</span>
								</td>
								<td>
									<a href="@($"{url}/ovalue")" target="_blank">ovalue</a>
								</td>
							</tr>
						</tbody>
					</table>
					<br/>
					<b>Database structure:</b>
					<br/>
					<img src="db-schema.jpg"/>
				}

				if (url.EndsWith("/env"))
				{
					if (totalCount == 0)
					{
						totalCount = db.EnvSets.Select(x => x.Id).Count();
					}
					CheckTotalCountAndUpdate();
					if (update)
					{
						update = false;
						loadedItems = null;
						if (EnvSetContainer != null)
						{
							EnvSetContainer.RefreshDataAsync();
							this.StateHasChanged();
						}
					}

					<span>
						&nbsp&nbsp@($"Env#: {totalCount} size={size} offset={offset} /* search={search} */")
					</span>
					<br />
					<table class="table table-bordered table-sm" style="width:100%;word-wrap:break-word;word-break:break-all;">
						<thead>
							<tr>
								<th style="word-break:keep-all">Env#</th>
								<th style="word-break:keep-all">Path</th>
								<th style="word-break:keep-all">Links</th>
							</tr>
						</thead>
						<tbody>
							<Virtualize Context="EnvSet" @ref="EnvSetContainer" ItemsProvider="LoadEnvSetItems">
								<tr>
									<td style="word-break:keep-all">
										<b>@EnvSet.Id</b>
									</td>
									<td>@EnvSet.Path</td>
									<td style="word-break:keep-all">
										<a href="@($"{shorturl}/aas?envid={EnvSet.Id}")" target="_blank">aas </a>
										<a href="@($"{shorturl}/sm?envid={EnvSet.Id}")" target="_blank">sm </a>
										<a href="@($"{shorturl}/cd?envid={EnvSet.Id}")" target="_blank">cd </a>
										@if (cdid != 0)

										{
											<a href="@($"{shorturl}/cd?envid={EnvSet.Id}&cdid={cdid}")" target="_blank">givenCd</a>
										}
									</td>
								</tr>
							</Virtualize>
						</tbody>
					</table>
				}

				if (url.EndsWith("/cd"))
				{
					if (totalCount == 0)
					{
						totalCount = db.CDSets.Select(x => x.Id).Count();
					}
					CheckTotalCountAndUpdate();
					if (update)
					{
						update = false;
						loadedItems = null;
						if (CDSetContainer != null)
						{
							CDSetContainer.RefreshDataAsync();
							this.StateHasChanged();
						}
					}

					<span>
						&nbsp&nbsp@($"CD#: {totalCount} size={size} offset={offset} search={search} details={details}")
					</span>
					<br />
					<div style="width: 100%; height: 80vh; overflow-x: hidden; padding: 10px;">
						<table class="table table-bordered table-sm" style="width:100%;word-wrap:break-word;word-break:break-all;border-color:blue;">
						<thead>
							<tr style="border-color:blue;">
								<th style="width:3%;font-size:x-small;word-break: break-all;border-color:blue;">CD#</th>
								<th style="width:10%;font-size:x-small;word-break: break-all;border-color:blue;">Id Short</th>
								<th style="width:3%;font-size:x-small;word-break: break-all;border-color:blue;">Display Name</th>
								<th style="width:3%;font-size:x-small;word-break: break-all;border-color:blue;">Category</th>
								<th style="width:3%;font-size:x-small;word-break: break-all;border-color:blue;">Description</th>
								<th style="width:3%;font-size:x-small;word-break: break-all;border-color:blue;">Extensions</th>
								<th style="width:10%;font-size:x-small;word-break: break-all;border-color:blue;">Identifier</th>
								<th style="width:3%;font-size:x-small;word-break: break-all;border-color:blue;">Is Case Of</th>
								<th style="width:3%;font-size:x-small;word-break: break-all;border-color:blue;">Embedded Data Specifications</th>
								<th style="width:3%;font-size:x-small;word-break: break-all;border-color:blue;">Version</th>
								<th style="width:3%;font-size:x-small;word-break: break-all;border-color:blue;">Revision</th>
								<th style="width:3%;font-size:x-small;word-break: break-all;border-color:blue;">Creator</th>
								<th style="width:3%;font-size:x-small;word-break: break-all;border-color:blue;">Template Id</th>
								<th style="width:3%;font-size:x-small;word-break: break-all;border-color:blue;">A Embedded Data Specifications</th>
								<th style="width:8%;word-break:break-all;font-size:x-small;border-color:blue;">Time Stamp</th>
								<th style="width:4%;font-size:x-small;word-break: break-all;border-color:blue;">Links</th>
								<th style="width:4%;font-size:x-small;word-break: break-all;border-color:blue;">API</th>
							</tr>
						</thead>
						<tbody>
							@{
								var cell = "cell-content";
								var withDetails = details == "true";
								if (withDetails)
								{
									cell = "cell-details";
								}
							}
							<Virtualize Context="CDSet" @ref="CDSetContainer" ItemsProvider="LoadCDSetItems">
								@{
									var cd64 = Base64UrlEncoder.Encode(CDSet.Identifier);
									var link = $"{AasxServer.Program.externalBlazor}/concept-descriptions/{cd64}";
								}
								<tr style="height:auto;border-color:blue;">
									<td style="width:3%;font-size:small;word-break: break-all;border-color:blue;">
										<b>@CDSet.Id</b>
									</td>
									<td style="width:10%;font-size:small;word-break: break-all;border-color:blue;">@CDSet.IdShort</td>
									<td style="width:3%;font-size:small;word-break: break-all;border-color:blue;">@CDSet.DisplayName</td>
									<td style="width:3%;font-size:small;word-break: break-all;border-color:blue;">@CDSet.Category</td>
									<td style="width:3%;font-size:small;word-break: break-all;border-color:blue;">@CDSet.Description</td>
									<td style="width:3%;font-size:small;word-break: break-all;border-color:blue;">@CDSet.Extensions</td>
									<td style="width:10%;font-size:small;word-break: break-all;border-color:blue;">@CDSet.Identifier</td>
									<td style="width:3%;font-size:small;word-break: break-all;border-color:blue;">
										<div class="@cell">
											@if (withDetails)
											{
												<span>@CDSet.IsCaseOf</span>
											}
											else
											{
												var text = CDSet.IsCaseOf;
												if (text?.Length > 40)
												{
													text = text.Substring(0, 40) + " ..";
												}
												<span>@text</span>
											}
										</div>
									</td>
									<td style="width:3%;font-size:small;word-break: break-all;border-color:blue;">
										<div class="@cell">
											@if (withDetails)
											{
												<span>@CDSet.EmbeddedDataSpecifications</span>
											}
											else
											{
												var text = CDSet.EmbeddedDataSpecifications;
												if (text?.Length > 40)
												{
													text = text.Substring(0, 40) + " ..";
												}
												<span>@text</span>
											}
										</div>
									</td>
									<td style="width:3%;font-size:small;word-break: break-all;border-color:blue;">@CDSet.Version</td>
									<td style="width:3%;font-size:small;word-break: break-all;border-color:blue;">@CDSet.Revision</td>
									<td style="width:3%;font-size:small;word-break: break-all;border-color:blue;">@CDSet.Creator</td>
									<td style="width:3%;font-size:small;word-break: break-all;border-color:blue;">@CDSet.TemplateId</td>
									<td style="width:3%;font-size:small;word-break: break-all;border-color:blue;">
										<div class="@cell">
												@if (withDetails)
												{
													<span>@CDSet.AEmbeddedDataSpecifications</span>
												}
												else
												{
													var text = CDSet.AEmbeddedDataSpecifications;
													if (text?.Length > 40)
													{
														text = text.Substring(0, 40) + " ..";
													}
													<span>@text</span>
												}
										</div>
									</td>
									<td style="width:8%;word-break:break-all;color:lightgray;font-size:x-small;border-color:blue;">
										@($"CREATE {TimeStamp.DateTimeToString(CDSet.TimeStampCreate)}")<br />
										@($"UPDATE {TimeStamp.DateTimeToString(CDSet.TimeStamp)}")<br />
										@($"TREE {TimeStamp.DateTimeToString(CDSet.TimeStampTree)}")<br />
										@($"DELETE {TimeStamp.DateTimeToString(CDSet.TimeStampDelete)}")
									</td>
									<td style="idth:4%;font-size:small;word-break: keep-all;border-color:blue;">
										<a href="@($"{shorturl}/env?cdid={CDSet.Id}")" target="_blank">env </a>
										@if (envid != 0)
										{
											<a href="@($"{shorturl}/env?cdid={CDSet.Id}&envid={envid}")" target="_blank">givenEnv</a>
										}
									</td>
									<td style="idth:4%;font-size:small;word-break: keep-all;border-color:blue;">
										@if (!CDSet.Identifier.IsNullOrEmpty())
										{
											<a href="@link" target="_blank">api</a>
										}
									</td>
								</tr>
							</Virtualize>
							</tbody>
						</table>
					</div>
				}

				if (url.EndsWith("/aas"))
				{
					if (totalCount == 0)
					{
						totalCount = db.AASSets.Select(x => x.Id).Count();
					}
					CheckTotalCountAndUpdate();
					if (update)
					{
						update = false;
						loadedItems = null;
						if (AASSetContainer != null)
						{
							AASSetContainer.RefreshDataAsync();
							this.StateHasChanged();
						}
					}

					<span>
						&nbsp&nbsp@($"AAS#: {totalCount} size={size} offset={offset} search={search} aasid={aasid} details={details})")
					</span>
					<br/>

					<div style="width: 100%; height: 80vh; overflow-x: hidden; padding: 10px;">
						@* <table class="table table-bordered table-sm" style="min-width:100%;max-width:100%">
                        <div style="width: 100%; height: 70vh; overflow-y: auto; overflow-y: auto; overflow-x: hidden;"> *@
						<table class="table table-bordered table-sm" style="width:100%;word-wrap:break-word;word-break:break-all;border-color:blue;">
							<thead>
								<tr style="border-color:blue;">
									<th style="width:3%;word-break:break-all;font-size:x-small;border-color:blue;">Env#</th>
									<th style="width:3%;word-break:break-all;font-size:x-small;border-color:blue;">AAS#</th>
									<th style="width:10%;word-break:break-all;font-size:x-small;border-color:blue;">IdShort</th>
									<th style="width:3%;word-break:break-all;font-size:x-small;border-color:blue;">DisplayName</th>
									<th style="width:3%;word-break:break-all;font-size:x-small;border-color:blue;">Category</th>
									<th style="width:3%;word-break:break-all;font-size:x-small;border-color:blue;">Description</th>
									<th style="width:3%;word-break:break-all;font-size:x-small;border-color:blue;">Extensions</th>
									<th style="width:10%;word-break:break-all;font-size:x-small;border-color:blue;">Identifier</th>
									<th style="width:3%;word-break:break-all;font-size:x-small;border-color:blue;">EmbeddedDataSpecifications</th>
									<th style="width:3%;word-break:break-all;font-size:x-small;border-color:blue;">DerivedFrom</th>
									<th style="width:3%;word-break:break-all;font-size:x-small;border-color:blue;">Version</th>
									<th style="width:3%;word-break:break-all;font-size:x-small;border-color:blue;">Revision</th>
									<th style="width:3%;word-break:break-all;font-size:x-small;border-color:blue;">Creator</th>
									<th style="width:3%;word-break:break-all;font-size:x-small;border-color:blue;">TemplateId</th>
									<th style="width:3%;word-break:break-all;font-size:x-small;border-color:blue;">A EmbeddedDataSpecifications</th>
									<th style="width:3%;word-break:break-all;font-size:x-small;border-color:blue;">AssetKind</th>
									<th style="width:10%;word-break:break-all;font-size:x-small;border-color:blue;">GlobalAssetId</th>
									<th style="width:3%;word-break:break-all;font-size:x-small;border-color:blue;">AssetType</th>
									<th style="width:3%;word-break:break-all;font-size:x-small;border-color:blue;">SpecificAssetIds</th>
									<th style="width:3%;word-break:break-all;font-size:x-small;border-color:blue;">ThumbnailPath</th>
									<th style="width:3%;word-break:break-all;font-size:x-small;border-color:blue;">ThumbnailType</th>
									<th style="width:3%;word-break:break-all;font-size:x-small;border-color:blue;">TimeStamps</th>
									<th style="width:3%;word-break:break-all;font-size:x-small;border-color:blue;">Links</th>
									<th style="width:3%;word-break:break-all;font-size:x-small;border-color:blue;">API</th>
								</tr>
							</thead>
							<tbody>
								@{
									
									var cell = "cell-content";
									var withDetails = details == "true";

									if (withDetails)
									{
										cell = "cell-details";
									}
								}
								<Virtualize Context="AASSet" @ref="AASSetContainer" ItemsProvider="LoadAASSetItems" >
									@{
										var aas64 = Base64UrlEncoder.Encode(AASSet?.Identifier);
										var link  = $"{AasxServer.Program.externalBlazor}/shells/{aas64}";
									}
									<tr style="height:auto;border-color:blue;">
										<td style="width:3%;font-size:x-small;word-break: break-all;border-color:blue;">@AASSet?.EnvId</td>
										<td style="width:3%;font-size:x-small;word-break: break-all;border-color:blue;">
											<b>@AASSet?.Id</b>
										</td>
										<td style="width:10%;word-break: break-all;border-color:blue;">
											<div class="cell-content">
												@AASSet?.IdShort
											</div>
										</td>
										<td style="font-size:small;border-color:blue;">
											<div class="@cell">
												@if (withDetails)
												{
													<span>@AASSet?.DisplayName</span>
												}
												else
												{
													var text = AASSet?.DisplayName;
													if (text?.Length > 40)
													{
														text = text.Substring(0, 40) + " ..";
													}
													<span>@text</span>
												}
											</div>
										</td>
										<td style="word-break:keep-all;border-color:blue;">@AASSet?.Category</td>
										<td style="border-color:blue;">
											<div class="@cell">
												@if (withDetails)
												{
													<span>@AASSet?.Description</span>
												}
												else
												{
													var text = AASSet?.Description;
													if (text?.Length > 40)
													{
														text = text.Substring(0, 40) + " ..";
													}
													<span>@text</span>
												}
											</div>
										</td>
										<td style="font-size:small;border-color:blue;">@AASSet?.Extensions</td>
										<td style=";border-color:blue;">@AASSet?.Identifier</td>
										<td style="font-size:small;border-color:blue;">@AASSet?.EmbeddedDataSpecifications</td>
										<td style="font-size:small;border-color:blue;">@AASSet?.DerivedFrom</td>
										<td style=";border-color:blue;">@AASSet?.Version</td>
										<td style=";border-color:blue;">@AASSet?.Revision</td>
										<td style="font-size:small;border-color:blue;">@AASSet?.Creator</td>
										<td style=";border-color:blue;">@AASSet?.TemplateId</td>
										<td style="font-size:small;border-color:blue;">@AASSet?.AEmbeddedDataSpecifications</td>
										<td style=";border-color:blue;">@AASSet?.AssetKind</td>
										<td style=";border-color:blue;">@AASSet?.GlobalAssetId</td>
										<td style=";border-color:blue;">@AASSet?.AssetType</td>
										<td style="font-size:small;border-color:blue;">@AASSet?.SpecificAssetIds</td>
										<td style=";border-color:blue;">
											<div class="@cell">
												@if (withDetails)
												{
													<span>@AASSet?.DefaultThumbnailPath</span>
												}
												else
												{
													var text = AASSet?.DefaultThumbnailPath;
													if (text?.Length > 40)
													{
														text = text.Substring(0, 40) + " ..";
													}
													<span>@text</span>
												}
											</div>
										</td>
										<td style=";border-color:blue;">@AASSet?.DefaultThumbnailContentType</td>
										<td style="width:8%;word-break: break-all;color:lightgray;font-size:x-small;border-color:blue;">
											@($"CREATE {TimeStamp.DateTimeToString(AASSet.TimeStampCreate)}")<br />
											@($"UPDATE {TimeStamp.DateTimeToString(AASSet.TimeStamp)}")<br />
											@($"TREE {TimeStamp.DateTimeToString(AASSet.TimeStampTree)}")<br />
											@($"DELETE {TimeStamp.DateTimeToString(AASSet.TimeStampDelete)}")
										</td>
										<td style="word-break:keep-all;border-color:blue;">
											<a href="@($"{shorturl}/env?envid={AASSet?.EnvId}")" target="_blank">env </a>
											<a href="@($"{shorturl}/smref?aasid={AASSet?.Id}")" target="_blank">smref</a>
											<a href="@($"{shorturl}/sm?aasid={AASSet?.Id}")" target="_blank">sm</a>
											<a href="@($"{Program.externalBlazor}?aas={AASSet?.Identifier}")" target="_blank">tree </a>
										</td>
										<td style="word-break:keep-all;border-color:blue;">
											@if (!AASSet.Identifier.IsNullOrEmpty())
											{
												<a href="@link" target="_blank">api</a>
											}
										</td>
									</tr>
								</Virtualize>
							</tbody>
						</table>
					</div>
				}

				if (url.EndsWith("/smref"))
				{
					if (totalCount == 0)
					{
						totalCount = db.SMRefSets.Select(x => x.Id).Count();
					}
					CheckTotalCountAndUpdate();
					if (update)
					{
						update = false;
						loadedItems = null;
						if (SMRefSetContainer != null)
						{
							SMRefSetContainer.RefreshDataAsync();
							this.StateHasChanged();
						}
					}

					<span>
						&nbsp&nbsp@($"SMREF#: {totalCount} size={size} offset={offset} search={search} aasid={aasid} details={details}")
					</span>
					<br />

					<div style="width: 100%; height: 80vh; overflow-x: hidden; padding: 10px;">
						<table class="table table-bordered table-sm" style="width:100%;word-wrap:break-word;word-break:break-all;border-color:blue;">
							<thead>
								<tr style="border-color:blue;">
									<th style="width:3%;font-size:x-small;word-break: break-all;border-color:blue;">AAS#</th>
									<th style="width:3%;font-size:x-small;word-break: break-all;border-color:blue;">SMREF#</th>
									<th style="width:10%;word-break:break-all;font-size:x-small;border-color:blue;">Identifier</th>
									<th style="width:4%;word-break:break-all;font-size:x-small;border-color:blue;">Links</th>
									<th style="width:4%;word-break:break-all;font-size:x-small;border-color:blue;">API</th>
								</tr>
							</thead>
							<tbody>
								@{
									var cell = "cell-content";
									var withDetails = details == "true";
									if (withDetails)
									{
										cell = "cell-details";
									}
								}
								<Virtualize Context="SMRefSetVirtualize" @ref="SMRefSetContainer" ItemsProvider="LoadSMRefSetItems">
									@{
										var aasDBID = SMRefSetVirtualize.smRefSet.AASId;
										var smDBID = SMRefSetVirtualize.smDBId;
										var submodel64 = Base64UrlEncoder.Encode(SMRefSetVirtualize.smRefSet.Identifier);
										var link = $"{AasxServer.Program.externalBlazor}/submodels/{submodel64}";
									}
									<tr style="height:auto;border-color:blue;">
										<td style="width:3%;font-size:x-small;word-break: break-all;border-color:blue;">@SMRefSetVirtualize.smRefSet?.AASId</td>
										<td style="width:3%;font-size:x-small;word-break: break-all;border-color:blue;">
											<b>@SMRefSetVirtualize.smRefSet?.Id</b>
										</td>
										<td style="width:10%;border-color:blue;">@SMRefSetVirtualize.smRefSet?.Identifier</td>
										<td style="width:4%;font-size:small;word-break:keep-all;border-color:blue;">
											<a href="@($"{shorturl}/aas?aasid={aasDBID}")" target="_blank;border-color:blue;">aas </a>
											<a href="@($"{shorturl}/sm?smid={smDBID}")" target="_blank;border-color:blue;">sm </a>
										</td>
										<td style="width:4%;font-size:small;word-break:keep-all;border-color:blue;">
											<a href="@link" target="_blank">api</a>
										</td>
									</tr>
								</Virtualize>
							</tbody>
						</table>
					</div>
				}

				if (url.EndsWith("/sm"))
				{
					if (totalCount == 0)
					{
						totalCount = db.SMSets.Select(x => x.Id).Count();
					}
					CheckTotalCountAndUpdate();
					if (update)
					{
						update = false;
						loadedItems = null;
						if (SMSetContainer != null)
						{
							SMSetContainer.RefreshDataAsync();
							this.StateHasChanged();
						}
					}

					<span>
						&nbsp&nbsp@($"SM#: {totalCount} size={size} offset={offset} search={search} smid={smid} details={details}")
					</span>
					<br />
					<div style="width: 100%; height: 80vh; overflow-x: hidden; padding: 10px;">
						<table class="table table-bordered table-sm" style="width:100%;word-wrap:break-word;word-break:break-all;border-color:blue;">
							<thead>
								<tr style="border-color:blue;">
									<th style="width:3%;font-size:x-small;word-break: break-all;border-color:blue;">Env#</th>
									<th style="width:3%;font-size:x-small;word-break: break-all;border-color:blue;">AAS#</th>
									<th style="width:3%;font-size:x-small;word-break: break-all;border-color:blue;">SM#</th>
									<th style="width:10%;font-size:x-small;word-break: break-all;border-color:blue;">Id Short</th>
									<th style="width:3%;word-break:break-all;font-size:x-small;border-color:blue;">Display Name</th>
									<th style="width:3%;word-break:break-all;font-size:x-small;border-color:blue;">Category</th>
									<th style="width:3%;word-break:break-all;font-size:x-small;border-color:blue;">Description</th>
									<th style="width:3%;word-break:break-all;font-size:x-small;border-color:blue;">Extensions</th>
									<th style="width:10%;word-break:break-all;font-size:x-small;border-color:blue;">Identifier</th>
									<th style="width:3%;word-break:break-all;font-size:x-small;border-color:blue;">Kind</th>
									<th style="width:10%;font-size:x-small;word-break: break-all;border-color:blue;">Semantic Id</th>
									<th style="width:3%;word-break:break-all;font-size:x-small;border-color:blue;">Supplemental Semantic Ids</th>
									<th style="width:3%;word-break:break-all;font-size:x-small;border-color:blue;">Qualifiers</th>
									<th style="width:3%;word-break:break-all;font-size:x-small;border-color:blue;">Embedded Data Specifications</th>
									<th style="width:3%;word-break:break-all;font-size:x-small;border-color:blue;">Version</th>
									<th style="width:3%;word-break:break-all;font-size:x-small;border-color:blue;">Revision</th>
									<th style="width:3%;word-break:break-all;font-size:x-small;border-color:blue;">Creator</th>
									<th style="width:3%;word-break:break-all;font-size:x-small;border-color:blue;">Template Id</th>
									<th style="width:3%;word-break:break-all;font-size:x-small;border-color:blue;">A EmbeddedData Specifications</th>
									<th style="width:8%;word-break:break-all;font-size:x-small;border-color:blue;">TimeStamps</th>
									<th style="width:4%;word-break:break-all;font-size:x-small;border-color:blue;">Links</th>
									<th style="width:4%;word-break:break-all;font-size:x-small;border-color:blue;">API</th>
								</tr>
							</thead>
							<tbody>
								@{
									var cell = "cell-content";
									var withDetails = details == "true";
									if (withDetails)
									{
										cell = "cell-details";
									}
								}
								<Virtualize Context="SMVirtualize" @ref="SMSetContainer" ItemsProvider="LoadSMSetItems">
									@{
										var submodel64 = Base64UrlEncoder.Encode(SMVirtualize?.smSet.Identifier);
										var link = $"{AasxServer.Program.externalBlazor}/submodels/{submodel64}";
										// var smeCount = db.SMESets.Where(sme => sme.SMId == SMSet.Id).Select(x => x.Id).Count();
									}
									<tr style="height:auto;border-color:blue;">
										<td style="width:3%;font-size:small;word-break: break-all;border-color:blue;">@SMVirtualize?.smSet?.EnvId</td>
										<td style="width:3%;font-size:small;word-break: break-all;border-color:blue;">@SMVirtualize?.smSet?.AASId</td>
										<td style="width:3%;font-size:small;word-break: break-all;border-color:blue;">
											<b>@SMVirtualize?.smSet?.Id</b>
										</td>
										<td style="width:10%;word-break: break-all;border-color:blue;">@SMVirtualize?.smSet?.IdShort</td>
										<td style="width:3%;font-size:small;border-color:blue;">@SMVirtualize?.smSet?.DisplayName</td>
										<td style="width:3%;font-size:small;word-break:keep-all;border-color:blue;">@SMVirtualize?.smSet?.Category</td>
										<td style="width:3%;font-size:small;border-color:blue;">
											<div class="@cell">
												@if (withDetails)
												{
													<span>@SMVirtualize?.smSet?.Description</span>
												}
												else
												{
													var text = SMVirtualize?.smSet?.Description;
													if (text?.Length > 40)
													{
														text = text.Substring(0, 40) + " ..";
													}
													<span>@text</span>
												}
											</div>
										</td>
										<td style="width:3%;font-size:small;border-color:blue;">@SMVirtualize?.smSet?.Extensions</td>
										<td style="width:10%;border-color:blue;">@SMVirtualize?.smSet?.Identifier</td>
										<td style="width:3%;font-size:small;word-break:keep-all;border-color:blue;">@SMVirtualize?.smSet?.Kind</td>
										<td style="width:10%;word-break: break-all;border-color:blue;">@SMVirtualize?.smSet?.SemanticId</td>
										<td style="width:3%;font-size:small;border-color:blue;">@SMVirtualize?.smSet?.SupplementalSemanticIds</td>
                                        <td style="width:3%;font-size:small;border-color:blue;">
                                            <div class="@cell">
                                                @if (withDetails)
                                                {
                                                    <span>@SMVirtualize?.smSet?.Qualifiers</span>
                                                }
                                                else
                                                {
                                                    var text = SMVirtualize?.smSet?.Qualifiers;

                                                    if (text?.Length > 40)
                                                    {

                                                        text = text.Substring(0, 40) + " ..";

                                                    }
                                                    <span>@text</span>
                                                }
                                            </div>
                                        </td>
                                        <td style="width:3%;font-size:small;border-color:blue;">@SMVirtualize?.smSet?.EmbeddedDataSpecifications</td>
										<td style="width:3%;font-size:small;border-color:blue;">@SMVirtualize?.smSet?.Version</td>
										<td style="width:3%;font-size:small;border-color:blue;">@SMVirtualize?.smSet?.Revision</td>
										<td style="width:3%;font-size:small;border-color:blue;">@SMVirtualize?.smSet?.Creator</td>
										<td style="width:3%;border-color:blue;">@SMVirtualize?.smSet?.TemplateId</td>
										<td style="width:3%;font-size:small;border-color:blue;">@SMVirtualize?.smSet?.AEmbeddedDataSpecifications</td>
										<td style="width:8%;word-break: break-all;color:lightgray;font-size:x-small;border-color:blue;">
											@($"CREATE {TimeStamp.DateTimeToString(SMVirtualize.smSet.TimeStampCreate)}")<br />
											@($"UPDATE {TimeStamp.DateTimeToString(SMVirtualize.smSet.TimeStamp)}")<br />
											@($"TREE {TimeStamp.DateTimeToString(SMVirtualize.smSet.TimeStampTree)}")<br />
											@($"DELETE {TimeStamp.DateTimeToString(SMVirtualize.smSet.TimeStampDelete)}")
										</td>
										<td style="width:4%;font-size:small;word-break:keep-all;border-color:blue;">
											@{
												var envID = SMVirtualize?.smSet?.EnvId;
												if (envID != null && envID != 0)
												{
													<a href="@($"{shorturl}/env?envid={envID}")" target="_blank;border-color:blue;">env </a>
												}
												var aasID = SMVirtualize?.smSet?.AASId;
												if (aasID != null && aasID != 0)
												{
													<a href="@($"{shorturl}/aas?aasid={aasID}")" target="_blank;border-color:blue;">aas </a>
												}
												<a href="@($"{Program.externalBlazor}?sm={SMVirtualize?.smSet?.Identifier}")" target="_blank">tree </a>
											}
											<a href="@($"{shorturl}/sme?smid={SMVirtualize?.smSet?.Id}")" target="_blank;border-color:blue;">sme:@SMVirtualize.smeCount</a>
										</td>
										<td style="width:4%;font-size:small;word-break:keep-all;border-color:blue;">
											@if (!SMVirtualize.smSet.Identifier.IsNullOrEmpty())
											{
												<a href="@link" target="_blank">api</a>
											}
										</td>
									</tr>
								</Virtualize>
							</tbody>
						</table>
					</div>
				}

				if (url.EndsWith("/sme"))
				{
					if (totalCount == 0)
					{
						totalCount = db.SMESets.Select(x => x.Id).Count();
					}
					CheckTotalCountAndUpdate();
					if (update)
					{
						update = false;
						loadedItems = null;
						if (SMESetContainer != null)
						{
							SMESetContainer.RefreshDataAsync();
							this.StateHasChanged();
						}
					}

					<span>
						&nbsp&nbsp@($"SME#: {totalCount} size={size} offset={offset} search={search} smid={smid} smeid={smeid} parid={parid} details={details}")
					</span>
					<br/>
					<br />

					<div style="width: 100%; height: 80vh; overflow-x: hidden; padding: 10px;">
						<table class="table table-bordered table-sm" style="min-width:100%;max-width:100%">
							<thead>
								<tr>
									<th style="width:3%;font-size:x-small;word-break: break-all;border-color:blue;">SM#</th>
									<th style="width:3%;font-size:x-small;word-break: break-all;border-color:blue;">Par#</th>
									<th style="width:3%;font-size:x-small;word-break: break-all;border-color:blue;">SME#</th>
									<th style="width:3%;font-size:x-small;word-break: break-all;border-color:blue;">SME<br />Type</th>
									<th style="width:10%;font-size:x-small;word-break: break-all;border-color:blue;">IdShort</th>
									<th style="width:10%;font-size:x-small;word-break: break-all;border-color:blue;">IdShortPath</th>
									<th style="width:4%;font-size:x-small;word-break: break-all;border-color:blue;">DisplayName</th>
									<th style="width:4%;font-size:x-small;word-break: break-all;border-color:blue;">Category</th>
									<th style="width:4%;font-size:x-small;word-break: break-all;border-color:blue;">Description</th>
									<th style="width:4%;font-size:x-small;word-break: break-all;border-color:blue;">Extensions</th>
									<th style="width:10%;font-size:x-small;word-break: break-all;border-color:blue;">SemanticId</th>
									<th style="width:4%;font-size:x-small;word-break: break-all;border-color:blue;">Supplemental<br />SemanticIds</th>
									<th style="width:4%;font-size:x-small;word-break: break-all;border-color:blue;">Qualifiers</th>
									<th style="width:4%;font-size:x-small;word-break: break-all;border-color:blue;">Embedded<br />Data<br />Specifications</th>
									<th style="width:8%;font-size:x-small;word-break: break-all;border-color:blue;">TValue</th>
									<th style="width:8%;font-size:x-small;word-break: break-all;border-color:blue;">Value</th>
									<th style="width:4%;font-size:x-small;word-break: break-all;border-color:blue;">Additional<br />Attributes</th>
									<th style="width:8%;font-size:x-small;word-break: break-all;border-color:blue;">TimeStamps</th>
									<th style="width:4%;font-size:x-small;word-break: break-all;border-color:blue;">Links</th>
									<th style="width:4%;font-size:x-small;word-break: break-all;border-color:blue;">API</th>
								</tr>
							</thead>
							<tbody>
								@{
									var cell = "cell-content";
									var withDetails = details == "true";
									if (withDetails)
									{
										cell = "cell-details";
									}
								}
								<Virtualize Context="SMEVirtualize" @ref="SMESetContainer" ItemsProvider="LoadSMESetItems" >
									@{
										var split = !SMEVirtualize.smeSet.SMEType.IsNullOrEmpty() ? SMEVirtualize.smeSet.SMEType.Split(VisitorAASX.OPERATION_SPLIT) : [string.Empty];
										var smeTypeWithoutOperation = split.Length == 2 ? split[1] : split[0];

										string submodel64 = Base64UrlEncoder.Encode(SMEVirtualize.smSet.Identifier);
										string link = $"{AasxServer.Program.externalBlazor}/submodels/{submodel64}/submodel-elements/{SMEVirtualize.smeSet.IdShortPath}";
										var value = CrudOperator.GetValue(SMEVirtualize.smeSet, SMEVirtualize.sValueList, SMEVirtualize.iValueList, SMEVirtualize.dValueList);
									}
									<tr style="height: 80px;">
										<td style="width:3%;font-size:small;word-break: break-all;border-color:blue;">@SMEVirtualize?.smeSet.SMId</td>
										<td style="width:3%;font-size:small;word-break: break-all;border-color:blue;">@SMEVirtualize?.smeSet.ParentSMEId</td>
										<td style="width:3%;font-size:small;word-break: break-all;border-color:blue;">
											<b>@SMEVirtualize?.smeSet.Id</b>
										</td>
										<td style="width:3%;font-size:small;word-break: break-all;border-color:blue;">@SMEVirtualize?.smeSet.SMEType</td>
										<td style="width:10%;word-break: break-all;border-color:blue;">
											<div class="@cell">
												@SMEVirtualize?.smeSet.IdShort
											</div>
										</td>
										<td style="width:10%;word-break: break-all;border-color:blue;">
											<div class="@cell">
												@SMEVirtualize?.smeSet.IdShortPath
											</div>
										</td>
										<td style="width:4%;font-size:small;border-color:blue;">
											<div class="@cell">
												@SMEVirtualize?.smeSet.DisplayName
											</div>
										</td>
										<td style="width:4%;font-size:small;border-color:blue;">
											<div class="@cell">
												@SMEVirtualize?.smeSet.Category
											</div>
										</td>
										<td style="width:4%;font-size:small;border-color:blue;">
											<div class="@cell">
												@if (withDetails)
												{
													<span>@SMEVirtualize?.smeSet.Description?</span>
												}
												else
												{
													var text = @SMEVirtualize?.smeSet.Description;

                                                    if (text?.Length > 40)
                                                    {

                                                        text = text.Substring(0, 40) + " ..";

                                                    }
                                                    <span>@text</span>
												}
											</div>
										</td>
										<td style="width:4%;font-size:small;border-color:blue;">
											<div class="@cell">
												@SMEVirtualize?.smeSet.Extensions
											</div>
										</td>
										<td style="width:10%;word-break: break-all;font-size:small;border-color:blue;">
											<div class="@cell">
												@if (withDetails)
												{
													<span>@SMEVirtualize?.smeSet.SemanticId?</span>
												}
												else
												{
													var text = @SMEVirtualize?.smeSet.SemanticId;

                                                    if (text?.Length > 40)
                                                    {

                                                        text = text.Substring(0, 40) + " ..";

                                                    }
                                                    <span>@text</span>
												}
											</div>
										</td>
										<td style="width:4%;font-size:small;border-color:blue;">
											<div class="@cell">
												@SMEVirtualize?.smeSet.SupplementalSemanticIds
											</div>
										</td>
										<td style="width:4%;font-size:small;border-color:blue;">
											<div class="@cell">
												@SMEVirtualize?.smeSet.Qualifiers
											</div>
										</td>
										<td style="width:4%;font-size:small;border-color:blue;">
											<div class="@cell">
												@if (withDetails)
												{
													<span>@SMEVirtualize?.smeSet.EmbeddedDataSpecifications?</span>
												}
												else
												{
													var text = @SMEVirtualize?.smeSet.EmbeddedDataSpecifications;

                                                    if (text?.Length > 40)
                                                    {

                                                        text = text.Substring(0, 40) + " ..";

                                                    }
                                                    <span>@text</span>
												}
											</div>
										</td>
										<td style="width:8%;font-size:small;border-color:blue;">
											<div class="@cell">
												@SMEVirtualize?.smeSet.TValue
											</div>
										</td>
										<td style="width:4%;border-color:blue;">
											<div class="@cell">
												@{
													@if (value.Count == 1)
													{
														var text = value[0][0];
														if (text != "")
														{
															if (text.Length > 50 && !withDetails)
															{
																text = text.Substring(0, 50) + " ..";
															}
														}
														<span>@text</span>

														@if (SMEVirtualize.smeSet.SMEType == "Prop" && Program.edit)
														{
															<input @bind-value="SMEVirtualize.propertyValue" @bind-value:event="oninput" @onchange="() => OnPropertyValueChanged(SMEVirtualize)"
															style="width: 100%; border-width: 1px; border-color: blue;font-size:x-small;" />
															<br>
														}

														@code {
                                                            private void OnPropertyValueChanged(SMEVirtualize sme)
                                                            {
																if (!string.IsNullOrEmpty(sme.propertyValue))
																{
																	if (sme.propertyValue == " ")
																		sme.propertyValue = string.Empty;

																		CrudOperator.setTimeStampValue(sme.smSet.Id, sme.smeSet.Id, DateTime.UtcNow, sme.propertyValue);
																		reload();
																		SMESetContainer.RefreshDataAsync();
																		StateHasChanged();
																		sme.propertyValue = string.Empty;
																}
                                                            }
                                                        }

													}
												}
											</div>
										</td>
										<td style="width:4%;font-size:small;border-color:blue;">
										</td>
										<td style="width:8%;word-break: break-all;color:lightgray;font-size:x-small;border-color:blue;">
											@($"CREATE {TimeStamp.DateTimeToString(SMEVirtualize.smeSet.TimeStampCreate)}")<br />
											@($"UPDATE {TimeStamp.DateTimeToString(SMEVirtualize.smeSet.TimeStamp)}")<br />
											@($"TREE {TimeStamp.DateTimeToString(SMEVirtualize.smeSet.TimeStampTree)}")<br />
											@($"DELETE {TimeStamp.DateTimeToString(SMEVirtualize.smeSet.TimeStampDelete)}")<br />
											@if(Program.edit)
											{
												<button style="border-width: 1px; border-color: black; background-color: lightgray; color:black"
												@onclick="() => SetTimeStamp(SMEVirtualize.smSet.Id, SMEVirtualize.smeSet.Id)">
													TIMESTAMP
												</button>
											}
											@code {
                                                private async Task SetTimeStamp(int smSetId, int smeSetId)
                                                {
													CrudOperator.setTimeStampValue(smSetId, smeSetId, DateTime.UtcNow);
													reload();
													await SMESetContainer.RefreshDataAsync();
													StateHasChanged();
                                                }
                                            }
                                        </td>
                                        <td style="width:4%;border-color:blue;font-size:x-small;">
                                            <a href="@($"{shorturl}/sm?smid={SMEVirtualize.smeSet.SMId}")" target="_blank">sm </a>
                                            <a href="@($"{shorturl}/sme?smid={SMEVirtualize.smeSet.SMId}&smeid={SMEVirtualize.smeSet.ParentSMEId}")" target="_blank">par </a>
                                            <a href="@($"{shorturl}/sme?parid={SMEVirtualize.smeSet.Id}")" target="_blank">children </a>
                                            @{
												if (SMEVirtualize.smeSet.TValue != null)
												{
													if (SMEVirtualize.smeSet.TValue.Equals("S"))
													{
														<a href="@($"{shorturl}/svalue?smeid={SMEVirtualize.smeSet.Id}")" target="_blank">svalue </a>
													}
													else if (SMEVirtualize.smeSet.TValue.Equals("I"))
													{
														<a href="@($"{shorturl}/ivalue?smeid={SMEVirtualize.smeSet.Id}")" target="_blank">ivalue </a>
													}
													else if (SMEVirtualize.smeSet.TValue.Equals("D"))
													{
														<a href="@($"{shorturl}/dvalue?smeid={SMEVirtualize.smeSet.Id}")" target="_blank">dvalue </a>
													}
												}
												if (SMEVirtualize.oValueList?.Count > 0)
												{
													<a href="@($"{shorturl}/ovalue?smeid={SMEVirtualize.smeSet.Id}")" target="_blank">ovalue </a>
												}
											}
											<a href="@($"{shorturl}/sme?smeid={SMEVirtualize.smeSet.Id}&details=true")" target="_blank">details </a>
										</td>
										<td style="width:4%;border-color:blue;font-size:x-small;">
											<a href="@link" target="_blank">api</a>
										</td>
									</tr>
								</Virtualize>
							</tbody>
						</table>
					</div>
				}

				if (url.EndsWith("/svalue"))
				{
					if (totalCount == 0)
					{
						totalCount = db.SValueSets.Select(x => x.Id).Count();
					}
					CheckTotalCountAndUpdate();
					if (update)
					{
						update = false;
						loadedItems = null;
						if (SValueSetContainer != null)
						{
							SValueSetContainer.RefreshDataAsync();
							this.StateHasChanged();
						}
					}

					<span>
						&nbsp&nbsp@($"SValue#: {totalCount} size={size} offset={offset} search={search} smeid={smeid} details={details}")
					</span>
					<br />
					<div style="width: 100%; height: 80vh; overflow-x: hidden; padding: 10px;">
						<table class="table table-bordered table-sm" style="min-width:100%;max-width:100%">
							<thead>
							<tr>
								<th style="font-size:small;word-break: break-all;border-color:blue;">Par#</th>
								<th style="font-size:small;word-break: break-all;border-color:blue;">Value</th>
								<th style="font-size:small;word-break: break-all;border-color:blue;">Annotation</th>
								<th style="font-size:small;word-break: break-all;border-color:blue;">Links</th>
							</tr>						</thead>
						<tbody>
							@{
									var cell = "vcell-content";
									var withDetails = details == "true";
									if (withDetails)
									{
										cell = "cell-details";
									}
							}
							<Virtualize Context="SValueSet" @ref="SValueSetContainer" ItemsProvider="LoadSValueSetItems" >
								<tr>
									<td style="word-break:keep-all; break-all;border-color:blue;">@SValueSet.SMEId</td>
									<td style="word-break:keep-all; break-all;border-color:blue;">
											<div class="@cell">
												@if (withDetails)
												{
													<span>@SValueSet?.Value</span>
												}
												else
												{
													var text = @SValueSet?.Value;

                                                    if (text?.Length > 400)
                                                    {
                                                        text = text.Substring(0, 400) + " ..";

                                                    }
                                                    <span>@text</span>
												}
											</div>
									</td>
									<td style="word-break:keep-all; break-all;border-color:blue; ">
											<div class="@cell">
												@if (withDetails)
												{
													<span>@SValueSet?.Annotation</span>
												}
												else
												{
													var text = @SValueSet?.Annotation;

                                                    if (text?.Length > 400)
                                                    {
                                                        text = text.Substring(0, 400) + " ..";

                                                    }
                                                    <span>@text</span>
												}
											</div>
									</td>
									<td style="word-break:keep-all; break-all;border-color:blue; ">
										<a href="@($"{shorturl}/sme?smeid={SValueSet.SMEId}")" target="_blank">par</a>
									</td>
								</tr>
							</Virtualize>
						</tbody>
					   </table>
					</div>
				}

				if (url.EndsWith("/ivalue"))
				{
					if (totalCount == 0)
					{
						totalCount = db.IValueSets.Select(x => x.Id).Count();
					}
					CheckTotalCountAndUpdate();
					if (update)
					{
						update = false;
						loadedItems = null;
						if (IValueSetContainer != null)
						{
							IValueSetContainer.RefreshDataAsync();
							this.StateHasChanged();
						}
					}

					<span>
						&nbsp&nbsp@($"IValue#: {totalCount} size={size} offset={offset} search={search} smeid={smeid} details={details}")
					</span>
					<br />
					<table class="table table-bordered table-sm" style="width:100%;word-wrap:break-word;word-break:break-all;">
						<thead>
							<tr>
								<th style="font-size:small;word-break: break-all;border-color:blue;">Par#</th>
								<th style="font-size:small;word-break: break-all;border-color:blue;">Value</th>
								<th style="font-size:small;word-break: break-all;border-color:blue;">Annotation</th>
								<th style="font-size:small;word-break: break-all;border-color:blue;">Links</th>
							</tr>
						</thead>
						<tbody>
							<Virtualize Context="IValueSet" @ref="IValueSetContainer" ItemsProvider="LoadIValueSetItems">
								@{
									var cell = "vcell-content";
									var withDetails = details == "true";
									if (withDetails)
									{
										cell = "cell-details";
									}
								}
								<tr>
									<td style="word-break: break-all;border-color:blue">@IValueSet.SMEId</td>
									<td style="word-break: break-all;border-color:blue">@IValueSet.Value</td>
									<td style="word-break: break-all;border-color:blue">@IValueSet.Annotation</td>
									<td style="word-break: break-all;border-color:blue">
										<a href="@($"{shorturl}/sme?smeid={IValueSet.SMEId}")" target="_blank">par</a>
									</td>
								</tr>
							</Virtualize>
						</tbody>
					</table>
				}

				if (url.EndsWith("/dvalue"))
				{
					if (totalCount == 0)
					{
						totalCount = db.DValueSets.Select(x => x.Id).Count();
					}
					CheckTotalCountAndUpdate();
					if (update)
					{
						update = false;
						loadedItems = null;
						if (DValueSetContainer != null)
						{
							DValueSetContainer.RefreshDataAsync();
							this.StateHasChanged();
						}
					}

					<span>
						&nbsp&nbsp@($"DValue#: {totalCount} size={size} offset={offset} search={search} smeid={smeid} details={details}")
					</span>
					<br />
					<table class="table table-bordered table-sm" style="width:100%;word-wrap:break-word;word-break:break-all;">
						<thead>
							<tr>
								<th style="word-break: break-all;border-color:blue">Par#</th>
								<th style="word-break: break-all;border-color:blue">Value</th>
								<th style="word-break: break-all;border-color:blue">Annotation</th>
								<th style="word-break: break-all;border-color:blue">Links</th>
							</tr>
						</thead>
						<tbody>
							<Virtualize Context="DValueSet" @ref="DValueSetContainer" ItemsProvider="LoadDValueSetItems">
								@{
									var cell = "vcell-content";
									var withDetails = details == "true";
									if (withDetails)
									{
										cell = "cell-details";
									}
								}
								<tr>
									<td style="word-break: break-all;border-color:blue">@DValueSet.SMEId</td>
									<td style="word-break: break-all;border-color:blue">@DValueSet.Value</td>
									<td style="word-break: break-all;border-color:blue">@DValueSet.Annotation</td>
									<td style="word-break: break-all;border-color:blue">
										<a href="@($"{shorturl}/sme?smeid={DValueSet.SMEId}")" target="_blank">par</a>
									</td>
								</tr>
							</Virtualize>
						</tbody>
					</table>
				}

				if (url.EndsWith("/ovalue"))
				{
					if (totalCount == 0)
					{
						totalCount = db.OValueSets.Select(x => x.Id).Count();
					}
					CheckTotalCountAndUpdate();
					if (update)
					{
						update = false;
						loadedItems = null;
						if (OValueSetContainer != null)
						{
							OValueSetContainer.RefreshDataAsync();
							this.StateHasChanged();
						}
					}

					<span>
						&nbsp&nbsp@($"OValue#: {totalCount} size={size} offset={offset} search={search} smeid={smeid} details={details}")
					</span>
					<br />
					<table class="table table-bordered table-sm" style="width:100%;word-wrap:break-word;word-break:break-all;">
						<thead>
							<tr>
								<th style="word-break: break-all;border-color:blue">Par#</th>
								<th style="word-break: break-all;border-color:blue">Value</th>
								<th style="word-break: break-all;border-color:blue">Attribute</th>
								<th style="word-break: break-all;border-color:blue">Links</th>
							</tr>
						</thead>
						<tbody>
							<Virtualize Context="OValueSet" @ref="OValueSetContainer" ItemsProvider="LoadOValueSetItems">
								@{
									var cell = "vcell-content";
									var withDetails = details == "true";
									if (withDetails)
									{
										cell = "cell-details";
									}
								}
								<tr>
									<td style="word-break: break-all;border-color:blue">@OValueSet.SMEId</td>
									<td style="word-break:keep-all; break-all;border-color:blue;">
										<div class="@cell">
												@if (withDetails)
												{
													<span>@OValueSet.Value</span>
												}
												else
												{
													var text = @OValueSet.Value;
													if (text?.Length > 400)
													{
														text = text.Substring(0, 400) + " ..";
													}
													<span>@text</span>
												}
										</div>
									</td>
									<td style="word-break: break-all;border-color:blue">@OValueSet.Attribute</td>
									<td style="word-break: break-all;border-color:blue">
										<a href="@($"{shorturl}/sme?smeid={OValueSet.SMEId}")" target="_blank">par</a>
									</td>
								</tr>
							</Virtualize>
						</tbody>
					</table>
				}

				<br />
				<span>@($"Elapsed ms for DB access: {elapsedTime}")</span>
			}

			<br/>
			<br/>
		}
	}
</div>

@code {
	bool update = true;
	int totalCount = 0;
	int size = 1000;
	int offset = 0;
	string search = string.Empty;
	int envid = 0;
	int aasid = 0;
	int smid = 0;
	int smeid = 0;
	int parid = 0;
	int cdid = 0;
	string smidentifier = string.Empty;
	string details = string.Empty;
	private long elapsedTime = 0;
	object loadedItems = null;

	private void CheckTotalCountAndUpdate()
	{
	/*
	if (size > 100000)
		{
		size = 100000;
		}
		*/
		if (offset > totalCount)
		{
			offset = totalCount - 1;
			update = true;
		}
		if (offset < 0)
		{
			offset = 0;
			update = true;
		}
		if (offset + size > totalCount)
		{
			size = totalCount - offset;
			update = true;
		}
	}

	private void reload()
	{
		loadedItems = null;
	}

	private async ValueTask<ItemsProviderResult<EnvSet>> LoadEnvSetItems(ItemsProviderRequest request)
	{
		var watch = System.Diagnostics.Stopwatch.StartNew();
		watch.Start();

		List<EnvSet> result = [];

		using (AasContext db = new AasContext())
		{
			IQueryable<EnvSet> qEnv = db.EnvSets;
			totalCount = qEnv.Count();
			CheckTotalCountAndUpdate();

			result = qEnv
				.OrderBy(aas => aas.Id)
				.Skip(offset + request.StartIndex)
				.Take(request.Count)
				.ToList();
		}

		watch.Stop();
		elapsedTime = watch.ElapsedMilliseconds;

		Console.WriteLine($"LoadItems Env: StartIndex {request.StartIndex}, Count {request.Count}, offset {offset} size {size} totalCount {totalCount}");

		return new ItemsProviderResult<EnvSet>(result, size);
	}

	private Virtualize<EnvSet> EnvSetContainer { get; set; }

	private async ValueTask<ItemsProviderResult<CDSet>> LoadCDSetItems(ItemsProviderRequest request)
	{
		var watch = System.Diagnostics.Stopwatch.StartNew();
		watch.Start();

		List<CDSet> result = [];

		//ToDo: DbRequestHandler should be used
		using (AasContext db = new AasContext())
		{
			IQueryable<CDSet> qCD = db.CDSets;
			totalCount = qCD.Count();
			CheckTotalCountAndUpdate();

			result = qCD
				.OrderBy(aas => aas.Id)
				.Skip(offset + request.StartIndex)
				.Take(request.Count)
				.ToList();
		}

		watch.Stop();
		elapsedTime = watch.ElapsedMilliseconds;

		Console.WriteLine($"LoadItems CD: StartIndex {request.StartIndex}, Count {request.Count}, offset {offset} size {size} totalCount {totalCount}");

		return new ItemsProviderResult<CDSet>(result, size);
	}

	private Virtualize<CDSet> CDSetContainer { get; set; }

	private async ValueTask<ItemsProviderResult<AASSet>> LoadAASSetItems(ItemsProviderRequest request)
	{
		var watch = System.Diagnostics.Stopwatch.StartNew();
		watch.Start();

		List<AASSet> result = [];

		using (AasContext db = new AasContext())
		{
			IQueryable<AASSet> qAAS = db.AASSets;
			if (aasid != 0)
			{
				qAAS = qAAS.Where(aas => aas.Id == aasid);
			}
			if (search != "")
			{
				qAAS = qAAS.Where(aas =>
				aas.IdShort.Contains(search) ||
					aas.Identifier.Contains(search) ||
					aas.GlobalAssetId.Contains(search)
				);
			}
			totalCount = qAAS.Count();
			CheckTotalCountAndUpdate();

			result = qAAS
				.OrderBy(aas => aas.Id)
				.Skip(offset + request.StartIndex)
				.Take(request.Count)
				.ToList();
		}

		watch.Stop();
		elapsedTime = watch.ElapsedMilliseconds;
		// StateHasChanged();

		Console.WriteLine($"LoadItems AAS: StartIndex {request.StartIndex}, Count {request.Count}, offset {offset} size {size} totalCount {totalCount}");

		return new ItemsProviderResult<AASSet>(result, size);
	}

	private Virtualize<AASSet> AASSetContainer { get; set; }

	private class SMVirtualize
	{
		public int smeCount = 0;
		public SMSet smSet;
	}

	private async ValueTask<ItemsProviderResult<SMVirtualize>> LoadSMSetItems(ItemsProviderRequest request)
	{
		var watch = System.Diagnostics.Stopwatch.StartNew();
		watch.Start();

		List<SMVirtualize> result = [];

		using (AasContext db = new AasContext())
		{
			IQueryable<SMSet> qSM = db.SMSets;
			if (aasid != 0)
			{
				qSM = qSM.Where(sm => sm.AASId == aasid);
			}
			if (smid != 0)
			{
				qSM = qSM.Where(sm => sm.Id == smid);
			}
			if (search != "")
			{
				qSM = qSM.Where(sm =>
					sm.IdShort.Contains(search) ||
					sm.Identifier.Contains(search) ||
					sm.SemanticId.Contains(search)
				);
			}
			totalCount = qSM.Count();
			CheckTotalCountAndUpdate();

			result = qSM
				.OrderBy(sm => sm.Id)
				.Skip(offset + request.StartIndex)
				.Take(request.Count)
				.Select(sm => new SMVirtualize
                    {
                        smSet = sm,
                        smeCount = db.SMESets.Where(sme => sme.SMId == sm.Id).Count()
                    }
				)
				.ToList();
		}

		watch.Stop();
		elapsedTime = watch.ElapsedMilliseconds;

		Console.WriteLine($"LoadItems SM: StartIndex {request.StartIndex}, Count {request.Count}, offset {offset} size {size} totalCount {totalCount}");

		return new ItemsProviderResult<SMVirtualize>(result, size);
	}

	private Virtualize<SMVirtualize> SMSetContainer { get; set; }

	private class SMRefSetVirtualize
	{
		public int smDBId;
		public SMRefSet smRefSet;
	}

	private async ValueTask<ItemsProviderResult<SMRefSetVirtualize>> LoadSMRefSetItems(ItemsProviderRequest request)
	{
		var watch = System.Diagnostics.Stopwatch.StartNew();
		watch.Start();

		List<SMRefSetVirtualize> result = [];

		using (AasContext db = new AasContext())
		{
			IQueryable<SMRefSet> qSMRef = db.SMRefSets;
			if (aasid != 0)
			{
				qSMRef = qSMRef.Where(sm => sm.AASId == aasid);
			}
			totalCount = qSMRef.Count();
			CheckTotalCountAndUpdate();

			var result1 = qSMRef
				.OrderBy(sm => sm.Id)
				.Skip(offset + request.StartIndex)
				.Take(request.Count)
				.ToList();

			foreach (var r in result1)
			{
				var smDBId = db.SMSets.FirstOrDefault(sm => sm.Identifier == r.Identifier);
				result.Add(new SMRefSetVirtualize { smDBId = smDBId.Id, smRefSet = r });
			}
		}

		watch.Stop();
		elapsedTime = watch.ElapsedMilliseconds;

		Console.WriteLine($"LoadItems SM: StartIndex {request.StartIndex}, Count {request.Count}, offset {offset} size {size} totalCount {totalCount}");

		return new ItemsProviderResult<SMRefSetVirtualize>(result, size);
	}

	private Virtualize<SMRefSetVirtualize> SMRefSetContainer { get; set; }

	private async ValueTask<ItemsProviderResult<SValueSet>> LoadSValueSetItems(ItemsProviderRequest request)
	{
		var watch = System.Diagnostics.Stopwatch.StartNew();
		watch.Start();

		List<SValueSet> result = [];

		using (AasContext db = new AasContext())
		{
			IQueryable<SValueSet> qSValue = db.SValueSets;
			if (smeid != 0)
			{
				qSValue = qSValue.Where(s => s.SMEId == smeid);
			}
			if (search != "")
			{
				qSValue = qSValue.Where(s => s.Value.Contains(search));
			}
			totalCount = qSValue.Count();
			CheckTotalCountAndUpdate();

			result = qSValue
				.OrderBy(s => s.Id)
				.Skip(offset + request.StartIndex)
				.Take(request.Count)
				.ToList();
		}

		watch.Stop();
		elapsedTime = watch.ElapsedMilliseconds;

		Console.WriteLine($"LoadItems SValue: StartIndex {request.StartIndex}, Count {request.Count}, offset {offset} size {size} totalCount {totalCount}");

		return new ItemsProviderResult<SValueSet>(result, size);
	}

	private Virtualize<SValueSet> SValueSetContainer { get; set; }

	private async ValueTask<ItemsProviderResult<IValueSet>> LoadIValueSetItems(ItemsProviderRequest request)
	{
		var watch = System.Diagnostics.Stopwatch.StartNew();
		watch.Start();

		List<IValueSet> result = [];

		using (AasContext db = new AasContext())
		{
			IQueryable<IValueSet> qIValue = db.IValueSets;
			if (smeid != 0)
			{
				qIValue = qIValue.Where(s => s.SMEId == smeid);
			}
			totalCount = qIValue.Count();
			CheckTotalCountAndUpdate();

			result = qIValue
				.OrderBy(s => s.Id)
				.Skip(offset + request.StartIndex)
				.Take(request.Count)
				.ToList();
		}

		watch.Stop();
		elapsedTime = watch.ElapsedMilliseconds;

		Console.WriteLine($"LoadItems IValue: StartIndex {request.StartIndex}, Count {request.Count}, offset {offset} size {size} totalCount {totalCount}");

		return new ItemsProviderResult<IValueSet>(result, size);
	}

	private Virtualize<IValueSet> IValueSetContainer { get; set; }

	private async ValueTask<ItemsProviderResult<DValueSet>> LoadDValueSetItems(ItemsProviderRequest request)
	{
		var watch = System.Diagnostics.Stopwatch.StartNew();
		watch.Start();

		List<DValueSet> result = [];

		using (AasContext db = new AasContext())
		{
			IQueryable<DValueSet> qDValue = db.DValueSets;
			if (smeid != 0)
			{
				qDValue = qDValue.Where(s => s.SMEId == smeid);
			}
			totalCount = qDValue.Count();
			CheckTotalCountAndUpdate();

			result = qDValue
				.OrderBy(s => s.Id)
				.Skip(offset + request.StartIndex)
				.Take(request.Count)
				.ToList();
		}

		watch.Stop();
		elapsedTime = watch.ElapsedMilliseconds;

		Console.WriteLine($"LoadItems DValue: StartIndex {request.StartIndex}, Count {request.Count}, offset {offset} size {size} totalCount {totalCount}");

		return new ItemsProviderResult<DValueSet>(result, size);
	}

	private Virtualize<DValueSet> DValueSetContainer { get; set; }

	private async ValueTask<ItemsProviderResult<OValueSet>> LoadOValueSetItems(ItemsProviderRequest request)
	{
		var watch = System.Diagnostics.Stopwatch.StartNew();
		watch.Start();

		List<OValueSet> result = [];

		using (AasContext db = new AasContext())
		{
			IQueryable<OValueSet> qOValue = db.OValueSets;
			if (smeid != 0)
			{
				qOValue = qOValue.Where(s => s.SMEId == smeid);
			}
			totalCount = qOValue.Count();
			CheckTotalCountAndUpdate();

			result = qOValue
				.OrderBy(s => s.Id)
				.Skip(offset + request.StartIndex)
				.Take(request.Count)
				.ToList();
		}

		watch.Stop();
		elapsedTime = watch.ElapsedMilliseconds;

		Console.WriteLine($"LoadItems DValue: StartIndex {request.StartIndex}, Count {request.Count}, offset {offset} size {size} totalCount {totalCount}");

		return new ItemsProviderResult<OValueSet>(result, size);
	}

	private Virtualize<OValueSet> OValueSetContainer { get; set; }

	public async Task MaintainDatabaseAsync()
	{
		using (AasContext db = new AasContext())
		{
		// Update statistics
			await db.Database.ExecuteSqlRawAsync("ANALYZE SMESets");

			// Reorganize indexes (using VACUUM)
			await db.Database.ExecuteSqlRawAsync("VACUUM");

			// Rebuild indexes (drop and recreate)
			await db.Database.ExecuteSqlRawAsync("DROP INDEX IF EXISTS IndexName");
			await db.Database.ExecuteSqlRawAsync("CREATE INDEX IndexName ON SMESets(Id)");
		}
	}

	public void CreateIdShortPath(AasContext db, List<SMESet> smeList)
	{
		foreach (var sme in smeList)
		{
			sme.IdShortPath = GeneratePath(db, sme);
		}
	}

	private string GeneratePath(AasContext db, SMESet sme)
	{
		return sme.IdShortPath;
		if (sme.ParentSMEId == null)
        {
            return sme.IdShort ?? string.Empty;
        }

        var parentSME = db.SMESets.Find(sme.ParentSMEId);
        if (parentSME == null)
        {
            return sme.IdShort ?? string.Empty;
        }

        var parentPath = GeneratePath(db, parentSME);
        return string.IsNullOrEmpty(parentPath) ? sme.IdShort ?? string.Empty : $"{parentPath}.{sme.IdShort}";
    }

    private async ValueTask<ItemsProviderResult<SMEVirtualize>> LoadSMESetItems(ItemsProviderRequest request)
    {
        var watch = System.Diagnostics.Stopwatch.StartNew();
        watch.Start();

        List<SMEVirtualize> result = [];

        using (AasContext db = new AasContext())
        {
            IQueryable<SMESet> qSME = db.SMESets;
            if (smeid != 0)
            {
                qSME = qSME.Where(sme => sme.Id == smeid);
            }
            if (smid != 0)
            {
                qSME = qSME.Where(sme => sme.SMId == smid);
            }
            if (parid != 0)
            {
                qSME = qSME.Where(sme => sme.ParentSMEId == parid);
            }
            if (search != "")
            {
                qSME = qSME.Where(sme =>
                    sme.IdShort.Contains(search) ||
                    sme.SemanticId.Contains(search)
                );
            }
            totalCount = qSME.Count();
            CheckTotalCountAndUpdate();

            var smeList = qSME
                .OrderBy(sme => sme.Id)
                .Skip(offset + request.StartIndex)
                .Take(request.Count)
                .ToList();

            CreateIdShortPath(db, smeList);
            var merged = CrudOperator.GetSmeMerged(db, null, smeList, null);
            var smIdList = smeList.Select(sme => sme.SMId).Distinct();
            var smList = db.SMSets.Where(sm => smIdList.Contains(sm.Id)).ToList();
            foreach (var sme in smeList)
            {
                result.Add(new SMEVirtualize
                    {
                        smSet = smList.Where(sm => sm.Id == sme.SMId).ToList().FirstOrDefault(),
                        smeSet = sme,
                        sValueList = merged.Where(v => v.sValueSet != null && v.sValueSet.SMEId == sme.Id).Select(v => v.sValueSet).ToList(),
                        iValueList = merged.Where(v => v.iValueSet != null && v.iValueSet.SMEId == sme.Id).Select(v => v.iValueSet).ToList(),
                        dValueList = merged.Where(v => v.dValueSet != null && v.dValueSet.SMEId == sme.Id).Select(v => v.dValueSet).ToList(),
                        oValueList = merged.Where(v => v.oValueSet != null && v.oValueSet.SMEId == sme.Id).Select(v => v.oValueSet).ToList(),
                    });
            }
        }

        watch.Stop();
        elapsedTime = watch.ElapsedMilliseconds;
        // StateHasChanged();

        Console.WriteLine($"LoadItems SME: StartIndex {request.StartIndex}, Count {request.Count}, offset {offset} size {size} totalCount {totalCount}");

        return new ItemsProviderResult<SMEVirtualize>(result, size);
    }

    private class SMEVirtualize
    {
        public SMSet smSet;
        public SMESet smeSet;
        public List<SValueSet?>? sValueList;
        public List<IValueSet?>? iValueList;
        public List<DValueSet?>? dValueList;
        public List<OValueSet?>? oValueList;
        public string propertyValue;
    }

    private Virtualize<SMEVirtualize> SMESetContainer { get; set; }

    private async ValueTask<ItemsProviderResult<T>> LoadItems<T>(ItemsProviderRequest request) where T : class
    {
        using (AasContext db = new AasContext())
        {
            List<T> items = [];
            IQueryable<T> query = db.Set<T>();

            if (loadedItems == null || !(loadedItems is List<T>))
            {
            }

            Console.WriteLine($"LoadItems: StartIndex {request.StartIndex}, Count {request.Count}, offset {offset} size {size} totalCount {totalCount}");

            return new ItemsProviderResult<T>(items, size);
        }
    }

    [CascadingParameter] private HttpContext HttpContext { get; set; }

    protected override void OnInitialized()
    {
        // OnInitialized() always called twice
        if (HttpContext == null)
        {
            // Pre-rendering logic
            SubmodelService.NewDataAvailable += NewData;
        }
        else
        {
            // Actual rendering logic
        }
    }

    public void Dispose()
    {
        SubmodelService.NewDataAvailable -= NewData;
    }

    int newDataMode = 0;

    void NewData(object source, EventArgs args)
    {
        if (Program.isLoading)
            return;

        totalCount = 0;
        update = true;
        InvokeAsync(StateHasChanged);
    }
}
