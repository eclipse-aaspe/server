<!--*******************************************************************************
* Copyright (c) {2024} Contributors to the Eclipse Foundation
*
* See the NOTICE file(s) distributed with this work for additional
* information regarding copyright ownership.
*
* This program and the accompanying materials are made available under the
* terms of the Apache License Version 2.0 which is available at
* https://www.apache.org/licenses/LICENSE-2.0
*
* SPDX-License-Identifier: Apache-2.0
*******************************************************************************-->

@page "/atex2";
@using AasxRestServerLibrary;
@using AasxServer
@using Microsoft.AspNetCore.Html;
@using Microsoft.IdentityModel.Tokens;
@using Extensions;
@using System.Globalization;
@inject Data.AASService SubmodelService
@inject NavigationManager NavMan

<style>
    .atex-border {
        border: 1px solid darkgrey;
    }

    .atex-white {
        word-break: keep-all;
        text-align: center;
        align-content: center;
        margin-left: auto;
        margin-right: auto;
        background-color: white;
    }

    .atex-gray {
        word-break: keep-all;
        text-align: center;
        align-content: center;
        margin-left: auto;
        margin-right: auto;
        background-color: lightgray;
    }

    .atex-blue {
        word-break: keep-all;
        text-align: center;
        align-content: center;
        margin-left: auto;
        margin-right: auto;
        background-color: lightblue;
    }

    .atex-green {
        word-break: keep-all;
        text-align: center;
        align-content: center;
        margin-left: auto;
        margin-right: auto;
        background-color: lightgreen;
    }

    .atex-pink {
        word-break: keep-all;
        text-align: center;
        align-content: center;
        margin-left: auto;
        margin-right: auto;
        background-color:lightpink;
        @*background-color: #B55E87;*@
    }</style>

<div>
    @if (Program.isLoadingDB)
    {
        <span style="color:white;background-color:blue;">Loading...</span>
    }
    else
    {
        string url = NavMan.Uri;
        string filter = "";
        var s = url.Split("?");
        if (s.Length == 2)
        {
            filter = s[1];
        }
        Program.loadAllPackages();
        collectData();

        for (int p = 0; p < countProject; p++)
        {
            if (filter != "" && filter != projectName[p])
                continue;

            int iOut = -1;
            int iIn = -1;
            for (int i = 0; i < count; i++)
            {
                if (eigensicheresbetriebsmittel[p] == ManufacturerProductType[i]
                    && (eigensicheresbetriebsmittelSeriennummer[p] == "" || eigensicheresbetriebsmittelSeriennummer[p] == SerialNumber[i]))
                    iIn = i;
                if (zugehoerigesbetriebsmittel[p] == ManufacturerProductType[i]
                    && (zugehoerigesbetriebsmittelSeriennummer[p] == "" || zugehoerigesbetriebsmittelSeriennummer[p] == SerialNumber[i]))
                    iOut = i;
            }
            if (iOut == -1 || iIn == -1)
            {
                <b><span style="color:red">@projectName[p] can not be shown!</span></b><br />
                <span style="color:red">Type: @zugehoerigesbetriebsmittel[p] SerialNumber: @zugehoerigesbetriebsmittelSeriennummer[p]</span><br />
                <span style="color:red">Type: @eigensicheresbetriebsmittel[p] SerialNumber: @eigensicheresbetriebsmittelSeriennummer[p]</span>

                <br />
                <br />
                continue;
            }

            if (certifiedBy[iOut] == "" && pCertifiedBy[p] != null)
                certifiedBy[iOut] = pCertifiedBy[p].Value;
            if (certifiedAt[iOut] == "" && pCertifiedAt[p] != null)
                certifiedAt[iOut] = pCertifiedAt[p].Value;

            double Lo = L[iOut];
            double Co = C[iOut];
            bool LCgreater = false;
            if (L[iIn] >= L[iOut] / 100 && C[iIn] >= C[iOut] / 100)
            {
                LCgreater = true;
                Lo = 0.5 * Lo;
                Co = 0.5 * Co;
            }

            double cl = cableLength[p];
            if (inputLength[iOut] == Double.MinValue)
                inputLength[iOut] = cl;
            else
                cl = inputLength[iOut];
            double Lc = cl / 1000.0 * 1;
            double Cc = cl / 1000.0 * 110;
            // 0,5 * Lo >= Li + Lc => 0,5 * Lo >= Li + cl / 1000 => clMax = (0,5 * Lo - Li) * 1000;
            // double clMax1 = (0.5 * L[iOut] - L[iIn]) * 1000;
            double clMax1 = (Lo - L[iIn]) * 1000;
            // 0,5 * Co >= Ci + Cc => 0,5 * Co >= Ci + cl * 0.11 => clMax = (0,5 * Co - Ci) / 0.11;
            // double clMax2 = (0.5 * C[iOut] - C[iIn]) / 0.11;
            double clMax2 = (Co - C[iIn]) / 0.11;
            if (clMax2 < clMax1)
                clMax1 = clMax2;
            if (clMax1 < 0)
                clMax1 = 0;
            else
                clMax1 = Math.Round(clMax1, 2, MidpointRounding.AwayFromZero);
            double sumLiLc = L[iIn] + Lc;
            sumLiLc = Math.Round(sumLiLc, 2, MidpointRounding.AwayFromZero);
            double sumCiCc = C[iIn] + Cc;
            sumCiCc = Math.Round(sumCiCc, 2, MidpointRounding.AwayFromZero);
            Lc = Math.Round(Lc, 2, MidpointRounding.AwayFromZero);
            Cc = Math.Round(Cc, 2, MidpointRounding.AwayFromZero);
            string color = "red";
            string ok = "NO";

            <table style="min-width:100%">
                <tr style="border: 4px solid black">
                    <td>
                        <table class="atex-border" style="min-width:100%">
                            <tr>
                                <td style="margin-right:auto">
                                    <br />
                                    <b><span style="color:black;font-size:30px;margin-right: auto">&nbsp;Proof of intrinsic safety showcase</span></b>
                                    <br />
                                    <br />
                                </td>
                                <td style="width:8%">
                                    <img src="NOA.jpg"/>
                                </td>
                                <td style="width:6%">
                                    <img src="Ex_IECEx.jpg" />
                                </td>
                                <td style="width:3%">
                                    <img src="2022-02-15_IDTA_AAS-Logo_Final_RGB.png" />
                                </td>
                                @{
                                    if (init == 0)
                                    {
                                        string logo = AasxHttpContextHelper.DataPath + "/logo.png";
                                        if (System.IO.File.Exists(logo))
                                        {
                                            if (!System.IO.File.Exists("wwwroot/logo.png"))
                                                System.IO.File.Copy(logo, "wwwroot/logo.png");
                                            init = 1;
                                        }
                                    }
                                    if (init == 1)
                                    {
                                        <td style="width:8%">
                                            <img src="logo.png" />
                                        </td>
                                    }
                                }
                            </tr>
                        </table>
                        <table class="atex-border" style="min-width:100%">
                            <tr>
                                <td class="atex-border atex-gray" style="width:30%">
                                    <b><span style="color:black">Project name:</span></b>
                                </td>
                                <td class="atex-border atex-gray" style="width:70%">
                                    <b><span style="color:black">@projectName[p]</span></b>
                                </td>
                            </tr>
                            <tr>
                                <td class="atex-border atex-green" style="width:30%">
                                    <b><span style="color:black">Certified by:</span></b>
                                </td>
                                <td class="atex-border atex-green" style="width:70%">
                                    <b>
                                        <input @bind="@certifiedBy[iOut]" class="atex-green" style="min-width:100%;min-height:100%" />
                                    </b>
                                </td>
                            </tr>
                            <tr>
                                <td class="atex-border atex-green" style="width:30%">
                                    <b><span style="color:black">Certified at:</span></b>
                                </td>
                                <td class="atex-border atex-green" style="width:70%">
                                    <b>
                                        <input @bind="@certifiedAt[iOut]" class="atex-green" style="min-width:100%;min-height:100%" />
                                    </b>
                                </td>
                            </tr>
                        </table>
                    </td>
                </tr>
                <tr style="border: 4px solid black">
                    <td class="atex-border">
                        <table class="atex-border" style="min-width:100%">
                            <tr>
                                <td class="atex-border" style="width:70%">
                                    <table style="min-width:100%">
                                        <tbody>
                                            <tr>
                                                <td class="atex-white" style="width:35%">
                                                    <b>Non-Ex Zone</b><br />
                                                </td>
                                                <td class="atex-white" style="width:5%">
                                                    &nbsp
                                                </td>
                                                <td class="atex-blue" style="width:15%">
                                                </td>
                                                <td class="atex-blue" style="width:5%">
                                                    &nbsp
                                                </td>
                                                <td class="atex-blue" style="width:40%">
                                                    <b>Ex Zone</b><br />
                                                </td>
                                            </tr>
                                            <tr>
                                                <td class="atex-white">
                                                    Associated Apparatus<br />
                                                </td>
                                                <td class="atex-white">
                                                </td>
                                                <td class="atex-blue">
                                                </td>
                                                <td class="atex-blue">
                                                </td>
                                                <td class="atex-blue">
                                                    Intrinsically safe apparatus / field device<br />
                                                </td>
                                            </tr>
                                            <tr>
                                                <td class="atex-white">
                                                    @{
                                                        bool svg = false;
                                                        string detailsImage = createDetailsImage(envIndex[iOut], ProductImage[iOut], out svg);

                                                        @if (detailsImage != "")
                                                        {
                                                            if (!svg)
                                                            {
                                                                <img width="200" style="max-width:100%;margin-left:auto;margin-right:auto" alt="Details Image"
                                                                src=data:image;base64,@detailsImage />
                                                            }
                                                            else
                                                            {
                                                                <img width="200" style="max-width:100%;margin-left:auto;margin-right:auto" alt="Details Image"
                                                                src=data:image/svg+xml;base64,@detailsImage />
                                                            }
                                                        }
                                                    }
                                                </td>
                                                <td>
                                                </td>
                                                <td class="atex-blue">
                                                    <br />
                                                    <img width="100" src="Cable2.jpg" style="margin-left:auto;margin-right:auto;max-width:100%" />
                                                    <b>Ex i Cable</b>
                                                </td>
                                                <td class="atex-blue">
                                                </td>
                                                <td class="atex-blue">
                                                    @{
                                                        svg = false;
                                                        detailsImage = createDetailsImage(envIndex[iIn], ProductImage[iIn], out svg);

                                                        @if (detailsImage != "")
                                                        {
                                                            if (!svg)
                                                            {
                                                                <img width="200" style="max-width:100%;margin-left:auto;margin-right:auto" alt="Details Image"
                                                                 src=data:image;base64,@detailsImage />
                                                            }
                                                            else
                                                            {
                                                                <img width="200" style="max-width:100%;margin-left:auto;margin-right:auto" alt="Details Image"
                                                                 src=data:image/svg+xml;base64,@detailsImage />
                                                            }
                                                        }
                                                    }
                                                </td>
                                            </tr>
                                            <tr class="atex-border atex-blue">
                                                <td>
                                                    <img src="ex.png" height="30" width="30" style="margin-left:auto;margin-right:auto" />
                                                    <span style="color:blue">@Identification[iOut]</span>
                                                </td>
                                                <td>
                                                </td>
                                                <td>
                                                </td>
                                                <td>
                                                </td>
                                                <td>
                                                    <img src="ex.png" height="30" width="30" style="margin-left:auto;margin-right:auto" />
                                                    <span style="color:blue">@Identification[iIn]</span>
                                                </td>
                                            </tr>
                                            <tr class="atex-blue">
                                                <td class="atex-border">U<sub>o</sub></td>
                                                <td class="atex-border">
                                                    &le;
                                                </td>
                                                <td class="atex-border">
                                                </td>
                                                <td class="atex-border">
                                                </td>
                                                <td class="atex-border">U<sub>i</sub></td>
                                            </tr>
                                            <tr class="atex-blue">
                                                <td class="atex-border">I<sub>o</sub></td>
                                                <td class="atex-border">
                                                    &le;
                                                </td>
                                                <td class="atex-border">
                                                </td>
                                                <td class="atex-border">
                                                </td>
                                                <td class="atex-border">I<sub>i</sub></td>
                                            </tr>
                                            <tr class="atex-blue">
                                                <td class="atex-border">P<sub>o</sub></td>
                                                <td class="atex-border">
                                                    &le;
                                                </td>
                                                <td class="atex-border">
                                                </td>
                                                <td class="atex-border">
                                                </td>
                                                <td class="atex-border">P<sub>i</sub></td>
                                            </tr>
                                            <tr class="atex-blue">
                                                <td class="atex-border">L<sub>o</sub></td>
                                                <td class="atex-border">
                                                    &ge;
                                                </td>
                                                <td class="atex-border">
                                                    L<sub>i</sub>
                                                </td>
                                                <td class="atex-border">
                                                    +
                                                </td>
                                                <td class="atex-border">L<sub>c</sub></td>
                                            </tr>
                                            <tr class="atex-blue">
                                                <td class="atex-border">C<sub>o</sub></td>
                                                <td class="atex-border">
                                                    &ge;
                                                </td>
                                                <td class="atex-border">
                                                    C<sub>i</sub>
                                                </td>
                                                <td class="atex-border">
                                                    +
                                                </td>
                                                <td class="atex-border">C<sub>c</sub></td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </td>
                                <td class="atex-border" style="width:30%;background-color:lightgray">
                                    <table style="min-width:100%">
                                        <tr>
                                            <td style="width:5%">
                                            </td>
                                            <td style="width:95%">
                                                <b>Comparison of the safety data</b><br />
                                                <br />
                                                <b>Proof of intrinsic safety (simple intrinsically safe circuit)</b><br />
                                                In a simple intrinsically safe circuit without external concentrated capacitances (C<sub>i</sub>) and without external concentrated inductances (L<sub>i</sub>), the full values of C<sub>o</sub> and L<sub>o</sub> can be exploited.<br />
                                                <br />
                                                <b>Proof of intrinsic safety (mixed intrinsically safe circuit)</b><br />
                                                Condition for the mixed intrinsically safe circuit with external concentrated capacitances (C<sub>i</sub>) and/or external concentrated inductances (L<sub>i</sub>).<br />
                                                <b>L<sub>i</sub> &lt; 1% of L<sub>o</sub>  or  C<sub>i</sub> &lt; 1% of C<sub>o</sub></b><br />
                                                Here, the full values of C<sub>o</sub> and L<sub>o</sub> can also be exploited.<br />
                                                <b>L<sub>i</sub>  ≥ 1% of L<sub>o</sub>  and  C<sub>i</sub> ≥ 1% of C<sub>o</sub></b><br />
                                                Values of 50% of Co and Lo are to be used here:<br />
                                                C<sub>i</sub>  + C<sub>c</sub> ≤ 0.5 C<sub>o</sub><br />
                                                L<sub>i</sub> + L<sub>c</sub>  ≤ 0.5 L<sub>o</sub><br />
                                                <br />
                                                @{
                                                    if (LCgreater)
                                                    {
                                                        <b><span style="color:red">L<sub>i</sub> ≥ 1% of L<sub>o</sub></span></b>

                                                        <br />
                                                        <b><span style="color:red">C<sub>i</sub> ≥ 1% of C<sub>o</sub></span></b>

                                                        <br />
                                                    }
                                                }
                                            </td>
                                        </tr>
                                    </table>
                                </td>
                            </tr>
                        </table>
                    </td>
                </tr>
                <tr style="border: 4px solid black">
                    <td>
                        <table style="min-width:100%">
                            <tr class="atex-border atex-gray">
                                <td>
                                    <table>
                                        <tr>
                                            <td>
                                                <b>Associated Apparatus</b>
                                            </td>
                                        </tr>
                                    </table>
                                </td>
                            </tr>
                            <tr>
                                <td class="atex-border" style="width:100%">
                                    <table style="min-width:100%">
                                        <tr>
                                            <td class="atex-border atex-gray" style="width:10%">
                                                Name
                                            </td>
                                            <td class="atex-border atex-gray" style="width:10%">
                                                Type
                                            </td>
                                            <td class="atex-border atex-gray" style="width:10%">
                                                SerialNumber
                                            </td>
                                            <td class="atex-border atex-gray" style="width:10%">
                                                Manufacturer
                                            </td>
                                            <td class="atex-border atex-gray" style="width:10%">
                                                Certificate
                                            </td>
                                            <td class="atex-border atex-gray" style="width:10%">
                                                Identification
                                            </td>
                                            <td class="atex-border atex-gray" style="width:8%">
                                                U<sub>o</sub> [V]
                                            </td>
                                            <td class="atex-border atex-gray" style="width:8%">
                                                I<sub>o</sub> [mA]
                                            </td>
                                            <td class="atex-border atex-gray" style="width:8%">
                                                P<sub>o</sub> [mW]
                                            </td>
                                            <td class="atex-border atex-gray" style="width:8%">
                                                L<sub>o</sub> [mH]
                                            </td>
                                            <td class="atex-border atex-gray" style="width:8%">
                                                C<sub>o</sub> [nF]
                                            </td>
                                        </tr>
                                        <tr>
                                            <td class="atex-border atex-blue">
                                                <b>@ManufacturerProductDesignation[iOut]</b>
                                            </td>
                                            <td class="atex-border atex-blue">
                                                @{
                                                    int iProductOut = iOut;
                                                    int pProductOut = p;
                                                    List<string> optionsProductOut = new List<string>();
                                                    for (int loopProductOut = 0; loopProductOut < ManufacturerProductType.Count; loopProductOut++)
                                                    {
                                                        var tProductOut = ManufacturerProductType[loopProductOut];
                                                        if (tProductOut != "" && isOutput[loopProductOut] && !optionsProductOut.Contains(tProductOut))
                                                        {
                                                            optionsProductOut.Add(tProductOut);
                                                        }
                                                    }
                                                    <b>
                                                        <select class="atex-blue" style="width:100%;height:100%"
                                                            value="@ManufacturerProductType[iProductOut]" @onchange="@((ChangeEventArgs args) => OnChangeProductOut(args, iOut, pProductOut))">
                                                            @foreach (var t in optionsProductOut)
                                                            {
                                                                <option value="@t">@t</option>
                                                            }
                                                        </select>
                                                    </b>
                                                }
                                            </td>
                                            <td class="atex-border atex-blue">
                                                @{
                                                    int iSerialNumberOut = iOut;
                                                    int pSerialNumberOut = p;
                                                    <b>
                                                        <select class="atex-blue" style="width:100%;height:100%"
                                                            value="@SerialNumber[iSerialNumberOut]" @onchange="@((ChangeEventArgs args) => OnChangeSerialNumberOut(args, iOut, pSerialNumberOut))">
                                                            @for (int loopSerialNumberOut = 0; loopSerialNumberOut < SerialNumber.Count; loopSerialNumberOut++)
                                                            {
                                                                var sSerialNumberOut = SerialNumber[loopSerialNumberOut];
                                                                if (ManufacturerProductType[iSerialNumberOut] == ManufacturerProductType[loopSerialNumberOut])
                                                                {
                                                                    <option value="@sSerialNumberOut">@sSerialNumberOut</option>
                                                                }
                                                            }
                                                        </select>
                                                    </b>
                                                }
                                            </td>
                                            <td class="atex-border atex-blue">
                                                <b>@ManufacturerName[iOut]</b>
                                            </td>
                                            <td class="atex-border atex-blue">
                                                @{
                                                    if (PreviewFileUrl[iOut] != "")
                                                    {
                                                        <span>&nbsp</span>
                                                        <a style="border:none;color:blue" href="@PreviewFileUrl[iOut]" target="_blank"><u>@TypeOfApproval[iOut]</u></a>
                                                    }
                                                    else
                                                    {
                                                        <b>@TypeOfApproval[iOut]</b>
                                                    }
                                                }
                                            </td>
                                            <td class="atex-border atex-blue">
                                                <b>@Identification[iOut]</b>
                                            </td>
                                            <td class="atex-border atex-blue">
                                                <b>@U[iOut].ToString(CultureInfo.InvariantCulture)</b>
                                            </td>
                                            <td class="atex-border atex-blue">
                                                <b>@I[iOut].ToString(CultureInfo.InvariantCulture)</b>
                                            </td>
                                            <td class="atex-border atex-blue">
                                                <b>@P[iOut].ToString(CultureInfo.InvariantCulture)</b>
                                            </td>
                                            <td class="atex-border atex-blue">
                                                <b>@L[iOut].ToString(CultureInfo.InvariantCulture)</b>
                                            </td>
                                            <td class="atex-border atex-blue">
                                                <b>@C[iOut].ToString(CultureInfo.InvariantCulture)</b>
                                            </td>
                                        </tr>
                                    </table>
                                </td>
                            </tr>
                        </table>
                    </td>
                </tr>
                <tr style="border: 4px solid black">
                    <td>
                        <table style="min-width:100%">
                            <tr class="atex-border atex-gray">
                                <td>
                                    <table>
                                        <tr>
                                            <td>
                                                <b>Intrinsically safe apparatus / field device</b>
                                            </td>
                                        </tr>
                                    </table>
                                </td>
                            </tr>
                            <tr>
                                <td class="atex-border" style="width:100%">
                                    <table style="min-width:100%">
                                        <tr>
                                            <td class="atex-border atex-gray" style="width:10%">
                                                Name
                                            </td>
                                            <td class="atex-border atex-gray" style="width:10%">
                                                Type
                                            </td>
                                            <td class="atex-border atex-gray" style="width:10%">
                                                SerialNumber
                                            </td>
                                            <td class="atex-border atex-gray" style="width:10%">
                                                Manufacturer
                                            </td>
                                            <td class="atex-border atex-gray" style="width:10%">
                                                Certificate
                                            </td>
                                            <td class="atex-border atex-gray" style="width:10%">
                                                Identification
                                            </td>
                                            <td class="atex-border atex-gray" style="width:8%">
                                                U<sub>i</sub> [V]
                                            </td>
                                            <td class="atex-border atex-gray" style="width:8%">
                                                I<sub>i</sub> [mA]
                                            </td>
                                            <td class="atex-border atex-gray" style="width:8%">
                                                P<sub>i</sub> [mW]
                                            </td>
                                            <td class="atex-border atex-gray" style="width:8%">
                                                L<sub>i</sub> [mH]
                                            </td>
                                            <td class="atex-border atex-gray" style="width:8%">
                                                C<sub>i</sub> [nF]
                                            </td>
                                        </tr>
                                        <tr>
                                            <td class="atex-border atex-pink">
                                                <b>@ManufacturerProductDesignation[iIn]</b>
                                            </td>
                                            <td class="atex-border atex-pink">
                                                @{
                                                    var iProductIn = iIn;
                                                    var pProductIn = p;
                                                    List<string> optionsProductIn = new List<string>();
                                                    for (int loopProductIn = 0; loopProductIn < ManufacturerProductType.Count; loopProductIn++)
                                                    {
                                                        var tProductIn = ManufacturerProductType[loopProductIn];
                                                        if (tProductIn != "" && !isOutput[loopProductIn] && !optionsProductIn.Contains(tProductIn))
                                                        {
                                                            optionsProductIn.Add(tProductIn);
                                                        }
                                                    }
                                                    <b>
                                                        <select class="atex-pink" style="width:100%;height:100%"
                                                            value="@ManufacturerProductType[iProductIn]" @onchange="@((ChangeEventArgs args) => OnChangeProductIn(args, iIn, pProductIn))">
                                                            @foreach (var t in optionsProductIn)
                                                            {
                                                                <option value="@t">@t</option>
                                                            }
                                                        </select>
                                                    </b>
                                                }
                                            </td>
                                            <td class="atex-border atex-pink">
                                                @{
                                                    int iSerialNumberIn = iIn;
                                                    int pSerialNumberIn = p;
                                                    <b>
                                                        <select class="atex-pink" style="width:100%;height:100%"
                                                            value="@SerialNumber[iSerialNumberIn]" @onchange="@((ChangeEventArgs args) => OnChangeSerialNumberIn(args, iIn, pSerialNumberIn))">
                                                            @for (int loopSerialNumberIn = 0; loopSerialNumberIn < SerialNumber.Count; loopSerialNumberIn++)
                                                            {
                                                                var sSerialNumberIn = SerialNumber[loopSerialNumberIn];
                                                                if (ManufacturerProductType[iSerialNumberIn] == ManufacturerProductType[loopSerialNumberIn])
                                                                {
                                                                    <option value="@sSerialNumberIn">@sSerialNumberIn</option>
                                                                }
                                                            }
                                                        </select>
                                                    </b>
                                                }
                                            </td>
                                            <td class="atex-border atex-pink">
                                                <b>@ManufacturerName[iIn]</b>
                                            </td>
                                            <td class="atex-border atex-blue">
                                                @{
                                                    if (PreviewFileUrl[iIn] != "")
                                                    {
                                                        <span>&nbsp</span>
                                                        <a style="border:none;color:blue" href="@PreviewFileUrl[iIn]" target="_blank"><u>@TypeOfApproval[iIn]</u></a>
                                                    }
                                                    else
                                                    {
                                                        <b>@TypeOfApproval[iIn]</b>
                                                    }
                                                }
                                            </td>
                                            <td class="atex-border atex-blue">
                                                <b>@Identification[iIn]</b>
                                            </td>
                                            <td class="atex-border atex-blue">
                                                <b>@U[iIn].ToString(CultureInfo.InvariantCulture)</b>
                                            </td>
                                            <td class="atex-border atex-blue">
                                                <b>@I[iIn].ToString(CultureInfo.InvariantCulture)</b>
                                            </td>
                                            <td class="atex-border atex-blue">
                                                <b>@P[iIn].ToString(CultureInfo.InvariantCulture)</b>
                                            </td>
                                            <td class="atex-border atex-blue">
                                                <b>@L[iIn].ToString(CultureInfo.InvariantCulture)</b>
                                            </td>
                                            <td class="atex-border atex-blue">
                                                <b>@C[iIn].ToString(CultureInfo.InvariantCulture)</b>
                                            </td>
                                        </tr>
                                    </table>
                                </td>
                            </tr>
                        </table>
                    </td>
                </tr>
                <tr style="border: 4px solid black">
                    <td>
                        <table style="min-width:100%">
                            <tr>
                                <td class="atex-border" style="width:100%">
                                    <table style="min-width:100%">
                                        <tr>
                                            <td class="atex-border atex-gray" style="width:30%">
                                                <b>Cable capacities and inductance</b>
                                            </td>
                                            <td class="atex-border atex-gray" style="width:10%">
                                                Manufacturer
                                            </td>
                                            <td class="atex-border atex-gray" style="width:10%">
                                                Cable length
                                            </td>
                                            <td class="atex-border atex-gray" style="width:5%">
                                                Cable L<sub>c</sub>
                                            </td>
                                            <td class="atex-border atex-gray" style="width:5%">
                                                Cable C<sub>c</sub>
                                            </td>
                                            <td class="atex-border atex-gray" style="width:24%">
                                                Maximum cable length
                                            </td>
                                            <td class="atex-border atex-gray" style="width:8%">
                                                L<sub>c</sub>
                                            </td>
                                            <td class="atex-border atex-gray" style="width:8%">
                                                C<sub>c</sub>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td class="atex-border atex-gray">
                                            </td>
                                            <td class="atex-border atex-blue">
                                                <b>STANDARD</b>
                                            </td>
                                            <td class="atex-border atex-gray">
                                                [m]
                                            </td>
                                            <td class="atex-border atex-gray">
                                                [mH/km]
                                            </td>
                                            <td class="atex-border atex-gray">
                                                [nF/km]
                                            </td>
                                            <td class="atex-border atex-gray">
                                                [m]
                                            </td>
                                            <td class="atex-border atex-gray">
                                                [mH]
                                            </td>
                                            <td class="atex-border atex-gray">
                                                [nF]
                                            </td>
                                        </tr>
                                        <tr>
                                            <td class="atex-border atex-gray">
                                                (Manufacturer specification (Datasheet) or <br>
                                                L<sub>c</sub> = 1 mH/km, C<sub>c</sub> = 110 nF/km)
                                            </td>
                                            <td class="atex-border atex-gray">
                                            </td>
                                            <td class="atex-border atex-white">
                                                <b>
                                                    <input @bind="inputLength[iOut]" class="atex-white" style="width:100%;min-height:100%" />
                                                </b>
                                            </td>
                                            <td class="atex-border atex-gray">
                                                <b>1</b>
                                            </td>
                                            <td class="atex-border atex-gray">
                                                <b>110</b>
                                            </td>
                                            <td class="atex-border atex-green">
                                                <b>@clMax1.ToString(CultureInfo.InvariantCulture)</b>
                                            </td>
                                            <td class="atex-border atex-green">
                                                @Lc.ToString(CultureInfo.InvariantCulture)
                                            </td>
                                            <td class="atex-border atex-green">
                                                @Cc.ToString(CultureInfo.InvariantCulture)
                                            </td>
                                        </tr>
                                    </table>
                                </td>
                            </tr>
                            <tr>
                                <td class="atex-border" style="width:100%">
                                    <table style="min-width:100%">
                                        <tr>
                                            <td class="atex-border atex-gray" style="width:84%">
                                            </td>
                                            <td class="atex-border atex-gray" style="width:8%">
                                                L<sub>i</sub> + L<sub>c</sub>
                                            </td>
                                            <td class="atex-border atex-gray" style="width:8%">
                                                C<sub>i</sub> + C<sub>c</sub>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td class="atex-border atex-gray">
                                            </td>
                                            <td class="atex-border atex-gray">
                                                [mH]
                                            </td>
                                            <td class="atex-border atex-gray">
                                                [nF]
                                            </td>
                                        </tr>
                                        <tr>
                                            <td class="atex-border atex-gray">
                                                <b>Inductance (L<sub>i</sub> + L<sub>c</sub>) and capacities (C<sub>i</sub> + C<sub>c</sub>)</b>
                                            </td>
                                            <td class="atex-border atex-green">
                                                <b>@sumLiLc.ToString(CultureInfo.InvariantCulture)</b>
                                            </td>
                                            <td class="atex-border atex-green">
                                                <b>@sumCiCc.ToString(CultureInfo.InvariantCulture)</b>
                                            </td>
                                        </tr>
                                    </table>
                                </td>
                            </tr>
                        </table>
                    </td>
                </tr>
                <tr style="border: 4px solid black">
                    <td>
                        <table style="min-width:100%">
                            <tr>
                                <td class="atex-border atex-gray" style="width:100%">
                                    <table style="min-width:100%">
                                        <tr>
                                            <td class="atex-border atex-gray" style="width:40%">
                                                <b>Condition / Verification for intrinsic safety</b>
                                            </td>
                                            <td class="atex-border atex-gray" style="width:10%">
                                                <b>Intrinsic safety ok</b>
                                            </td>
                                            <td class="atex-border atex-gray" style="width:50%">
                                                <b>Additional condition</b>
                                            </td>
                                        </tr>
                                        @{
                                            color = "red";
                                            ok = "NO";
                                            if (U[iOut] <= U[iIn])
                                            {
                                                color = "green";
                                                ok = "YES";
                                            }
                                        }
                                        <tr>
                                            <td class="atex-border atex-gray" style="width:40%">
                                                <table style="min-width:100%">
                                                    <tr>
                                                        <td class="atex-border atex-gray" style="width:25%;color:@color">
                                                            <b>U<sub>o</sub> ≤ U<sub>i</sub></b>
                                                        </td>
                                                        <td class="atex-border atex-gray" style="width:25%;color:@color">
                                                            <b>@U[iOut].ToString(CultureInfo.InvariantCulture)</b>
                                                        </td>
                                                        <td class="atex-border atex-gray" style="width:25%;color:@color">
                                                            <b>≤</b>
                                                        </td>
                                                        <td class="atex-border atex-gray" style="width:25%;color:@color">
                                                            <b>@U[iIn].ToString(CultureInfo.InvariantCulture)</b>
                                                        </td>
                                                    </tr>
                                                </table>
                                            </td>
                                            <td class="atex-border atex-gray" style="width:10%;color:@color">
                                                <b>@ok</b>
                                            </td>
                                            <td class="atex-border atex-gray" style="width:50%">
                                                Zone at the installation: Zone 0/1
                                            </td>
                                        </tr>
                                        @{
                                            color = "red";
                                            ok = "NO";
                                            if (I[iOut] <= I[iIn])
                                            {
                                                color = "green";
                                                ok = "YES";
                                            }
                                        }
                                        <tr>
                                            <td class="atex-border atex-gray" style="width:40%">
                                                <table style="min-width:100%">
                                                    <tr>
                                                        <td class="atex-border atex-gray" style="width:25%;color:@color">
                                                            <b>I<sub>o</sub> ≤ I<sub>i</sub></b>
                                                        </td>
                                                        <td class="atex-border atex-gray" style="width:25%;color:@color">
                                                            <b>@I[iOut].ToString(CultureInfo.InvariantCulture)</b>
                                                        </td>
                                                        <td class="atex-border atex-gray" style="width:25%;color:@color">
                                                            <b>≤</b>
                                                        </td>
                                                        <td class="atex-border atex-gray" style="width:25%;color:@color">
                                                            <b>@I[iIn].ToString(CultureInfo.InvariantCulture)</b>
                                                        </td>
                                                    </tr>
                                                </table>
                                            </td>
                                            <td class="atex-border atex-gray" style="width:10%;color:@color">
                                                <b>@ok</b>
                                            </td>
                                            <td class="atex-border atex-gray" style="width:50%">
                                                Ex Group: IIC
                                            </td>
                                        </tr>
                                        @{
                                            color = "red";
                                            ok = "NO";
                                            if (P[iOut] <= P[iIn])
                                            {
                                                color = "green";
                                                ok = "YES";
                                            }
                                        }
                                        <tr>
                                            <td class="atex-border atex-gray" style="width:40%">
                                                <table style="min-width:100%">
                                                    <tr>
                                                        <td class="atex-border atex-gray" style="width:25%;color:@color">
                                                            <b>P<sub>o</sub> ≤ P<sub>i</sub></b>
                                                        </td>
                                                        <td class="atex-border atex-gray" style="width:25%;color:@color">
                                                            <b>@P[iOut].ToString(CultureInfo.InvariantCulture)</b>
                                                        </td>
                                                        <td class="atex-border atex-gray" style="width:25%;color:@color">
                                                            <b>≤</b>
                                                        </td>
                                                        <td class="atex-border atex-gray" style="width:25%;color:@color">
                                                            <b>@P[iIn].ToString(CultureInfo.InvariantCulture)</b>
                                                        </td>
                                                    </tr>
                                                </table>
                                            </td>
                                            <td class="atex-border atex-gray" style="width:10%;color:@color">
                                                <b>@ok</b>
                                            </td>
                                            <td class="atex-border atex-gray" style="width:50%">
                                                max. ambient temperature:
                                            </td>
                                        </tr>
                                        @{
                                            color = "red";
                                            ok = "NO";
                                            if (Lo >= sumLiLc)
                                            {
                                                color = "green";
                                                ok = "YES";
                                            }
                                        }
                                        <tr>
                                            <td class="atex-border atex-gray" style="width:40%">
                                                <table style="min-width:100%">
                                                    <tr class="atex-border atex-gray">
                                                        <td class="atex-border atex-gray" style="width:25%;color:@color">
                                                            <b>
                                                                @{
                                                                    if (LCgreater)
                                                                    {
                                                                        <span style="color:red">0.5 * </span>
                                                                    }
                                                                }
                                                                L<sub>o</sub> ≥ L<sub>i</sub> + L<sub>c</sub>
                                                            </b>
                                                        </td>
                                                        <td class="atex-border atex-gray" style="width:25%;color:@color">
                                                            <b>@Lo.ToString(CultureInfo.InvariantCulture)</b>
                                                        </td>
                                                        <td class="atex-border atex-gray" style="width:25%;color:@color">
                                                            <b>≥</b>
                                                        </td>
                                                        <td class="atex-border atex-gray" style="width:25%;color:@color">
                                                            <b>@sumLiLc.ToString(CultureInfo.InvariantCulture)</b>
                                                        </td>
                                                    </tr>
                                                </table>
                                            </td>
                                            <td class="atex-border atex-gray" style="width:10%;color:@color">
                                                <b>@ok</b>
                                            </td>
                                            <td class="atex-border atex-gray" style="width:50%">
                                                Mixed IS circuit:
                                            </td>
                                        </tr>
                                        @{
                                            color = "red";
                                            ok = "NO";
                                            if (Co >= sumCiCc)
                                            {
                                                color = "green";
                                                ok = "YES";
                                            }
                                        }
                                        <tr>
                                            <td class="atex-border atex-gray" style="width:40%">
                                                <table style="min-width:100%">
                                                    <tr>
                                                        <td class="atex-border atex-gray" style="width:25%;color:@color">
                                                            <b>
                                                                @{
                                                                    if (LCgreater)
                                                                    {
                                                                        <span style="color:red">0.5 * </span>
                                                                    }
                                                                }
                                                                C<sub>o</sub> ≥ C<sub>i</sub> + C<sub>c</sub>
                                                            </b>
                                                        </td>
                                                        <td class="atex-border atex-gray" style="width:25%;color:@color">
                                                            <b>@Co.ToString(CultureInfo.InvariantCulture)</b>
                                                        </td>
                                                        <td class="atex-border atex-gray" style="width:25%;color:@color">
                                                            <b>≥</b>
                                                        </td>
                                                        <td class="atex-border atex-gray" style="width:25%;color:@color">
                                                            <b>@sumCiCc.ToString(CultureInfo.InvariantCulture)</b>
                                                        </td>
                                                    </tr>
                                                </table>
                                            </td>
                                            <td class="atex-border atex-gray" style="width:10%;color:@color">
                                                <b>@ok</b>
                                            </td>
                                            <td class="atex-border atex-gray" style="width:50%">
                                                (with concentrated Li (≥ 1% Lo) and concentrated Ci (≥ 1% Co): YES
                                            </td>
                                        </tr>
                                    </table>
                                </td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>

            if (inputLength[iOut] != Double.MinValue && inputLength[iOut] != cableLength[p])
            {
                cableLength[p] = inputLength[iOut];
            }
            /*
            if (pCertifiedBy[p] != null)
                pCertifiedBy[p].Value = certifiedBy[p];
            if (pCertifiedAt[p] != null)
                certifiedAt[p] = pCertifiedAt[p].Value;
            */

            <br />
            <br />
        }
    }



</div>

@code
{
    void OnChangeProductOut(ChangeEventArgs args, int iOut, int loop)
    {
        if (args.Value != null)
        {
            var a = args.Value.ToString();

            zugehoerigesbetriebsmittel[loop] = a;
            pZugehoerigesbetriebsmittel[loop].Value = a;
            for (int j = 0; j < ManufacturerProductType.Count; j++)
            {
                if (a == ManufacturerProductType[j])
                {
                    zugehoerigesbetriebsmittelSeriennummer[loop] = SerialNumber[j];
                    if (pZugehoerigesbetriebsmittelSeriennummer[loop] != null)
                    {
                        pZugehoerigesbetriebsmittelSeriennummer[loop].Value = SerialNumber[j];
                    }
                    break;
                }
            }

            AasxServer.Program.env[envProject].setWrite(true);
            Program.signalNewData(0);
        }
    }

    void OnChangeProductIn(ChangeEventArgs args, int iIn, int loop)
    {
        if (args.Value != null)
        {
            var a = args.Value.ToString();

            eigensicheresbetriebsmittel[loop] = a;
            pEigensicheresbetriebsmittel[loop].Value = a;
            for (int j = 0; j < ManufacturerProductType.Count; j++)
            {
                if (a == ManufacturerProductType[j])
                {
                    eigensicheresbetriebsmittelSeriennummer[loop] = SerialNumber[j];
                    if (pEigensicheresbetriebsmittelSeriennummer[loop] != null)
                    {
                        pEigensicheresbetriebsmittelSeriennummer[loop].Value = SerialNumber[j];
                    }
                    break;
                }
            }

            AasxServer.Program.env[envProject].setWrite(true);
            Program.signalNewData(0);
        }
    }

    void OnChangeSerialNumberOut(ChangeEventArgs args, int iOut, int loop)
    {
        if (args.Value != null)
        {
            var a = args.Value.ToString();
            zugehoerigesbetriebsmittelSeriennummer[loop] = a;
            if (pZugehoerigesbetriebsmittelSeriennummer[loop] != null)
            {
                pZugehoerigesbetriebsmittelSeriennummer[loop].Value = a;
            }

            AasxServer.Program.env[envProject].setWrite(true);
            Program.signalNewData(0);
        }
    }

    void OnChangeSerialNumberIn(ChangeEventArgs args, int iIn, int loop)
    {
        if (args.Value != null)
        {
            var a = args.Value.ToString();
            eigensicheresbetriebsmittelSeriennummer[loop] = a;
            if (pEigensicheresbetriebsmittelSeriennummer[loop] != null)
            {
                pEigensicheresbetriebsmittelSeriennummer[loop].Value = a;
            }

            AasxServer.Program.env[envProject].setWrite(true);
            Program.signalNewData(0);
        }
    }

    int newDataMode = 1;
    object lockNewDataMode = new object();
    static int init = 0;    
    int countProject = 0;
    int envProject = -1;
    List<SubmodelElementCollection> project = null;
    List<string> projectName = null;
    List<double> cableLength = null;
    List<Property> pCableLength = null;
    List<string> certifiedBy = null;
    List<Property> pCertifiedBy = null;
    List<string> certifiedAt = null;
    List<Property> pCertifiedAt = null;
    List<string> eigensicheresbetriebsmittel = null;
    List<Property> pEigensicheresbetriebsmittel = null;
    List<string> eigensicheresbetriebsmittelSeriennummer = null;
    List<Property> pEigensicheresbetriebsmittelSeriennummer = null;
    List<string> zugehoerigesbetriebsmittel = null;
    List<Property> pZugehoerigesbetriebsmittel = null;
    List<string> zugehoerigesbetriebsmittelSeriennummer = null;
    List<Property> pZugehoerigesbetriebsmittelSeriennummer = null;

    int count = 0;
    List<bool> isOutput = null;
    List<int> envIndex = null;
    List<Submodel> Nameplate = null;
    List<Submodel> TechnicalData = null;
    List<string> ManufacturerProductDesignation = null;
    List<string> ManufacturerProductType = null;
    List<string> SerialNumber = null;
    List<string> ManufacturerName = null;
    List<string> ManufacturerLogo = null;
    List<string> ProductImage = null;
    List<string> DesignationOfCertificateOrApproval = null;
    List<string> PreviewFile = null;
    List<string> PreviewFileUrl = null;
    List<string> TypeOfApproval = null;
    List<string> Identification = null;
    List<SubmodelElementCollection> SafetyRelatedPropertiesForActiveBehaviour = null;
    List<SubmodelElementCollection> SafetyRelatedPropertiesForPassiveBehaviour = null;
    List<Double> U = null;
    List<Double> I = null;
    List<Double> P = null;
    List<Double> L = null;
    List<Double> C = null;
    List<string> Alternatives = null;
    List<Double> inputLength = null;

    void collectData()
    {
        int dataMode = 0;
        lock (lockNewDataMode)
        {
            if (newDataMode != 0)
            {
                dataMode = newDataMode;
                newDataMode = 0;
            }
        }

        countProject = 0;
        project = new List<SubmodelElementCollection>();
        projectName = new List<string>();
        cableLength = new List<double>();
        pCableLength = new List<Property>();
        if (dataMode != 0)
        {
            certifiedBy = new List<string>();
            pCertifiedBy = new List<Property>();
            certifiedAt = new List<string>();
            pCertifiedAt = new List<Property>();
            eigensicheresbetriebsmittel = new List<string>();
            pEigensicheresbetriebsmittel = new List<Property>();
            eigensicheresbetriebsmittelSeriennummer = new List<string>();
            pEigensicheresbetriebsmittelSeriennummer = new List<Property>();
            zugehoerigesbetriebsmittel = new List<string>();
            pZugehoerigesbetriebsmittel = new List<Property>();
            zugehoerigesbetriebsmittelSeriennummer = new List<string>();
            pZugehoerigesbetriebsmittelSeriennummer = new List<Property>();
        }
        count = 0;
        isOutput = new List<bool>();
        envIndex = new List<int>();
        Nameplate = new List<Submodel>();
        TechnicalData = new List<Submodel>();
        ManufacturerProductDesignation = new List<string>();
        if (dataMode != 0)
        {
            ManufacturerProductType = new List<string>();
            SerialNumber = new List<string>();
        }
        ManufacturerName = new List<string>();
        ManufacturerLogo = new List<string>();
        ProductImage = new List<string>();
        DesignationOfCertificateOrApproval = new List<string>();
        PreviewFile = new List<string>();
        PreviewFileUrl = new List<string>();
        TypeOfApproval = new List<string>();
        Identification = new List<string>();
        SafetyRelatedPropertiesForActiveBehaviour = new List<SubmodelElementCollection>();
        SafetyRelatedPropertiesForPassiveBehaviour = new List<SubmodelElementCollection>();
        U = new List<double>();
        I = new List<double>();
        P = new List<double>();
        L = new List<double>();
        C = new List<double>();
        if (dataMode != 0)
            Alternatives = new List<string>();
        if (dataMode != 0)
            inputLength = new List<Double>();

        int aascount = AasxServer.Program.env.Length;

        for (int i = 0; i < aascount; i++)
        {
            bool found = false;
            var env = AasxServer.Program.env[i];
            if (env != null)
            {
                var aas = env.AasEnv.AssetAdministrationShells[0];

                if (aas.Submodels != null && aas.Submodels.Count > 0)
                {
                    foreach (var smr in aas.Submodels)
                    {
                        var sm = env.AasEnv.FindSubmodel(smr);
                        {
                            if (sm != null && sm.IdShort != null)
                            {
                                if ((sm.IdShort.ToLower() == "nachweiseigensicherheit" || sm.IdShort.ToLower() == "proofofintrinsicsafety") && sm.SubmodelElements != null)
                                {
                                    foreach (var s in sm.SubmodelElements)
                                    {
                                        if (s.IdShort.ToLower().Contains("projekt") || s.IdShort.ToLower().Contains("loop"))
                                        {
                                            if (s != null && s is SubmodelElementCollection smc)
                                            {
                                                if (envProject == -1)
                                                {
                                                    envProject = i;
                                                }
                                                project.Add(s as SubmodelElementCollection);
                                                projectName.Add("");
                                                cableLength.Add(0);
                                                pCableLength.Add(null);
                                                if (pCertifiedBy.Count <= countProject)
                                                {
                                                    pCertifiedBy.Add(null);
                                                    pCertifiedAt.Add(null);
                                                }
                                                if (eigensicheresbetriebsmittel.Count <= countProject)
                                                    eigensicheresbetriebsmittel.Add("");
                                                if (pEigensicheresbetriebsmittel.Count <= countProject)
                                                    pEigensicheresbetriebsmittel.Add(null);
                                                if (eigensicheresbetriebsmittelSeriennummer.Count <= countProject)
                                                    eigensicheresbetriebsmittelSeriennummer.Add("");
                                                if (pEigensicheresbetriebsmittelSeriennummer.Count <= countProject)
                                                    pEigensicheresbetriebsmittelSeriennummer.Add(null);
                                                if (zugehoerigesbetriebsmittel.Count <= countProject)
                                                    zugehoerigesbetriebsmittel.Add("");
                                                if (pZugehoerigesbetriebsmittel.Count <= countProject)
                                                    pZugehoerigesbetriebsmittel.Add(null);
                                                if (zugehoerigesbetriebsmittelSeriennummer.Count <= countProject)
                                                    zugehoerigesbetriebsmittelSeriennummer.Add("");
                                                if (pZugehoerigesbetriebsmittelSeriennummer.Count <= countProject)
                                                    pZugehoerigesbetriebsmittelSeriennummer.Add(null);

                                                var sme = findeSME(smc: project[countProject], idShortPath: "projektbezeichnung", ignore: true);
                                                if (sme != null)
                                                    projectName[countProject] = sme.ValueAsText();
                                                sme = findeSME(smc: project[countProject], idShortPath: "projectname", ignore: true);
                                                if (sme != null)
                                                    projectName[countProject] = sme.ValueAsText();
                                                sme = findeSME(smc: project[countProject], idShortPath: "eigensicheresbetriebsmittel", ignore: true);
                                                if (sme != null)
                                                {
                                                    if (eigensicheresbetriebsmittel[countProject] == "")
                                                        eigensicheresbetriebsmittel[countProject] = sme.ValueAsText();
                                                    if (pEigensicheresbetriebsmittel[countProject] == null)
                                                        pEigensicheresbetriebsmittel[countProject] = sme as Property;
                                                }
                                                sme = findeSME(smc: project[countProject], idShortPath: "intrinsicallysafeapparatus", ignore: true);
                                                if (sme != null)
                                                {
                                                    if (eigensicheresbetriebsmittel[countProject] == "")
                                                        eigensicheresbetriebsmittel[countProject] = sme.ValueAsText();
                                                    if (pEigensicheresbetriebsmittel[countProject] == null)
                                                        pEigensicheresbetriebsmittel[countProject] = sme as Property;
                                                }
                                                sme = findeSME(smc: project[countProject], idShortPath: "eigensicheresbetriebsmittelSeriennummer", ignore: true);
                                                if (sme != null)
                                                {
                                                    if (eigensicheresbetriebsmittelSeriennummer[countProject] == "")
                                                        eigensicheresbetriebsmittelSeriennummer[countProject] = sme.ValueAsText();
                                                    if (pEigensicheresbetriebsmittelSeriennummer[countProject] == null)
                                                        pEigensicheresbetriebsmittelSeriennummer[countProject] = sme as Property;
                                                }
                                                sme = findeSME(smc: project[countProject], idShortPath: "intrinsicallysafeapparatusserialnumber", ignore: true);
                                                if (sme != null)
                                                {
                                                    if (eigensicheresbetriebsmittelSeriennummer[countProject] == "")
                                                        eigensicheresbetriebsmittelSeriennummer[countProject] = sme.ValueAsText();
                                                    if (pEigensicheresbetriebsmittelSeriennummer[countProject] == null)
                                                        pEigensicheresbetriebsmittelSeriennummer[countProject] = sme as Property;
                                                }
                                                sme = findeSME(smc: project[countProject], idShortPath: "zugehoerigesbetriebsmittel", ignore: true);
                                                if (sme != null)
                                                {
                                                    if (zugehoerigesbetriebsmittel[countProject] == "")
                                                        zugehoerigesbetriebsmittel[countProject] = sme.ValueAsText();
                                                    if (pZugehoerigesbetriebsmittel[countProject] == null)
                                                        pZugehoerigesbetriebsmittel[countProject] = sme as Property;
                                                }
                                                sme = findeSME(smc: project[countProject], idShortPath: "associatedapparatus", ignore: true);
                                                if (sme != null)
                                                {
                                                    if (zugehoerigesbetriebsmittel[countProject] == "")
                                                        zugehoerigesbetriebsmittel[countProject] = sme.ValueAsText();
                                                    if (pZugehoerigesbetriebsmittel[countProject] == null)
                                                        pZugehoerigesbetriebsmittel[countProject] = sme as Property;
                                                }
                                                sme = findeSME(smc: project[countProject], idShortPath: "zugehoerigesbetriebsmittelSeriennummer", ignore: true);
                                                if (sme != null)
                                                {
                                                    if (zugehoerigesbetriebsmittelSeriennummer[countProject] == "")
                                                        zugehoerigesbetriebsmittelSeriennummer[countProject] = sme.ValueAsText();
                                                    if (pZugehoerigesbetriebsmittelSeriennummer[countProject] == null)
                                                        pZugehoerigesbetriebsmittelSeriennummer[countProject] = sme as Property;
                                                }
                                                sme = findeSME(smc: project[countProject], idShortPath: "associatedapparatusserialnumber", ignore: true);
                                                if (sme != null)
                                                {
                                                    if (zugehoerigesbetriebsmittelSeriennummer[countProject] == "")
                                                        zugehoerigesbetriebsmittelSeriennummer[countProject] = sme.ValueAsText();
                                                    if (pZugehoerigesbetriebsmittelSeriennummer[countProject] == null)
                                                        pZugehoerigesbetriebsmittelSeriennummer[countProject] = sme as Property;
                                                }
                                                sme = findeSME(smc: project[countProject], idShortPath: "leitungslaenge", ignore: true);
                                                if (sme != null)
                                                {
                                                    try
                                                    {
                                                        cableLength[countProject] = Convert.ToDouble(sme.ValueAsText(), CultureInfo.InvariantCulture);
                                                        pCableLength[countProject] = sme as Property;
                                                    }
                                                    catch { }
                                                }
                                                sme = findeSME(smc: project[countProject], idShortPath: "cablelength", ignore: true);
                                                if (sme != null)
                                                {
                                                    try
                                                    {
                                                        cableLength[countProject] = Convert.ToDouble(sme.ValueAsText(), CultureInfo.InvariantCulture);
                                                        pCableLength[countProject] = sme as Property;
                                                    }
                                                    catch { }
                                                }
                                                sme = findeSME(smc: project[countProject], idShortPath: "CertifiedBy", ignore: true);
                                                if (sme != null)
                                                {
                                                    if (pCertifiedBy[countProject] == null)
                                                    {
                                                        pCertifiedBy[countProject] = sme as Property;
                                                    }
                                                }
                                                sme = findeSME(smc: project[countProject], idShortPath: "CertifiedAt", ignore: true);
                                                if (sme != null)
                                                {
                                                    if (pCertifiedAt[countProject] == null)
                                                    {
                                                        pCertifiedAt[countProject] = sme as Property;
                                                    }
                                                }
                                                countProject++;
                                            }
                                        }
                                    }
                                }
                                if (sm.IdShort.ToLower() == "nameplate")
                                {
                                    found = true;
                                    isOutput.Add(false);
                                    envIndex.Add(i);
                                    Nameplate.Add(sm as Submodel);
                                    ManufacturerProductDesignation.Add("");
                                    ManufacturerName.Add("");
                                    DesignationOfCertificateOrApproval.Add("");
                                    PreviewFile.Add("");
                                    PreviewFileUrl.Add("");
                                    TypeOfApproval.Add("");
                                    Identification.Add("");
                                    SafetyRelatedPropertiesForActiveBehaviour.Add(null);
                                    SafetyRelatedPropertiesForPassiveBehaviour.Add(null);
                                    U.Add(0);
                                    I.Add(0);
                                    P.Add(0);
                                    L.Add(0);
                                    C.Add(0);
                                    if (C.Count > ManufacturerProductType.Count)
                                        ManufacturerProductType.Add("");
                                    if (C.Count > SerialNumber.Count)
                                        SerialNumber.Add("");
                                    if (C.Count > Alternatives.Count)
                                        Alternatives.Add("");
                                    if (C.Count > inputLength.Count)
                                        inputLength.Add(Double.MinValue);
                                    if (C.Count > certifiedBy.Count)
                                        certifiedBy.Add("");
                                    if (C.Count > certifiedAt.Count)
                                        certifiedAt.Add("");

                                    var sme = findeSME(sm: sm, idShortPath: "ManufacturerProductDesignation", ignore: true);
                                    if (sme != null)
                                    {
                                        if (sme is Property p)
                                            ManufacturerProductDesignation[count] = p.Value;
                                        if (sme is MultiLanguageProperty mlp && mlp.Value != null && mlp.Value.Count > 0)
                                        {
                                            ManufacturerProductDesignation[count] = mlp.Value[0].Text;
                                        }
                                    }

                                    if (ManufacturerProductType[count] == "")
                                    {
                                        sme = findeSME(sm: sm, idShortPath: "ManufacturerProductType", ignore: true);
                                        if (sme != null)
                                        {
                                            if (sme is Property p)
                                                ManufacturerProductType[count] = p.Value;
                                            if (sme is MultiLanguageProperty mlp && mlp.Value != null && mlp.Value.Count > 0)
                                            {
                                                ManufacturerProductType[count] = mlp.Value[0].Text;
                                            }
                                        }
                                    }

                                    if (SerialNumber[count] == "")
                                    {
                                        sme = findeSME(sm: sm, idShortPath: "SerialNumber", ignore: true);
                                        if (sme != null)
                                        {
                                            if (sme is Property p)
                                                SerialNumber[count] = p.Value;
                                            if (sme is MultiLanguageProperty mlp && mlp.Value != null && mlp.Value.Count > 0)
                                            {
                                                SerialNumber[count] = mlp.Value[0].Text;
                                            }
                                        }
                                    }

                                    sme = findeSME(sm: sm, idShortPath: "ManufacturerName", ignore: true);
                                    if (sme != null)
                                    {
                                        if (sme is Property p)
                                            ManufacturerName[count] = p.Value;
                                        if (sme is MultiLanguageProperty mlp && mlp.Value != null && mlp.Value.Count > 0)
                                        {
                                            ManufacturerName[count] = mlp.Value[0].Text;
                                        }
                                    }

                                    sme = findeSME(sm: sm,
                                        idShortPath: "Markings.Marking.ExplosionSafeties.ExplosionSafety",
                                        ignore: true, contains: true);
                                    if (sme != null)
                                    {
                                        var s = sme as SubmodelElementCollection;

                                        sme = findeSME(smc: s, idShortPath: "DesignationOfCertificateOrApproval", ignore: true);
                                        if (sme != null)
                                        {
                                            if (sme is Property p)
                                                DesignationOfCertificateOrApproval[count] = p.Value;
                                            if (sme is MultiLanguageProperty mlp && mlp.Value != null && mlp.Value.Count > 0)
                                            {
                                                DesignationOfCertificateOrApproval[count] = mlp.Value[0].Text;
                                            }
                                        }

                                        sme = findeSME(smc: s, idShortPath: "PreviewFile", ignore: true);
                                        if (sme != null)
                                        {
                                            if (sme is File f)
                                            {
                                                PreviewFile[count] = f.Value;
                                            }
                                        }

                                        sme = findeSME(smc: s, idShortPath: "DigitalFile", ignore: true);
                                        if (sme != null)
                                        {
                                            if (sme is File f)
                                            {
                                                var path = getPath(sme);
                                                if (path != null)
                                                {
                                                    PreviewFileUrl[count] = path;
                                                }
                                            }
                                        }

                                        sme = findeSME(smc: s, idShortPath: "TypeOfApproval", ignore: true);
                                        if (sme != null)
                                        {
                                            if (sme is Property p)
                                                TypeOfApproval[count] = p.Value;
                                            if (sme is MultiLanguageProperty mlp && mlp.Value != null && mlp.Value.Count > 0)
                                            {
                                                TypeOfApproval[count] = mlp.Value[0].Text;
                                            }
                                        }

                                        sme = findeSME(smc: s, idShortPath: "Identification", ignore: true);
                                        if (sme != null)
                                        {
                                            if (sme is Property p)
                                                Identification[count] = p.Value;
                                            if (sme is MultiLanguageProperty mlp && mlp.Value != null && mlp.Value.Count > 0)
                                            {
                                                Identification[count] = mlp.Value[0].Text;
                                            }
                                        }
                                    }

                                    sme = findeSME(sm: sm,
                                        idShortPath: "Markings.Marking.ExplosionSafeties.ExplosionSafety.ExternalElectricalCircuit.SafetyRelatedPropertiesForActiveBehaviour",
                                        ignore: true, contains: true);
                                    if (sme != null)
                                    {
                                        var s = sme as SubmodelElementCollection;
                                        isOutput[count] = true;
                                        SafetyRelatedPropertiesForActiveBehaviour[count] = s;

                                        sme = findeSME(smc: s, idShortPath: "MaxOutputPower", ignore: true);
                                        if (sme != null)
                                        {
                                            if (sme is Property p)
                                            {
                                                try
                                                {
                                                    P[count] = Convert.ToDouble(p.Value, CultureInfo.InvariantCulture);
                                                }
                                                catch { }
                                            }
                                        }

                                        sme = findeSME(smc: s, idShortPath: "MaxOutputVoltage", ignore: true);
                                        if (sme != null)
                                        {
                                            if (sme is Property p)
                                            {
                                                try
                                                {
                                                    U[count] = Convert.ToDouble(p.Value, CultureInfo.InvariantCulture);
                                                }
                                                catch { }
                                            }
                                        }

                                        sme = findeSME(smc: s, idShortPath: "MaxOutputCurrent", ignore: true);
                                        if (sme != null)
                                        {
                                            if (sme is Property p)
                                            {
                                                try
                                                {
                                                    I[count] = Convert.ToDouble(p.Value, CultureInfo.InvariantCulture);
                                                }
                                                catch { }
                                            }
                                        }

                                        sme = findeSME(smc: s, idShortPath: "MaxExternalCapacitance", ignore: true);
                                        if (sme != null)
                                        {
                                            if (sme is Property p)
                                            {
                                                try
                                                {
                                                    string v = p.Value;
                                                    // fix generator bug
                                                    if (v.Contains(" nF"))
                                                        v = v.Replace(" nF", "");
                                                    C[count] = Convert.ToDouble(v, CultureInfo.InvariantCulture);
                                                }
                                                catch { }
                                            }
                                        }

                                        sme = findeSME(smc: s, idShortPath: "MaxExternalInductance", ignore: true);
                                        if (sme != null)
                                        {
                                            if (sme is Property p)
                                            {
                                                try
                                                {
                                                    L[count] = Convert.ToDouble(p.Value, CultureInfo.InvariantCulture);
                                                }
                                                catch { }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        sme = findeSME(sm: sm,
                                            idShortPath: "Markings.Marking.ExplosionSafeties.ExplosionSafety.ExternalElectricalCircuit.SafetyRelatedPropertiesForPassiveBehaviour",
                                            ignore: true, contains: true);
                                        if (sme != null)
                                        {
                                            var s = sme as SubmodelElementCollection;
                                            SafetyRelatedPropertiesForPassiveBehaviour[count] = s as SubmodelElementCollection;

                                            sme = findeSME(smc: s, idShortPath: "MaxInputPower", ignore: true);
                                            if (sme != null)
                                            {
                                                if (sme is Property p)
                                                {
                                                    try
                                                    {
                                                        P[count] = Convert.ToDouble(p.Value, CultureInfo.InvariantCulture);
                                                    }
                                                    catch { }
                                                }
                                            }

                                            sme = findeSME(smc: s, idShortPath: "MaxInputVoltage", ignore: true);
                                            if (sme != null)
                                            {
                                                if (sme is Property p)
                                                {
                                                    try
                                                    {
                                                        U[count] = Convert.ToDouble(p.Value, CultureInfo.InvariantCulture);
                                                    }
                                                    catch { }
                                                }
                                            }

                                            sme = findeSME(smc: s, idShortPath: "MaxInputCurrent", ignore: true);
                                            if (sme != null)
                                            {
                                                if (sme is Property p)
                                                {
                                                    try
                                                    {
                                                        I[count] = Convert.ToDouble(p.Value, CultureInfo.InvariantCulture);
                                                    }
                                                    catch { }
                                                }
                                            }

                                            sme = findeSME(smc: s, idShortPath: "MaxInternalCapacitance", ignore: true);
                                            if (sme != null)
                                            {
                                                if (sme is Property p)
                                                {
                                                    try
                                                    {
                                                        C[count] = Convert.ToDouble(p.Value, CultureInfo.InvariantCulture);
                                                    }
                                                    catch { }
                                                }
                                            }

                                            sme = findeSME(smc: s, idShortPath: "MaxInternalInductance", ignore: true);
                                            if (sme != null)
                                            {
                                                if (sme is Property p)
                                                {
                                                    try
                                                    {
                                                        L[count] = Convert.ToDouble(p.Value, CultureInfo.InvariantCulture);
                                                    }
                                                    catch { }
                                                }
                                            }
                                        }
                                    }
                                }
                                if (sm.IdShort.ToLower() == "handoverdocumentation")
                                {
                                    found = true;
                                    if (PreviewFile[count] != "")
                                    {
                                        var sme = findeSMEValue(sm: sm, value: PreviewFile[count]);
                                        if (sme != null)
                                        {
                                            var path = getPath(sme);
                                            if (path != null)
                                            {
                                                PreviewFileUrl[count] = path.Replace("PreviewFile", "DigitalFile");
                                            }
                                        }
                                    }
                                    foreach (var se in sm.SubmodelElements)
                                    {
                                        if (se is SubmodelElementCollection smc)
                                        {
                                            var sme = findeSME(smc: smc,
                                                        idShortPath: "DocumentVersion.PreviewFile",
                                                        ignore: true, contains: true);
                                            if (sme != null)
                                            {
                                                if (sme is File f)
                                                {
                                                    if (f.Value.ToLower().Contains("atex"))
                                                    {
                                                        PreviewFile[count] = f.Value;
                                                        var path = getPath(f);
                                                        if (path != null)
                                                        {
                                                            PreviewFileUrl[count] = path.Replace("PreviewFile", "DigitalFile");
                                                        }
                                                        if (TypeOfApproval[count] == "")
                                                            TypeOfApproval[count] = "ATEX";
                                                    }
                                                    if (f.Value.ToLower().Contains("iecex") && TypeOfApproval[count] == "")
                                                    {
                                                        PreviewFile[count] = f.Value;
                                                        var path = getPath(f);
                                                        if (path != null)
                                                        {
                                                            PreviewFileUrl[count] = path.Replace("PreviewFile", "DigitalFile");
                                                        }
                                                        if (TypeOfApproval[count] == "")
                                                            TypeOfApproval[count] = "IECEX";
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                if (sm.IdShort.ToLower() == "technicaldata")
                                {
                                    found = true;
                                    TechnicalData.Add(sm as Submodel);
                                    ManufacturerLogo.Add("");
                                    ProductImage.Add("");

                                    var sme = findeSME(sm: sm, idShortPath: "GeneralInformation", ignore: true);
                                    if (sme != null)
                                    {
                                        var g = sme as SubmodelElementCollection;
                                        sme = findeSME(smc: g, idShortPath: "ManufacturerLogo", ignore: true);
                                        if (sme != null)
                                        {
                                            if (sme is File f)
                                                ManufacturerLogo[count] = f.Value;
                                        }
                                        sme = findeSME(smc: g, idShortPath: "ProductImage", ignore: true);
                                        if (sme != null)
                                        {
                                            if (sme is File f)
                                                ProductImage[count] = f.Value;
                                        }
                                    }
                                }
                            }
                        }
                    }

                }
            }

            if (found)
            {
                count++;
            }
        }
    }

    string getPath(ISubmodelElement sme)
    {
        string path = sme.IdShort;
        var p = sme.Parent;
        while (p != null && !(p is Submodel))
        {
            path = (p as ISubmodelElement).IdShort + "." + path;
            p = (p as ISubmodelElement).Parent;
        }
        if (p == null)
            return null;

        var idEncoded = Base64UrlEncoder.Encode((p as Submodel).Id);
        path = Program.externalBlazor + "/submodels/" + idEncoded + "/submodel-elements/" + path + "/attachment";
        return path;
    }

    ISubmodelElement findeSME(ISubmodel sm = null, ISubmodelElementCollection smc = null, string idShortPath = null,
        bool ignore = false, bool contains = false)
    {
        if (idShortPath == null)
            return null;
        var path = idShortPath.Split(".");

        int level = 0;
        List<ISubmodelElement>[] levelSMEs = new List<ISubmodelElement>[path.Length];
        int[] iLevel = new int[path.Length];
        iLevel[0] = 0;

        if (sm != null)
        {
            levelSMEs[0] = sm.SubmodelElements;
        }
        else if (smc != null)
        {
            levelSMEs[0] = smc.Value;
        }
        else
            return null;

        while (level >= 0 && level < path.Length && levelSMEs[level] != null && levelSMEs[level].Count != 0)
        {
            while (level >= 0 && iLevel[level] < levelSMEs[level].Count)
            {
                ISubmodelElement sme = levelSMEs[level][iLevel[level]];
                string id1 = sme.IdShort;
                string id2 = path[level];
                if (ignore)
                {
                    id1 = id1.ToLower();
                    id2 = id2.ToLower();
                }
                if (id1 == id2 || (contains && id1.Contains(id2)))
                {
                    if (level == path.Count() - 1)
                        return sme;
                    if (sme is SubmodelElementCollection smc2)
                    {
                        iLevel[level]++;
                        levelSMEs[level + 1] = smc2.Value;
                        iLevel[level + 1] = 0;
                        level++;
                        continue;
                    }
                }
                iLevel[level]++;
                while (level >= 0 && iLevel[level] == levelSMEs[level].Count)
                {
                    level--;
                }
            }
        }

        return null;
    }

    ISubmodelElement findeSMEValue(ISubmodel sm = null, ISubmodelElementCollection smc = null, string value = null)
    {
        if (value == null)
            return null;

        int level = 0;
        List<List<ISubmodelElement>> levelSMEs = new List<List<ISubmodelElement>>();
        List<int> iLevel = new List<int>();
        iLevel.Add(0);

        if (sm != null)
        {
            levelSMEs.Add(sm.SubmodelElements);
        }
        else if (smc != null)
        {
            levelSMEs.Add(smc.Value);
        }
        else
            return null;

        while (level >= 0 && levelSMEs[level] != null && levelSMEs[level].Count != 0)
        {
            while (level >= 0 && iLevel[level] < levelSMEs[level].Count)
            {
                ISubmodelElement sme = levelSMEs[level][iLevel[level]];

                if (sme.ValueAsText() == value)
                    return sme;
                if (sme is SubmodelElementCollection smc2)
                {
                    iLevel[level]++;
                    levelSMEs.Add(smc2.Value);
                    iLevel.Add(0);
                    level++;
                    continue;
                }
                iLevel[level]++;
                while (level >= 0 && iLevel[level] == levelSMEs[level].Count)
                {
                    levelSMEs.RemoveAt(level);
                    iLevel.RemoveAt(level);
                    level--;
                }
            }
        }

        return null;
    }

    public static string createDetailsImage(int envIndex, string filePath, out bool svg)
    {
        svg = false;

        if (!string.IsNullOrEmpty(filePath))
        {
            string[] split = filePath.Split(new Char[] { '/' });
            if (split.Length == 2 || split.Length > 1 && split[1].ToLower() == "aasx")
            {
                split = filePath.Split(new Char[] { '.' });
                switch (split.Last().ToLower())
                {
                    case "jpg":
                    case "bmp":
                    case "png":
                    case "svg":
                        try
                        {
                            using (System.IO.Stream s = Program.env[envIndex].GetLocalStreamFromPackage(filePath))
                            {
                                if (s != null)
                                {
                                    using (var m = new System.IO.MemoryStream())
                                    {
                                        if (split.Last().ToLower() == "svg")
                                        {
                                            svg = true;
                                        }
                                        s.CopyTo(m);
                                        return System.Convert.ToBase64String(m.ToArray());
                                    }
                                }
                            }
                        }
                        catch { }
                        break;
                }
            }
        }

        return "";
    }

    protected override void OnInitialized()
    {
        SubmodelService.NewDataAvailable += NewData;
    }

    public void Dispose()
    {
        SubmodelService.NewDataAvailable -= NewData;
    }

    void NewData(object source, EventArgs args)
    {
        if (Program.isLoading)
            return;

        if (args is Program.NewDataAvailableArgs newArgs)
        {
            lock (lockNewDataMode)
            {
                if (newDataMode == 0)
                    newDataMode = newArgs.signalNewDataMode;
            }
            InvokeAsync(() => this.StateHasChanged());
        }
    }
}
