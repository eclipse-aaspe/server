<!--*******************************************************************************
* Copyright (c) {2024} Contributors to the Eclipse Foundation
*
* See the NOTICE file(s) distributed with this work for additional
* information regarding copyright ownership.
*
* This program and the accompanying materials are made available under the
* terms of the Apache License Version 2.0 which is available at
* https://www.apache.org/licenses/LICENSE-2.0
*
* SPDX-License-Identifier: Apache-2.0
*******************************************************************************-->

@*
https://github.com/mwinkler/Blazor.Components/blob/master/LICENSE
*@

@using MW.Blazor
@using AasCore.Aas3_0
@typeparam TNode
@using static TreePage

<div class="uic-tree @(Visible ? "" : "uic-tree--hidden")" style="float:left; padding: 1px; margin: 1px">
    @foreach (var node in Nodes ?? Enumerable.Empty<TNode>())
    {
        var nodeExpanded = ExpandedNodes.Contains(node);
        var nodeSelected = node.Equals(SelectedNode);
        var hasChilds    = HasChildNodes(node);
        var it           = node as Item;
        var itIsAas      = it is {Tag: AssetAdministrationShell};
        var itMargin     = "margin: 0px";
        if (itIsAas)
            itMargin = "margin: 0px; margin-bottom: 3px";

        <div class="row" style="background-color:aliceblue; padding: 0; @itMargin">
            @{
                if (itIsAas)
                {
                    <div class="col" style="max-width:50px;padding:1px;display:flex;justify-content:center;">
                        @{
                            var border = string.Empty;
                            var env    = AasxServer.Program.env[ it.envIndex ];
                            if (env != null && env.getWrite())
                            {
                                border = "border:dotted;border-color:blue;";
                            }

                            var detailsImage = CreateDetailsImage(it, out var url, out var svg);
                            if (!string.IsNullOrEmpty(detailsImage) && !url)
                            {
                                if (!svg)
                                {
                                    <img style="max-height:50px;object-fit:contain;@border" alt="Details Image"
                                         src=data:image;base64,@detailsImage/>
                                }
                                else
                                {
                                    <img style="max-height:50px;object-fit:contain;@border" alt="Details Image"
                                         src=data:image/svg+xml;base64,@detailsImage/>
                                }
                            }
                        }
                    </div>
                }
            }
            <div class="col" style="width:100%;float:left;vertical-align:central">
                @if (hasChilds)
                {
                    var iconId = string.Empty;
                    if (AasxServer.Program.htmlId)
                        iconId = $"{HtmlId(it)}._icon";
                    <span class="uic-tree__icon" @onclick="@(() => OnToggleNode(node, !nodeExpanded))" id="@iconId">
                        <i class="@(nodeExpanded ? Style.CollapseNodeIconClass : Style.ExpandNodeIconClass)"></i>
                    </span>
                }

                <div class="uic-tree__title" style="width:100%">
                    @{
                        var titleId = string.Empty;
                        if (AasxServer.Program.htmlId)
                            titleId = $"{HtmlId(node as Item)}._title";
                        <span class="@Style.NodeTitleClass @(nodeSelected ? Style.NodeTitleSelectedClass : "")" @onclick="@(() => OnSelectNode(node))" id="@titleId">
                            @TitleTemplate(node)
                        </span>
                    }
                </div>

                @if (hasChilds)
                {
                    if (nodeExpanded)
                    {
                        <Tree Nodes="ChildSelector(node)"
                              TitleTemplate="TitleTemplate"
                              ChildSelector="ChildSelector"
                              ExpandedNodes="ExpandedNodes"
                              ExpandedNodesChanged="ExpandedNodesChanged"
                              SelectedNode="SelectedNode"
                              SelectedNodeChanged="SelectedNodeChanged"
                              Visible="nodeExpanded"
                              HasChildNodes="HasChildNodes"
                              HtmlId="HtmlId"/>
                    }
                }
            </div>
        </div>
    }

</div>

@code {

    [ Parameter ] public IEnumerable<TNode> Nodes { get; set; }

    [ Parameter ] public RenderFragment<TNode> TitleTemplate { get; set; }

    [ Parameter ] public TNode                SelectedNode        { get; set; }
    [ Parameter ] public EventCallback<TNode> SelectedNodeChanged { get; set; }

    [ Parameter ] public Func<TNode, IEnumerable<TNode>> ChildSelector { get; set; }

    [ Parameter ] public IList<TNode>                ExpandedNodes        { get; set; } = new List<TNode>();
    [ Parameter ] public EventCallback<IList<TNode>> ExpandedNodesChanged { get; set; }

    [ Parameter ] public TreeStyle Style { get; set; } = TreeStyle.Bootstrap;

    [ Parameter ] public bool Visible { get; set; } = true;

    [ Parameter ] public Func<TNode, bool> HasChildNodes { get; set; } = _ => true;

    [ Parameter ] public Func<Item, string> HtmlId { get; set; } = _ => string.Empty;

    private void OnToggleNode(TNode node, bool expand)
    {
        var expanded = ExpandedNodes.Contains(node);

        switch (expanded)
        {
            case true when !expand:
                ExpandedNodes.Remove(node);
                ExpandedNodesChanged.InvokeAsync(ExpandedNodes);
                break;
            case false when expand:
                ExpandedNodes.Add(node);
                ExpandedNodesChanged.InvokeAsync(ExpandedNodes);
                break;
        }
    }

    private void OnSelectNode(TNode node)
    {
        SelectedNode = node;
        SelectedNodeChanged.InvokeAsync(node);
    }

}