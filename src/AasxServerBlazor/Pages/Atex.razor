<!--*******************************************************************************
* Copyright (c) {2024} Contributors to the Eclipse Foundation
*
* See the NOTICE file(s) distributed with this work for additional
* information regarding copyright ownership.
*
* This program and the accompanying materials are made available under the
* terms of the Apache License Version 2.0 which is available at
* https://www.apache.org/licenses/LICENSE-2.0
*
* SPDX-License-Identifier: Apache-2.0
*******************************************************************************-->

@page "/atex";
@using AasxServer
@using Microsoft.AspNetCore.Html;
@using Microsoft.IdentityModel.Tokens;
@using Extensions;
@using System.Globalization;
@inject Data.AASService SubmodelService
@inject NavigationManager NavMan

<div>
    @{
        collectData();

        for (int p = 0; p < countProject; p++)
        {
            int iOut = -1;
            int iIn = -1;
            for (int i = 0; i < count; i++)
            {
                if (eigensicheresbetriebsmittel[p] == ManufacturerProductType[i])
                    iIn = i;
                if (zugehoerigesbetriebsmittel[p] == ManufacturerProductType[i])
                    iOut = i;
            }
            if (iOut == -1 || iIn == -1)
                continue;

            @* <div style="border-width:5px; border-style: solid; border-color: blue; padding: 6px; border-collapse:separate;border-radius:10px"> *@
            <div class="node mb-2 relative bg-white px-6 pt-4 pb-2 shadow-xl ring-4 ring-gray-900/5 sm:mx-auto sm:rounded-lg sm:px-8">
                <b style="color:blue">@projectName[p] : Proof of intrinsic safety</b>
                <br />

                <div class="node mb-2 relative bg-white px-6 pt-4 pb-2 shadow-xl ring-2 ring-gray-900/5 sm:mx-auto sm:rounded-lg sm:px-8">
                <b>Intrinsically safe apparatus / field device</b><br />
                <table class="table table-bordered table-sm"
                       style="word-wrap:break-word;word-break:break-all;border:solid;border-color:darkgrey;border-collapse:separate;border-radius:10px">
                    <thead>
                        <tr>
                            <th style="word-break:keep-all;width:18%">Designation</th>
                            <th style="word-break:keep-all;width:18%">Type</th>
                            <th style="word-break:keep-all;width:17%">Manufacturer</th>
                            <th style="word-break:keep-all;width:17%">Approval</th>
                            <th style="word-break:keep-all;width:6%">Ui</th>
                            <th style="word-break:keep-all;width:6%">Ii</th>
                            <th style="word-break:keep-all;width:6%">Pi</th>
                            <th style="word-break:keep-all;width:6%">Li</th>
                            <th style="word-break:keep-all;width:6%">Ci</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            for (int i = 0; i < count; i++)
                            {
                                if (i == iIn)
                                {
                                    bool svg = false;
                                    string detailsImage = createDetailsImage(envIndex[i], ProductImage[i], out svg);

                                    <tr>
                                        <td>@ManufacturerProductDesignation[i]</td>
                                        <td>
                                            @ManufacturerProductType[i]
                                            <br>
                                            @Program.env[envIndex[i]].AasEnv.AssetAdministrationShells[0].IdShort
                                            @{
                                                svg = false;
                                                detailsImage = createDetailsImage(envIndex[i], ProductImage[i], out svg);

                                                @if (detailsImage != "")
                                                {
                                                    if (!svg)
                                                    {
                                                        <img style="max-height:100px;object-fit:contain" alt="Details Image"
                                         src=data:image;base64,@detailsImage />
                                                    }
                                                    else
                                                    {
                                                        <img style="max-height:100px;object-fit:contain" alt="Details Image"
                                         src=data:image/svg+xml;base64,@detailsImage />
                                                    }
                                                }
                                            }
                                        </td>
                                        <td>
                                            @ManufacturerName[i]
                                            @{
                                                svg = false;
                                                detailsImage = createDetailsImage(envIndex[i], ManufacturerLogo[i], out svg);

                                                @if (detailsImage != "")
                                                {
                                                    if (!svg)
                                                    {
                                                        <img style="max-height:50px;object-fit:contain" alt="Details Image"
                                         src=data:image;base64,@detailsImage />
                                                    }
                                                    else
                                                    {
                                                        <img style="max-height:50px;object-fit:contain" alt="Details Image"
                                         src=data:image/svg+xml;base64,@detailsImage />
                                                    }
                                                }
                                            }
                                        </td>
                                        <td>
                                            @TypeOfApproval[i]
                                            @* @DesignationOfCertificateOrApproval[i] *@
                                            @{
                                                svg = false;
                                                // detailsImage = CreateDetailsImage(envIndex[i], PreviewFile[i], out svg);
                                                detailsImage = "";

                                                if (PreviewFileUrl[i] != "")
                                                {
                                                    <br>
                                                    @if (detailsImage != "")
                                                    {
                                                        if (!svg)
                                                        {
                                                            <a href="@PreviewFileUrl[i]" target="_blank">
                                                                <img style="max-height:100px;object-fit:contain" alt="Details Image"
                                             src=data:image;base64,@detailsImage />
                                                            </a>
                                                        }
                                                        else
                                                        {
                                                            <a href="@PreviewFileUrl[i]" target="_blank">
                                                                <img style="max-height:100px;object-fit:contain" alt="Details Image"
                                             src=data:image/svg+xml;base64,@detailsImage />
                                                            </a>
                                                        }
                                                    }
                                                    else
                                                    {
                                                        <a href="@PreviewFileUrl[i]" target="_blank">link</a>
                                                    }
                                                }
                                            }
                                        </td>
                                        <td>@U[i].ToString(CultureInfo.InvariantCulture) V</td>
                                        <td>@I[i].ToString(CultureInfo.InvariantCulture) mA</td>
                                        <td>@P[i].ToString(CultureInfo.InvariantCulture) mW</td>
                                        <td>@L[i].ToString(CultureInfo.InvariantCulture) mH</td>
                                        <td>@C[i].ToString(CultureInfo.InvariantCulture) nF</td>
                                    </tr>
                                }
                            }
                        }
                    </tbody>
                </table>
                </div>

                @{
                    double cl = cableLength[p];
                    if (inputLength[iOut] == Double.MinValue)
                        inputLength[iOut] = cl;
                    else
                        cl = inputLength[iOut];
                    double Lc = cl / 1000.0 * 1;
                    double Cc = cl / 1000.0 * 110;
                    // 0,5 * Lo >= Li + Lc => 0,5 * Lo >= Li + cl / 1000 => clMax = (0,5 * Lo - Li) * 1000;
                    double clMax1 = (0.5 * L[iOut] - L[iIn]) * 1000;
                    // 0,5 * Co >= Ci + Cc => 0,5 * Co >= Ci + cl * 0.11 => clMax = (0,5 * Co - Ci) / 0.11;
                    double clMax2 = (0.5 * C[iOut] - C[iIn]) / 0.11;
                    if (clMax2 < clMax1)
                        clMax1 = clMax2;
                    if (clMax1 < 0)
                        clMax1 = 0;
                    else
                        clMax1 = Math.Round(clMax1, 0, MidpointRounding.AwayFromZero);
                    string color = "red";

                    <div class="node mb-2 relative bg-white px-6 pt-4 pb-2 shadow-xl ring-2 ring-gray-900/5 sm:mx-auto sm:rounded-lg sm:px-8">
                    <span>
                        <b>
                            Cable length:
                        <input @bind="inputLength[iOut]"
                           style="width:100px;border-width:1px;border-color:darkgrey;border-collapse:separate;border-radius:10px;padding:5px" /> m
                        </b>
                        @* cl.ToString(CultureInfo.InvariantCulture) *@
                        <b> => Lc = @Lc.ToString(CultureInfo.InvariantCulture) mH </b>
                        (1 mH/km),
                        <b>Cc = @Cc.ToString(CultureInfo.InvariantCulture) nF</b>
                        (110 nF/km)
                    </span>
                    <span style="color:red">(Maximum cable length: @clMax1 m)</span>
                    </div>

                    <div class="node mb-2 relative bg-white px-6 pt-4 pb-2 shadow-xl ring-2 ring-gray-900/5 sm:mx-auto sm:rounded-lg sm:px-8">
                    <table class="table table-bordered table-sm"
                           style="word-wrap:break-word;word-break:break-all;border:solid;border-color:darkgrey;border-collapse:separate;border-radius:10px">
                        <tr>
                            <td style="word-break:keep-all;width:70%">Rules for intrinsic safety</td>
                            <td style="word-break:keep-all;width:6%">
                                <b>
                                    @("Uo <= Ui")<br />
                                </b>
                            </td>
                            <td style="word-break:keep-all;width:6%">
                                <b>
                                    @("Io <= Ii")<br />
                                </b>
                            </td>
                            <td style="word-break:keep-all;width:6%">
                                <b>
                                    @("Po <= Pi")<br />
                                </b>
                            </td>
                            <td style="word-break:keep-all;width:6%">
                                <b>
                                    0,5 * Lo >=<br>Li + Lc<br>
                                </b>
                            </td>
                            <td style="word-break:keep-all;width:6%">
                                <b>
                                    0,5 Co >=<br>Ci + Cc<br />
                                </b>
                            </td>
                        </tr>
                    </table>
                    </div>

                    if (inputLength[iOut] != Double.MinValue && inputLength[iOut] != cableLength[p])
                    {
                        cableLength[p] = inputLength[iOut];
                        // pCableLength[p].Value = inputLength[iOut].ToString(CultureInfo.InvariantCulture);
                        // Program.signalNewData(1);
                    }
                }

                <div class="node mb-2 relative bg-white px-6 pt-4 pb-2 shadow-xl ring-2 ring-gray-900/5 sm:mx-auto sm:rounded-lg sm:px-8">
                <b>Associated apparatus</b><br>
                Alternatives:
                    <input @bind="Alternatives[iOut]"
                   style="width:300px;border-width:1px;border-color:darkgrey;border-collapse:separate;border-radius:10px;padding:5px" />

                <table class="table table-bordered table-sm"
                   style="word-wrap:break-word;word-break:break-all;border:solid;border-color:darkgrey;border-collapse:separate;border-radius:10px">
                    <thead>
                        <tr>
                            <th style="word-break:keep-all;width:18%">Designation</th>
                            <th style="word-break:keep-all;width:18%">Type</th>
                            <th style="word-break:keep-all;width:17%">Manufacturer</th>
                            <th style="word-break:keep-all;width:17%">Approval</th>
                            <th style="word-break:keep-all;width:6%">Uo</th>
                            <th style="word-break:keep-all;width:6%">Io</th>
                            <th style="word-break:keep-all;width:6%">Po</th>
                            <th style="word-break:keep-all;width:6%">Lo</th>
                            <th style="word-break:keep-all;width:6%">Co</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            for (int i = 0; i < count; i++)
                            {
                                bool show = (i == iOut);

                                string idShort = @Program.env[envIndex[i]].AasEnv.AssetAdministrationShells[0].IdShort;
                                if (Alternatives[iOut] != "" && idShort.Contains(Alternatives[iOut]))
                                {
                                    show = true;
                                }

                                if (show)
                                {
                                    <tr>
                                        <td>@ManufacturerProductDesignation[i]</td>
                                        <td>
                                            @if (i == iOut)
                                            {
                                                <b>
                                                    @ManufacturerProductType[i]
                                                </b>
                                            }
                                            else
                                            {
                                                <span>
                                                    @ManufacturerProductType[i]
                                                </span>
                                            }
                                            <br>
                                            @Program.env[envIndex[i]].AasEnv.AssetAdministrationShells[0].IdShort
                                            @{
                                                bool svg = false;
                                                string detailsImage = createDetailsImage(envIndex[i], ProductImage[i], out svg);

                                                @if (detailsImage != "")
                                                {
                                                    if (!svg)
                                                    {
                                                        <img style="max-height:100px;object-fit:contain" alt="Details Image"
                                         src=data:image;base64,@detailsImage />
                                                    }
                                                    else
                                                    {
                                                        <img style="max-height:100px;object-fit:contain" alt="Details Image"
                                         src=data:image/svg+xml;base64,@detailsImage />
                                                    }
                                                }
                                            }
                                        </td>
                                        <td>
                                            @ManufacturerName[i]
                                            @{
                                                svg = false;
                                                detailsImage = createDetailsImage(envIndex[i], ManufacturerLogo[i], out svg);

                                                @if (detailsImage != "")
                                                {
                                                    if (!svg)
                                                    {
                                                        <img style="max-height:50px;object-fit:contain" alt="Details Image"
                                         src=data:image;base64,@detailsImage />
                                                    }
                                                    else
                                                    {
                                                        <img style="max-height:50px;object-fit:contain" alt="Details Image"
                                         src=data:image/svg+xml;base64,@detailsImage />
                                                    }
                                                }
                                            }
                                        </td>
                                        <td>
                                            @TypeOfApproval[i]
                                            @* @DesignationOfCertificateOrApproval[i] *@
                                            @{
                                                svg = false;
                                                detailsImage = createDetailsImage(envIndex[i], PreviewFile[i], out svg);
                                                detailsImage = "";

                                                if (PreviewFileUrl[i] != "")
                                                {
                                                    <br />
                                                    @if (detailsImage != "")
                                                    {
                                                        if (!svg)
                                                        {
                                                            <a href="@PreviewFileUrl[i]" target="_blank">
                                                                <img style="max-height:100px;object-fit:contain" alt="Details Image"
                                             src=data:image;base64,@detailsImage />
                                                            </a>
                                                        }
                                                        else
                                                        {
                                                            <a href="@PreviewFileUrl[i]" target="_blank">
                                                                <img style="max-height:100px;object-fit:contain" alt="Details Image"
                                             src=data:image/svg+xml;base64,@detailsImage />
                                                            </a>
                                                        }
                                                    }
                                                    else
                                                    {
                                                        <a href="@PreviewFileUrl[i]" target="_blank">link</a>
                                                    }
                                                }

                                            }
                                        </td>
                                        @{
                                            color = "red";
                                            @if (U[i] <= U[iIn]) color = "green";
                                        }
                                        <td>
                                            @U[i].ToString(CultureInfo.InvariantCulture) V
                                            <br><br>
                                            <span style="word-break:keep-all;color:@color;">
                                                <b>
                                                    @("Uo <= Ui:")<br />
                                                    @(U[i].ToString(CultureInfo.InvariantCulture) + " V <= " + U[iIn].ToString(CultureInfo.InvariantCulture) + " V")
                                                </b>
                                            </span>
                                        </td>
                                        @{
                                            color = "red";
                                            if (I[i] <= I[iIn]) color = "green";
                                        }
                                        <td>
                                            @I[i].ToString(CultureInfo.InvariantCulture) mA
                                            <br><br>
                                            <span style="word-break:keep-all;color:@color;">
                                                <b>
                                                    @("Io <= Ii:")<br />
                                                    @(I[i].ToString(CultureInfo.InvariantCulture) + " mA <= " + I[iIn].ToString(CultureInfo.InvariantCulture) + " mA")
                                                </b>
                                            </span>
                                        </td>
                                        @{
                                            color = "red";
                                            if (P[i] <= P[iIn]) color = "green";
                                        }
                                        <td>
                                            @P[i].ToString(CultureInfo.InvariantCulture) mW
                                            <br><br>
                                            <span style="word-break:keep-all;color:@color;">
                                                <b>
                                                    @("Po <= Pi:")<br />
                                                    @(P[i].ToString(CultureInfo.InvariantCulture) + " mW <= " + P[iIn].ToString(CultureInfo.InvariantCulture) + " mW")
                                                </b>
                                            </span>
                                        </td>
                                        @{
                                            color = "red";
                                            if (0.5 * L[i] >= L[iIn] + Lc) color = "green";
                                        }
                                        <td>
                                            @L[i].ToString(CultureInfo.InvariantCulture) mH
                                            <br><br>
                                            <span style="word-break:keep-all;color:@color;">
                                                <b>
                                                    0,5 * Lo >= Li + Lc:<br>
                                                    0,5 * @L[i].ToString(CultureInfo.InvariantCulture) mH >= @L[iIn].ToString(CultureInfo.InvariantCulture)
                                                    + @Math.Round(Lc, 3, MidpointRounding.AwayFromZero).ToString(CultureInfo.InvariantCulture) mH
                                                </b>
                                            </span>
                                        </td>
                                        @{
                                            color = "red";
                                            if (0.5 * C[i] >= C[iIn] + Cc) color = "green";
                                        }
                                        <td>
                                            @C[i].ToString(CultureInfo.InvariantCulture) nF
                                            <br><br>
                                            <span style="word-break:keep-all;color:@color;">
                                                <b>
                                                    0,5 Co >= Ci + Cc:<br />
                                                    0,5 * @C[i].ToString(CultureInfo.InvariantCulture) nF >= @C[iIn].ToString(CultureInfo.InvariantCulture)
                                                    + @Math.Round(Cc, 3, MidpointRounding.AwayFromZero).ToString(CultureInfo.InvariantCulture) nF
                                                </b>
                                            </span>
                                        </td>
                                    </tr>
                                }
                            }
                        }
                    </tbody>
                </table>
                </div>
            </div>
            <br />
            <br />
        }

        <b>All associated apparatus</b>

        <br>
        <table class="table table-bordered table-sm"
               style="word-wrap:break-word;word-break:break-all;border:solid;border-color:darkgrey;border-collapse:separate;border-radius:10px">
            <thead>
                <tr>
                    <th style="word-break:keep-all;width:18%">Designation</th>
                    <th style="word-break:keep-all;width:18%">Type</th>
                    <th style="word-break:keep-all;width:17%">Manufacturer</th>
                    <th style="word-break:keep-all;width:17%">Approval</th>
                    <th style="word-break:keep-all;width:6%">Uo</th>
                    <th style="word-break:keep-all;width:6%">Io</th>
                    <th style="word-break:keep-all;width:6%">Po</th>
                    <th style="word-break:keep-all;width:6%">Lo</th>
                    <th style="word-break:keep-all;width:6%">Co</th>
                </tr>
            </thead>
            <tbody>
                @{
                    for (int i = 0; i < count; i++)
                    {
                        if (isOutput[i])
                        {
                            <tr>
                                <td>@ManufacturerProductDesignation[i]</td>
                                <td>
                                    @ManufacturerProductType[i]
                                    <br>
                                    @Program.env[envIndex[i]].AasEnv.AssetAdministrationShells[0].IdShort
                                    @{
                                        bool svg = false;
                                        string detailsImage = createDetailsImage(envIndex[i], ProductImage[i], out svg);

                                        @if (detailsImage != "")
                                        {
                                            if (!svg)
                                            {
                                                <img style="max-height:100px;object-fit:contain" alt="Details Image"
                                     src=data:image;base64,@detailsImage />
                                            }
                                            else
                                            {
                                                <img style="max-height:100px;object-fit:contain" alt="Details Image"
                                     src=data:image/svg+xml;base64,@detailsImage />
                                            }
                                        }
                                    }
                                </td>
                                <td>
                                    @ManufacturerName[i]
                                    @{
                                        svg = false;
                                        detailsImage = createDetailsImage(envIndex[i], ManufacturerLogo[i], out svg);

                                        @if (detailsImage != "")
                                        {
                                            if (!svg)
                                            {
                                                <img style="max-height:50px;object-fit:contain" alt="Details Image"
                                     src=data:image;base64,@detailsImage />
                                            }
                                            else
                                            {
                                                <img style="max-height:50px;object-fit:contain" alt="Details Image"
                                     src=data:image/svg+xml;base64,@detailsImage />
                                            }
                                        }
                                    }
                                </td>
                                <td>
                                    @TypeOfApproval[i]
                                    @* @DesignationOfCertificateOrApproval[i] *@
                                    @{
                                        svg = false;
                                        detailsImage = createDetailsImage(envIndex[i], PreviewFile[i], out svg);
                                        detailsImage = "";

                                        if (PreviewFileUrl[i] != "")
                                        {
                                            <br />
                                            @if (detailsImage != "")
                                            {
                                                if (!svg)
                                                {
                                                    <a href="@PreviewFileUrl[i]" target="_blank">
                                                        <img style="max-height:100px;object-fit:contain" alt="Details Image"
                                         src=data:image;base64,@detailsImage />
                                                    </a>
                                                }
                                                else
                                                {
                                                    <a href="@PreviewFileUrl[i]" target="_blank">
                                                        <img style="max-height:100px;object-fit:contain" alt="Details Image"
                                         src=data:image/svg+xml;base64,@detailsImage />
                                                    </a>
                                                }
                                            }
                                            else
                                            {
                                                <a href="@PreviewFileUrl[i]" target="_blank">link</a>
                                            }
                                        }
                                    }
                                </td>
                                <td>@U[i].ToString(CultureInfo.InvariantCulture) V</td>
                                <td>@I[i].ToString(CultureInfo.InvariantCulture) mA</td>
                                <td>@P[i].ToString(CultureInfo.InvariantCulture) mW</td>
                                <td>@L[i].ToString(CultureInfo.InvariantCulture) mH</td>
                                <td>@C[i].ToString(CultureInfo.InvariantCulture) nF</td>
                            </tr>
                        }
                    }
                }
            </tbody>
        </table>
        <br />
        <br />
    }
</div>

@code
{
    int countProject = 0;
    List<SubmodelElementCollection> project = null;
    List<string> projectName = null;
    List<double> cableLength = null;
    List<Property> pCableLength = null;
    List<string> eigensicheresbetriebsmittel = null;
    List<string> zugehoerigesbetriebsmittel = null;

    int count = 0;
    List<bool> isOutput = null;
    List<int> envIndex = null;
    List<Submodel> Nameplate = null;
    List<Submodel> TechnicalData = null;
    List<string> ManufacturerProductDesignation = null;
    List<string> ManufacturerProductType = null;
    List<string> ManufacturerName = null;
    List<string> ManufacturerLogo = null;
    List<string> ProductImage = null;
    List<string> DesignationOfCertificateOrApproval = null;
    List<string> PreviewFile = null;
    List<string> PreviewFileUrl = null;
    List<string> TypeOfApproval = null;
    List<SubmodelElementCollection> SafetyRelatedPropertiesForActiveBehaviour = null;
    List<SubmodelElementCollection> SafetyRelatedPropertiesForPassiveBehaviour = null;
    List<Double> U = null;
    List<Double> I = null;
    List<Double> P = null;
    List<Double> L = null;
    List<Double> C = null;
    List<string> Alternatives = null;
    List<Double> inputLength = null;

    void collectData()
    {
        countProject = 0;
        project = new List<SubmodelElementCollection>();
        projectName = new List<string>();
        cableLength = new List<double>();
        pCableLength = new List<Property>();
        eigensicheresbetriebsmittel = new List<string>();
        zugehoerigesbetriebsmittel = new List<string>();

        count = 0;
        isOutput = new List<bool>();
        envIndex = new List<int>();
        Nameplate = new List<Submodel>();
        TechnicalData = new List<Submodel>();
        ManufacturerProductDesignation = new List<string>();
        ManufacturerProductType = new List<string>();
        ManufacturerName = new List<string>();
        ManufacturerLogo = new List<string>();
        ProductImage = new List<string>();
        DesignationOfCertificateOrApproval = new List<string>();
        PreviewFile = new List<string>();
        PreviewFileUrl = new List<string>();
        TypeOfApproval = new List<string>();
        SafetyRelatedPropertiesForActiveBehaviour = new List<SubmodelElementCollection>();
        SafetyRelatedPropertiesForPassiveBehaviour = new List<SubmodelElementCollection>();
        U = new List<double>();
        I = new List<double>();
        P = new List<double>();
        L = new List<double>();
        C = new List<double>();
        if (Alternatives == null)
            Alternatives = new List<string>();
        if (inputLength == null)
            inputLength = new List<Double>();

        int aascount = AasxServer.Program.env.Length;

        for (int i = 0; i < aascount; i++)
        {
            var env = AasxServer.Program.env[i];
            if (env != null)
            {
                var aas = env.AasEnv.AssetAdministrationShells[0];

                if (aas.Submodels != null && aas.Submodels.Count > 0)
                {
                    foreach (var smr in aas.Submodels)
                    {
                        var sm = env.AasEnv.FindSubmodel(smr);
                        {
                            if (sm != null && sm.IdShort != null)
                            {
                                if ((sm.IdShort.ToLower() == "nachweiseigensicherheit" || sm.IdShort.ToLower() == "proofofintrinsicsafety") && sm.SubmodelElements != null)
                                {
                                    foreach (var s in sm.SubmodelElements)
                                    {
                                        if (s.IdShort.ToLower().Contains("projekt") || s.IdShort.ToLower().Contains("loop"))
                                        {
                                            if (s != null && s is SubmodelElementCollection smc)
                                            {
                                                project.Add(s as SubmodelElementCollection);
                                                projectName.Add("");
                                                cableLength.Add(0);
                                                pCableLength.Add(null);
                                                eigensicheresbetriebsmittel.Add("");
                                                zugehoerigesbetriebsmittel.Add("");

                                                var sme = findeSME(smc: project[countProject], idShortPath: "projektbezeichnung", ignore: true);
                                                if (sme != null)
                                                    projectName[countProject] = sme.ValueAsText();
                                                sme = findeSME(smc: project[countProject], idShortPath: "projectname", ignore: true);
                                                if (sme != null)
                                                    projectName[countProject] = sme.ValueAsText();
                                                sme = findeSME(smc: project[countProject], idShortPath: "eigensicheresbetriebsmittel", ignore: true);
                                                if (sme != null)
                                                    eigensicheresbetriebsmittel[countProject] = sme.ValueAsText();
                                                sme = findeSME(smc: project[countProject], idShortPath: "intrinsicallysafeapparatus", ignore: true);
                                                if (sme != null)
                                                    eigensicheresbetriebsmittel[countProject] = sme.ValueAsText();
                                                sme = findeSME(smc: project[countProject], idShortPath: "zugehoerigesbetriebsmittel", ignore: true);
                                                if (sme != null)
                                                    zugehoerigesbetriebsmittel[countProject] = sme.ValueAsText();
                                                sme = findeSME(smc: project[countProject], idShortPath: "associatedapparatus", ignore: true);
                                                if (sme != null)
                                                    zugehoerigesbetriebsmittel[countProject] = sme.ValueAsText();
                                                sme = findeSME(smc: project[countProject], idShortPath: "leitungslaenge", ignore: true);
                                                if (sme != null)
                                                {
                                                    try
                                                    {
                                                        cableLength[countProject] = Convert.ToDouble(sme.ValueAsText(), CultureInfo.InvariantCulture);
                                                        pCableLength[countProject] = sme as Property;
                                                    }
                                                    catch { }
                                                }
                                                sme = findeSME(smc: project[countProject], idShortPath: "cablelength", ignore: true);
                                                if (sme != null)
                                                {
                                                    try
                                                    {
                                                        cableLength[countProject] = Convert.ToDouble(sme.ValueAsText(), CultureInfo.InvariantCulture);
                                                        pCableLength[countProject] = sme as Property;
                                                    }
                                                    catch { }
                                                }
                                                countProject++;
                                            }
                                        }
                                    }
                                }
                                if (sm.IdShort.ToLower() == "nameplate")
                                {
                                    isOutput.Add(false);
                                    envIndex.Add(i);
                                    Nameplate.Add(sm as Submodel);
                                    ManufacturerProductDesignation.Add("");
                                    ManufacturerProductType.Add("");
                                    ManufacturerName.Add("");
                                    DesignationOfCertificateOrApproval.Add("");
                                    PreviewFile.Add("");
                                    PreviewFileUrl.Add("");
                                    TypeOfApproval.Add("");
                                    SafetyRelatedPropertiesForActiveBehaviour.Add(null);
                                    SafetyRelatedPropertiesForPassiveBehaviour.Add(null);
                                    U.Add(0);
                                    I.Add(0);
                                    P.Add(0);
                                    L.Add(0);
                                    C.Add(0);
                                    if (C.Count > Alternatives.Count)
                                        Alternatives.Add("");
                                    if (C.Count > inputLength.Count)
                                        inputLength.Add(Double.MinValue);

                                    var sme = findeSME(sm: sm, idShortPath: "ManufacturerProductDesignation", ignore: true);
                                    if (sme != null)
                                    {
                                        if (sme is Property p)
                                            ManufacturerProductDesignation[count] = p.Value;
                                        if (sme is MultiLanguageProperty mlp && mlp.Value != null && mlp.Value.Count > 0)
                                        {
                                            ManufacturerProductDesignation[count] = mlp.Value[0].Text;
                                        }
                                    }

                                    sme = findeSME(sm: sm, idShortPath: "ManufacturerProductType", ignore: true);
                                    if (sme != null)
                                    {
                                        if (sme is Property p)
                                            ManufacturerProductType[count] = p.Value;
                                        if (sme is MultiLanguageProperty mlp && mlp.Value != null && mlp.Value.Count > 0)
                                        {
                                            ManufacturerProductType[count] = mlp.Value[0].Text;
                                        }
                                    }

                                    sme = findeSME(sm: sm, idShortPath: "ManufacturerName", ignore: true);
                                    if (sme != null)
                                    {
                                        if (sme is Property p)
                                            ManufacturerName[count] = p.Value;
                                        if (sme is MultiLanguageProperty mlp && mlp.Value != null && mlp.Value.Count > 0)
                                        {
                                            ManufacturerName[count] = mlp.Value[0].Text;
                                        }
                                    }

                                    sme = findeSME(sm: sm,
                                        idShortPath: "Markings.Marking.ExplosionSafeties.ExplosionSafety",
                                        ignore: true, contains: true);
                                    if (sme != null)
                                    {
                                        var s = sme as SubmodelElementCollection;

                                        sme = findeSME(smc: s, idShortPath: "DesignationOfCertificateOrApproval", ignore: true);
                                        if (sme != null)
                                        {
                                            if (sme is Property p)
                                                DesignationOfCertificateOrApproval[count] = p.Value;
                                            if (sme is MultiLanguageProperty mlp && mlp.Value != null && mlp.Value.Count > 0)
                                            {
                                                DesignationOfCertificateOrApproval[count] = mlp.Value[0].Text;
                                            }
                                        }

                                        sme = findeSME(smc: s, idShortPath: "PreviewFile", ignore: true);
                                        if (sme != null)
                                        {
                                            if (sme is File f)
                                            {
                                                PreviewFile[count] = f.Value;
                                            }
                                        }

                                        sme = findeSME(smc: s, idShortPath: "TypeOfApproval", ignore: true);
                                        if (sme != null)
                                        {
                                            if (sme is Property p)
                                                TypeOfApproval[count] = p.Value;
                                            if (sme is MultiLanguageProperty mlp && mlp.Value != null && mlp.Value.Count > 0)
                                            {
                                                TypeOfApproval[count] = mlp.Value[0].Text;
                                            }
                                        }
                                    }

                                    sme = findeSME(sm: sm,
                                        idShortPath: "Markings.Marking.ExplosionSafeties.ExplosionSafety.ExternalElectricalCircuit.SafetyRelatedPropertiesForActiveBehaviour",
                                        ignore: true, contains: true);
                                    if (sme != null)
                                    {
                                        var s = sme as SubmodelElementCollection;
                                        isOutput[count] = true;
                                        SafetyRelatedPropertiesForActiveBehaviour[count] = s;

                                        sme = findeSME(smc: s, idShortPath: "MaxOutputPower", ignore: true);
                                        if (sme != null)
                                        {
                                            if (sme is Property p)
                                            {
                                                try
                                                {
                                                    P[count] = Convert.ToDouble(p.Value, CultureInfo.InvariantCulture);
                                                }
                                                catch { }
                                            }
                                        }

                                        sme = findeSME(smc: s, idShortPath: "MaxOutputVoltage", ignore: true);
                                        if (sme != null)
                                        {
                                            if (sme is Property p)
                                            {
                                                try
                                                {
                                                    U[count] = Convert.ToDouble(p.Value, CultureInfo.InvariantCulture);
                                                }
                                                catch { }
                                            }
                                        }

                                        sme = findeSME(smc: s, idShortPath: "MaxOutputCurrent", ignore: true);
                                        if (sme != null)
                                        {
                                            if (sme is Property p)
                                            {
                                                try
                                                {
                                                    I[count] = Convert.ToDouble(p.Value, CultureInfo.InvariantCulture);
                                                }
                                                catch { }
                                            }
                                        }

                                        sme = findeSME(smc: s, idShortPath: "MaxExternalCapacitance", ignore: true);
                                        if (sme != null)
                                        {
                                            if (sme is Property p)
                                            {
                                                try
                                                {
                                                    string v = p.Value;
                                                    // fix generator bug
                                                    if (v.Contains(" nF"))
                                                        v = v.Replace(" nF", "");
                                                    C[count] = Convert.ToDouble(v, CultureInfo.InvariantCulture);
                                                }
                                                catch { }
                                            }
                                        }

                                        sme = findeSME(smc: s, idShortPath: "MaxExternalInductance", ignore: true);
                                        if (sme != null)
                                        {
                                            if (sme is Property p)
                                            {
                                                try
                                                {
                                                    L[count] = Convert.ToDouble(p.Value, CultureInfo.InvariantCulture);
                                                }
                                                catch { }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        sme = findeSME(sm: sm,
                                            idShortPath: "Markings.Marking.ExplosionSafeties.ExplosionSafety.ExternalElectricalCircuit.SafetyRelatedPropertiesForPassiveBehaviour",
                                            ignore: true, contains: true);
                                        if (sme != null)
                                        {
                                            var s = sme as SubmodelElementCollection;
                                            SafetyRelatedPropertiesForPassiveBehaviour[count] = s as SubmodelElementCollection;

                                            sme = findeSME(smc: s, idShortPath: "MaxInputPower", ignore: true);
                                            if (sme != null)
                                            {
                                                if (sme is Property p)
                                                {
                                                    try
                                                    {
                                                        P[count] = Convert.ToDouble(p.Value, CultureInfo.InvariantCulture);
                                                    }
                                                    catch { }
                                                }
                                            }

                                            sme = findeSME(smc: s, idShortPath: "MaxInputVoltage", ignore: true);
                                            if (sme != null)
                                            {
                                                if (sme is Property p)
                                                {
                                                    try
                                                    {
                                                        U[count] = Convert.ToDouble(p.Value, CultureInfo.InvariantCulture);
                                                    }
                                                    catch { }
                                                }
                                            }

                                            sme = findeSME(smc: s, idShortPath: "MaxInputCurrent", ignore: true);
                                            if (sme != null)
                                            {
                                                if (sme is Property p)
                                                {
                                                    try
                                                    {
                                                        I[count] = Convert.ToDouble(p.Value, CultureInfo.InvariantCulture);
                                                    }
                                                    catch { }
                                                }
                                            }

                                            sme = findeSME(smc: s, idShortPath: "MaxInternalCapacitance", ignore: true);
                                            if (sme != null)
                                            {
                                                if (sme is Property p)
                                                {
                                                    try
                                                    {
                                                        C[count] = Convert.ToDouble(p.Value, CultureInfo.InvariantCulture);
                                                    }
                                                    catch { }
                                                }
                                            }

                                            sme = findeSME(smc: s, idShortPath: "MaxInternalInductance", ignore: true);
                                            if (sme != null)
                                            {
                                                if (sme is Property p)
                                                {
                                                    try
                                                    {
                                                        L[count] = Convert.ToDouble(p.Value, CultureInfo.InvariantCulture);
                                                    }
                                                    catch { }
                                                }
                                            }
                                        }
                                    }
                                }
                                if (sm.IdShort.ToLower() == "handoverdocumentation")
                                {
                                    if (PreviewFile[count] != "")
                                    {
                                        var sme = findeSMEValue(sm: sm, value: PreviewFile[count]);
                                        if (sme != null)
                                        {
                                            var path = getPath(sme);
                                            if (path != null)
                                            {
                                                PreviewFileUrl[count] = path.Replace("PreviewFile", "DigitalFile");
                                            }
                                        }
                                    }
                                    foreach (var se in sm.SubmodelElements)
                                    {
                                        if (se is SubmodelElementCollection smc)
                                        {
                                            var sme = findeSME(smc: smc,
                                                        idShortPath: "DocumentVersion.PreviewFile",
                                                        ignore: true, contains: true);
                                            if (sme != null)
                                            {
                                                if (sme is File f)
                                                {
                                                    if (f.Value.ToLower().Contains("atex"))
                                                    {
                                                        PreviewFile[count] = f.Value;
                                                        var path = getPath(f);
                                                        if (path != null)
                                                        {
                                                            PreviewFileUrl[count] = path.Replace("PreviewFile", "DigitalFile");
                                                        }
                                                        TypeOfApproval[count] = "ATEX";
                                                    }
                                                    if (f.Value.ToLower().Contains("iecex") && TypeOfApproval[count] != "ATEX")
                                                    {
                                                        PreviewFile[count] = f.Value;
                                                        var path = getPath(f);
                                                        if (path != null)
                                                        {
                                                            PreviewFileUrl[count] = path.Replace("PreviewFile", "DigitalFile");
                                                        }
                                                        TypeOfApproval[count] = "IECEX";
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                if (sm.IdShort.ToLower() == "technicaldata")
                                {
                                    TechnicalData.Add(sm as Submodel);
                                    ManufacturerLogo.Add("");
                                    ProductImage.Add("");

                                    var sme = findeSME(sm: sm, idShortPath: "GeneralInformation", ignore: true);
                                    if (sme != null)
                                    {
                                        var g = sme as SubmodelElementCollection;
                                        sme = findeSME(smc: g, idShortPath: "ManufacturerLogo", ignore: true);
                                        if (sme != null)
                                        {
                                            if (sme is File f)
                                                ManufacturerLogo[count] = f.Value;
                                        }
                                        sme = findeSME(smc: g, idShortPath: "ProductImage", ignore: true);
                                        if (sme != null)
                                        {
                                            if (sme is File f)
                                                ProductImage[count] = f.Value;
                                        }
                                    }

                                    count++;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    string getPath(ISubmodelElement sme)
    {
        string path = sme.IdShort;
        var p = sme.Parent;
        while (p != null && !(p is Submodel))
        {
            path = (p as ISubmodelElement).IdShort + "." + path;
            p = (p as ISubmodelElement).Parent;
        }
        if (p == null)
            return null;

        var idEncoded = Base64UrlEncoder.Encode((p as Submodel).Id);
        path = Program.externalBlazor + "/submodels/" + idEncoded + "/submodel-elements/" + path + "/attachment";
        return path;
    }

    ISubmodelElement findeSME(ISubmodel sm = null, ISubmodelElementCollection smc = null, string idShortPath = null,
        bool ignore = false, bool contains = false)
    {
        if (idShortPath == null)
            return null;
        var path = idShortPath.Split(".");

        int level = 0;
        List<ISubmodelElement>[] levelSMEs = new List<ISubmodelElement>[path.Length];
        int[] iLevel = new int[path.Length];
        iLevel[0] = 0;

        if (sm != null)
        {
            levelSMEs[0] = sm.SubmodelElements;
        }
        else if (smc != null)
        {
            levelSMEs[0] = smc.Value;
        }
        else
            return null;

        while (level >= 0 && level < path.Length && levelSMEs[level] != null && levelSMEs[level].Count != 0)
        {
            while (level >= 0 && iLevel[level] < levelSMEs[level].Count)
            {
                ISubmodelElement sme = levelSMEs[level][iLevel[level]];
                string id1 = sme.IdShort;
                string id2 = path[level];
                if (ignore)
                {
                    id1 = id1.ToLower();
                    id2 = id2.ToLower();
                }
                if (id1 == id2 || (contains && id1.Contains(id2)))
                {
                    if (level == path.Count() - 1)
                        return sme;
                    if (sme is SubmodelElementCollection smc2)
                    {
                        iLevel[level]++;
                        levelSMEs[level + 1] = smc2.Value;
                        iLevel[level + 1] = 0;
                        level++;
                        continue;
                    }
                }
                iLevel[level]++;
                while (level >= 0 && iLevel[level] == levelSMEs[level].Count)
                {
                    level--;
                }
            }
        }

        return null;
    }

    ISubmodelElement findeSMEValue(ISubmodel sm = null, ISubmodelElementCollection smc = null, string value = null)
    {
        if (value == null)
            return null;

        int level = 0;
        List<List<ISubmodelElement>> levelSMEs = new List<List<ISubmodelElement>>();
        List<int> iLevel = new List<int>();
        iLevel.Add(0);

        if (sm != null)
        {
            levelSMEs.Add(sm.SubmodelElements);
        }
        else if (smc != null)
        {
            levelSMEs.Add(smc.Value);
        }
        else
            return null;

        while (level >= 0 && levelSMEs[level] != null && levelSMEs[level].Count != 0)
        {
            while (level >= 0 && iLevel[level] < levelSMEs[level].Count)
            {
                ISubmodelElement sme = levelSMEs[level][iLevel[level]];

                if (sme.ValueAsText() == value)
                    return sme;
                if (sme is SubmodelElementCollection smc2)
                {
                    iLevel[level]++;
                    levelSMEs.Add(smc2.Value);
                    iLevel.Add(0);
                    level++;
                    continue;
                }
                iLevel[level]++;
                while (level >= 0 && iLevel[level] == levelSMEs[level].Count)
                {
                    levelSMEs.RemoveAt(level);
                    iLevel.RemoveAt(level);
                    level--;
                }
            }
        }

        return null;
    }

    public static string createDetailsImage(int envIndex, string filePath, out bool svg)
    {
        svg = false;

        if (!string.IsNullOrEmpty(filePath))
        {
            string[] split = filePath.Split(new Char[] { '/' });
            if (split.Length == 2 || split.Length > 1 && split[1].ToLower() == "aasx")
            {
                split = filePath.Split(new Char[] { '.' });
                switch (split.Last().ToLower())
                {
                    case "jpg":
                    case "bmp":
                    case "png":
                    case "svg":
                        try
                        {
                            using (System.IO.Stream s = Program.env[envIndex].GetLocalStreamFromPackage(filePath))
                            {
                                if (s != null)
                                {
                                    using (var m = new System.IO.MemoryStream())
                                    {
                                        if (split.Last().ToLower() == "svg")
                                        {
                                            svg = true;
                                        }
                                        s.CopyTo(m);
                                        return System.Convert.ToBase64String(m.ToArray());
                                    }
                                }
                            }
                        }
                        catch { }
                        break;
                }
            }
        }

        return "";
    }

    protected override void OnInitialized()
    {
        SubmodelService.NewDataAvailable += NewData;
    }

    public void Dispose()
    {
        SubmodelService.NewDataAvailable -= NewData;
    }

    void NewData(object source, EventArgs args)
    {
        if (Program.isLoading)
            return;

        if (args is Program.NewDataAvailableArgs newArgs)
        {
            int newDataMode = newArgs.signalNewDataMode;
            InvokeAsync(() => this.StateHasChanged());
            // InvokeAsync(() => NavMan.NavigateTo(NavMan.Uri, true));
            /*
            if (newDataMode != 0)
            {
                InvokeAsync(() => this.StateHasChanged());
            }
            */
        }
    }
}
