/*
 * DotAAS Part 2 | HTTP/REST | Discovery Service Specification
 *
 * The entire Full Profile of the Discovery Service Specification as part of the [Specification of the Asset Administration Shell: Part 2](http://industrialdigitaltwin.org/en/content-hub).   Publisher: Industrial Digital Twin Association (IDTA) April 2023
 *
 * OpenAPI spec version: V3.0.3_SSP-001
 * Contact: info@idtwin.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

using Microsoft.AspNetCore.Authorization;
using AasRegistryDiscovery.WebApi.Attributes;
using AasRegistryDiscovery.WebApi.Models;
using Microsoft.Extensions.Logging;
using AasRegistryDiscovery.WebApi.Interfaces;
using System.Text.Json.Nodes;
using Microsoft.IdentityModel.Tokens;

namespace AasRegistryDiscovery.WebApi.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class AssetAdministrationShellBasicDiscoveryAPIApiController : ControllerBase
    {
        private readonly ILogger<AssetAdministrationShellBasicDiscoveryAPIApiController> _logger;
        private readonly IBase64UrlDecoderService _decoderService;
        private readonly IPersistenceService _persistenceService;

        public AssetAdministrationShellBasicDiscoveryAPIApiController(
            ILogger<AssetAdministrationShellBasicDiscoveryAPIApiController> logger,
            IBase64UrlDecoderService decoderService,
            IPersistenceService persistenceService)
        {
            _logger = logger;
            _decoderService = decoderService;
            _persistenceService = persistenceService;
        }


        /// <summary>
        /// Deletes all specific Asset identifiers linked to an Asset Administration Shell to edit discoverable content
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <response code="204">Specific Asset identifiers deleted successfully</response>
        /// <response code="404">Not Found</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpDelete]
        [Route("/api/v3.0/lookup/shells/{aasIdentifier}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteAllAssetLinksById")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public virtual IActionResult DeleteAllAssetLinksById([FromRoute][Required]string aasIdentifier)
        {
            var decodedAasId = _decoderService.Decode("aasIdentfier", aasIdentifier);

            _logger.LogInformation($"Received request to get all the AssetIds of the AAS with id {decodedAasId}");

            _persistenceService.DeleteAllAssetLinksById(decodedAasId);

            return NoContent();
        }

        /// <summary>
        /// Returns a list of Asset Administration Shell ids linked to specific Asset identifiers
        /// </summary>
        /// <param name="assetIds">A list of specific Asset identifiers. Every single value asset identifier is a base64-url-encoded [SpecificAssetId](https://api.swaggerhub.com/domains/Plattform_i40/Part1-MetaModel-Schemas/V3.0.3#/components/schemas/SpecificAssetId).</param>
        /// <param name="limit">The maximum number of elements in the response array</param>
        /// <param name="cursor">A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue</param>
        /// <response code="200">Requested Asset Administration Shell ids</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpGet]
        [Route("/api/v3.0/lookup/shells")]
        [ValidateModelState]
        [SwaggerOperation("GetAllAssetAdministrationShellIdsByAssetLink")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetAllAssetAdministrationShellIdsResult), description: "Requested Asset Administration Shell ids")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public virtual IActionResult GetAllAssetAdministrationShellIdsByAssetLink([FromQuery]List<string>? assetIds, [FromQuery]int? limit, [FromQuery]string? cursor)
        {
            _logger.LogInformation("Received request to get all AAS Ids by AssetLink");
            List<ISpecificAssetId> reqAssetIds = null;
            foreach (var assetId in assetIds)
            {
                if (!string.IsNullOrEmpty(assetId))
                {
                    var decodedAssetIdString = _decoderService.Decode("assetId", assetId);
                    var assetJsonNode = JsonNode.Parse(decodedAssetIdString);
                    var reqAssetId = Jsonization.Deserialize.SpecificAssetIdFrom(assetJsonNode);
                    reqAssetIds ??= new List<ISpecificAssetId>();
                    reqAssetIds.Add(reqAssetId);
                 }
            }

            var output = _persistenceService.GetAllAssetAdministrationShellIdsByAssetLink(reqAssetIds, limit, cursor);
            return new ObjectResult(output);
        }

        /// <summary>
        /// Returns a list of specific Asset identifiers based on an Asset Administration Shell id to edit discoverable content
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <response code="200">Requested specific Asset identifiers</response>
        /// <response code="404">Not Found</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpGet]
        [Route("/api/v3.0/lookup/shells/{aasIdentifier}", Name = "GetAllAssetLinksById")]
        [ValidateModelState]
        [SwaggerOperation("GetAllAssetLinksById")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ISpecificAssetId>), description: "Requested specific Asset identifiers")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public virtual IActionResult GetAllAssetLinksById([FromRoute][Required]string aasIdentifier)
        {
            var decodedAasId = _decoderService.Decode("aasIdentfier", aasIdentifier);

            _logger.LogInformation($"Received request to get all the AssetIds of the AAS with id {decodedAasId}");

            var output = _persistenceService.GetAllAssetLinksById(decodedAasId);
            return new ObjectResult(output);
        }

        /// <summary>
        /// Creates specific Asset identifiers linked to an Asset Administration Shell to edit discoverable content
        /// </summary>
        /// <param name="body">A list of specific Asset identifiers</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <response code="201">Specific Asset identifiers created successfully</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="404">Not Found</response>
        /// <response code="409">Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request.</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpPost]
        [Route("/api/v3.0/lookup/shells/{aasIdentifier}")]
        [ValidateModelState]
        [SwaggerOperation("PostAllAssetLinksById")]
        [SwaggerResponse(statusCode: 201, type: typeof(List<SpecificAssetId>), description: "Specific Asset identifiers created successfully")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 409, type: typeof(Result), description: "Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public virtual IActionResult PostAllAssetLinksById([FromBody]List<ISpecificAssetId> body, [FromRoute][Required]string aasIdentifier)
        {
            var decodedAasId = _decoderService.Decode("aasIdentfier", aasIdentifier);

            _logger.LogInformation($"Received request to get all the AssetIds of the AAS with id {decodedAasId}");

            var output = _persistenceService.AddAllAsetLinkById(decodedAasId, body);
            var routeValues = new { aasIdentifier };
            return CreatedAtRoute("GetAllAssetLinksById", routeValues, body);
        }
    }
}
