/*
 * DotAAS Part 2 | HTTP/REST | Asset Administration Shell Registry Service Specification
 *
 * The Full Profile of the Asset Administration Shell Registry Service Specification as part of the [Specification of the Asset Administration Shell: Part 2](http://industrialdigitaltwin.org/en/content-hub).   Publisher: Industrial Digital Twin Association (IDTA) 2023
 *
 * OpenAPI spec version: V3.0.3_SSP-001
 * Contact: info@idtwin.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;

namespace AasRegistryDiscovery.WebApi.Models
{
    /// <summary>
    /// 
    /// </summary>
    public partial class SubmodelDescriptor : Descriptor, IEquatable<SubmodelDescriptor>
    {
        public SubmodelDescriptor(
            string? id,
            AdministrativeInformation? administration = null,
            List<LangStringTextType>? description = null,
            List<LangStringNameType>? displayName = null,
            List<Endpoint>? endpoints = null,
            List<Extension>? extensions = null,
            string? idShort = null,
            Reference? semanticId = null,
            List<Reference>? supplementalSemanticId = null)
        {
            Id = id;
            Administration = administration;
            Description = description;
            DisplayName = displayName;
            Endpoints = endpoints;
            Extensions = extensions;
            IdShort = idShort;
            SemanticId = semanticId;
            SupplementalSemanticId = supplementalSemanticId;
        }

        /// <summary>
        /// Gets or Sets Administration
        /// </summary>
        public AdministrativeInformation? Administration { get; set; }

        /// <summary>
        /// Gets or Sets Endpoints
        /// </summary>
        //[Required]
        public List<Endpoint>? Endpoints { get; set; }

        /// <summary>
        /// Gets or Sets IdShort
        /// </summary>
        //[MaxLength(128)]
        public string? IdShort { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        //[Required]
        //[RegularExpression("/^([\\x09\\x0a\\x0d\\x20-\\ud7ff\\ue000-\\ufffd]|\\ud800[\\udc00-\\udfff]|[\\ud801-\\udbfe][\\udc00-\\udfff]|\\udbff[\\udc00-\\udfff])*$/")]
        //[StringLength(2000, MinimumLength=1)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets SemanticId
        /// </summary>
        public Reference? SemanticId { get; set; }

        /// <summary>
        /// Gets or Sets SupplementalSemanticId
        /// </summary>
        public List<Reference>? SupplementalSemanticId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubmodelDescriptor {\n");
            sb.Append("  Administration: ").Append(Administration).Append("\n");
            sb.Append("  Endpoints: ").Append(Endpoints).Append("\n");
            sb.Append("  IdShort: ").Append(IdShort).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SemanticId: ").Append(SemanticId).Append("\n");
            sb.Append("  SupplementalSemanticId: ").Append(SupplementalSemanticId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SubmodelDescriptor)obj);
        }

        /// <summary>
        /// Returns true if SubmodelDescriptor instances are equal
        /// </summary>
        /// <param name="other">Instance of SubmodelDescriptor to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubmodelDescriptor other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Administration == other.Administration ||
                    Administration != null &&
                    Administration.Equals(other.Administration)
                ) && 
                (
                    Endpoints == other.Endpoints ||
                    Endpoints != null &&
                    Endpoints.SequenceEqual(other.Endpoints)
                ) && 
                (
                    IdShort == other.IdShort ||
                    IdShort != null &&
                    IdShort.Equals(other.IdShort)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    SemanticId == other.SemanticId ||
                    SemanticId != null &&
                    SemanticId.Equals(other.SemanticId)
                ) && 
                (
                    SupplementalSemanticId == other.SupplementalSemanticId ||
                    SupplementalSemanticId != null &&
                    SupplementalSemanticId.SequenceEqual(other.SupplementalSemanticId)
                ) && base.Equals(other);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Administration != null)
                    hashCode = hashCode * 59 + Administration.GetHashCode();
                    if (Endpoints != null)
                    hashCode = hashCode * 59 + Endpoints.GetHashCode();
                    if (IdShort != null)
                    hashCode = hashCode * 59 + IdShort.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (SemanticId != null)
                    hashCode = hashCode * 59 + SemanticId.GetHashCode();
                    if (SupplementalSemanticId != null)
                    hashCode = hashCode * 59 + SupplementalSemanticId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SubmodelDescriptor left, SubmodelDescriptor right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SubmodelDescriptor left, SubmodelDescriptor right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
