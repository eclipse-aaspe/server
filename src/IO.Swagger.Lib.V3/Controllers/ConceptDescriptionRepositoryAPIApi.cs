/********************************************************************************
* Copyright (c) {2019 - 2024} Contributors to the Eclipse Foundation
*
* See the NOTICE file(s) distributed with this work for additional
* information regarding copyright ownership.
*
* This program and the accompanying materials are made available under the
* terms of the Apache License Version 2.0 which is available at
* https://www.apache.org/licenses/LICENSE-2.0
*
* SPDX-License-Identifier: Apache-2.0
********************************************************************************/

/*
 * DotAAS Part 2 | HTTP/REST | Concept Description Repository Service Specification
 *
 * The ConceptDescription Repository Service Specification as part of [Specification of the Asset Administration Shell: Part 2](http://industrialdigitaltwin.org/en/content-hub).   Publisher: Industrial Digital Twin Association (IDTA) March 2023
 *
 * OpenAPI spec version: V3.0.3_SSP-001
 * Contact: info@idtwin.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using AasSecurity.Exceptions;
using AasxServerStandardBib.Interfaces;
using AasxServerStandardBib.Logging;
using IO.Swagger.Attributes;
using IO.Swagger.Lib.V3.Interfaces;
using IO.Swagger.Lib.V3.Services;
using IO.Swagger.Models;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using Contracts;
using Contracts.Exceptions;
using System.Threading.Tasks;
using AasxServer;
using IO.Swagger.Lib.V3.Models;
using NJsonSchema.Validation;
using Contracts.Pagination;
using Jose;
using System.Security.Cryptography.X509Certificates;
using System.Text.Json.Nodes;
using System.Text.Json;
using System.Text;

namespace IO.Swagger.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [Authorize(AuthenticationSchemes = "AasSecurityAuth")]
    [ApiController]
    public class ConceptDescriptionRepositoryAPIApiController : ControllerBase
    {
        private readonly IAppLogger<ConceptDescriptionRepositoryAPIApiController> _logger;
        private readonly IBase64UrlDecoderService _decoderService;
        private readonly IJsonQueryDeserializer _jsonQueryDeserializer;
        private readonly IPaginationService _paginationService;
        private readonly IAuthorizationService _authorizationService;
        private readonly IMetamodelVerificationService _verificationService;
        private readonly IDbRequestHandlerService _dbRequestHandlerService;

        public ConceptDescriptionRepositoryAPIApiController(IAppLogger<ConceptDescriptionRepositoryAPIApiController> logger, IBase64UrlDecoderService decoderService,
                                                            IJsonQueryDeserializer jsonQueryDeserializer, IPaginationService paginationService,
                                                            IAuthorizationService authorizationService, IMetamodelVerificationService verificationService,
                                                            IDbRequestHandlerService dbRequestHandlerService)
        {
            _logger = logger ?? throw new ArgumentNullException(nameof(logger));
            _decoderService = decoderService ?? throw new ArgumentNullException(nameof(decoderService));
            _jsonQueryDeserializer = jsonQueryDeserializer ?? throw new ArgumentNullException(nameof(jsonQueryDeserializer));
            _paginationService = paginationService ?? throw new ArgumentNullException(nameof(paginationService));
            _authorizationService = authorizationService ?? throw new ArgumentNullException(nameof(authorizationService));
            _verificationService = verificationService ?? throw new ArgumentNullException(nameof(verificationService));
            _dbRequestHandlerService = dbRequestHandlerService ?? throw new ArgumentNullException(nameof(dbRequestHandlerService));
        }

        /// <summary>
        /// Deletes the sign file of a Concept Description 
        /// </summary>
        /// <param name="cdIdentifier">The Concept Description’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <response code="204">Concept Description deleted successfully</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpDelete]
        [Route("concept-descriptions/{cdIdentifier}/$sign")]
        [ValidateModelState]
        [SwaggerOperation("DeleteConceptDescriptionByIdSigned")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public async virtual Task<IActionResult> DeleteConceptDescriptionByIdSigned([FromRoute][Required] string cdIdentifier)
        {
            var decodedCdIdentifier = _decoderService.Decode("cdIdentifier", cdIdentifier);
            if (decodedCdIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedCdIdentifier)} is null");
            }
            _logger.LogInformation($"Received request to delete concept description with id {decodedCdIdentifier}");

            var securityConfig = new SecurityConfig(Program.noSecurity, this);

            await _dbRequestHandlerService.DeleteConceptDescriptionByIdSigned(securityConfig, decodedCdIdentifier);

            return NoContent();
        }

        private static void PatchCD(IConceptDescription cd)
        {
            if (cd != null && cd.EmbeddedDataSpecifications != null && cd.EmbeddedDataSpecifications.Count != 0)
            {
                for (var i = 0; i < cd.EmbeddedDataSpecifications.Count; i++)
                {
                    var eds = cd.EmbeddedDataSpecifications[i];
                    if (eds != null && eds.DataSpecification == null)
                    {
                        eds.DataSpecification = new Reference(ReferenceTypes.ExternalReference, new List<IKey>()
                            { new Key(KeyTypes.GlobalReference, "https://admin-shell.io/DataSpecificationTemplates/DataSpecificationIec61360/3/0") });
                    }
                }
            }
        }

        /// <summary>
        /// Returns all Concept Descriptions
        /// </summary>
        /// <param name="idShort">The Concept Description’s IdShort</param>
        /// <param name="isCaseOf">IsCaseOf reference (UTF8-BASE64-URL-encoded)</param>
        /// <param name="dataSpecificationRef">DataSpecification reference (UTF8-BASE64-URL-encoded)</param>
        /// <param name="limit">The maximum number of elements in the response array</param>
        /// <param name="cursor">A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue</param>
        /// <response code="200">Requested Concept Descriptions</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpGet]
        [Route("concept-descriptions")]
        [ValidateModelState]
        [SwaggerOperation("GetAllConceptDescriptions")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ConceptDescription>), description: "Requested Concept Descriptions")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public async virtual Task<IActionResult> GetAllConceptDescriptions([FromQuery] string? idShort, [FromQuery] string? isCaseOf, [FromQuery] string? dataSpecificationRef, [FromQuery] int? limit, [FromQuery] string? cursor)
        {
            _logger.LogInformation($"Received request to get all the concept descriptions.");
            var reqIsCaseOf = _jsonQueryDeserializer.DeserializeReference("isCaseOf", isCaseOf);
            var reqDataSpecificationRef = _jsonQueryDeserializer.DeserializeReference("dataSpecificationRef", dataSpecificationRef);

            var cdList = new List<IConceptDescription>();

            var paginationParameters = new PaginationParameters(cursor, limit);
            var securityConfig = new SecurityConfig(Program.noSecurity, this);

            cdList = await _dbRequestHandlerService.ReadPagedConceptDescriptions(paginationParameters, securityConfig, idShort, reqIsCaseOf, reqDataSpecificationRef);

            foreach (var cd in cdList)
            {
                PatchCD(cd);
            }

            var authResult = _authorizationService.AuthorizeAsync(User, cdList, "SecurityPolicy").Result;
            if (!authResult.Succeeded)
            {
                var failedReason = authResult.Failure.FailureReasons.First();
                if (failedReason != null)
                {
                    throw new NotAllowed(failedReason.Message);
                }
            }

            var output = _paginationService.GetPaginatedResult(cdList, new PaginationParameters(cursor, limit));
            return new ObjectResult(output);
        }

        /// <summary>
        /// Returns a specific Concept Description
        /// </summary>
        /// <param name="cdIdentifier">The Concept Description’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <response code="200">Requested Concept Description</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpGet]
        [Route("concept-descriptions/{cdIdentifier}")]
        [ValidateModelState]
        [SwaggerOperation("GetConceptDescriptionById")]
        [SwaggerResponse(statusCode: 200, type: typeof(ConceptDescription), description: "Requested Concept Description")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public async virtual Task<IActionResult> GetConceptDescriptionById([FromRoute][Required] string cdIdentifier)
        {
            var decodedCdIdentifier = _decoderService.Decode("cdIdentifier", cdIdentifier);

            _logger.LogInformation($"Received request to get concept description with id {decodedCdIdentifier}");

            var securityConfig = new SecurityConfig(Program.noSecurity, this);
            var output = await _dbRequestHandlerService.ReadConceptDescriptionById(securityConfig, decodedCdIdentifier);

            PatchCD(output);

            var authResult = _authorizationService.AuthorizeAsync(User, output, "SecurityPolicy").Result;
            if (!authResult.Succeeded)
            {
                var failedReason = authResult.Failure.FailureReasons.First();
                if (failedReason != null)
                {
                    throw new NotAllowed(failedReason.Message);
                }
            }

            return new ObjectResult(output);
        }

        /// <summary>
        /// Returns a specific Concept Description signed
        /// </summary>
        /// <param name="cdIdentifier">The Concept Description’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <response code="200">Requested Concept Description</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpGet]
        [Route("concept-descriptions/{cdIdentifier}/$sign")]
        [ValidateModelState]
        [SwaggerOperation("GetConceptDescriptionById")]
        [SwaggerResponse(statusCode: 200, type: typeof(ConceptDescription), description: "Requested Concept Description")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public async virtual Task<IActionResult> GetConceptDescriptionByIdSigned([FromRoute][Required] string cdIdentifier)
        {
            var decodedCdIdentifier = _decoderService.Decode("cdIdentifier", cdIdentifier);

            _logger.LogInformation($"Received request to get concept description with id {decodedCdIdentifier}");

            var securityConfig = new SecurityConfig(Program.noSecurity, this);
            var output = await _dbRequestHandlerService.ReadConceptDescriptionById(securityConfig, decodedCdIdentifier);

            PatchCD(output);

            var authResult = _authorizationService.AuthorizeAsync(User, output, "SecurityPolicy").Result;
            if (!authResult.Succeeded)
            {
                var failedReason = authResult.Failure.FailureReasons.First();
                if (failedReason != null)
                {
                    throw new NotAllowed(failedReason.Message);
                }
            }

            return new ObjectResult(output);
        }

        /// <summary>
        /// Creates a new Concept Description
        /// </summary>
        /// <param name="body">Concept Description object</param>
        /// <response code="201">Concept Description created successfully</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="409">Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request.</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpPost]
        [Route("concept-descriptions")]
        [ValidateModelState]
        [SwaggerOperation("PostConceptDescription")]
        [SwaggerResponse(statusCode: 201, type: typeof(ConceptDescription), description: "Concept Description created successfully")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 409, type: typeof(Result), description: "Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request.")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public async virtual Task<IActionResult> PostConceptDescription([FromBody] ConceptDescription? body)
        {
            ProcessBody(body);

            var securityConfig = new SecurityConfig(Program.noSecurity, this);

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            var output = await _dbRequestHandlerService.CreateConceptDescription(securityConfig, body);

            return CreatedAtAction(nameof(PostConceptDescription), output);
        }

        /// <summary>
        /// Updates an existing Concept Description
        /// </summary>
        /// <param name="body">Concept Description object</param>
        /// <param name="cdIdentifier">The Concept Description’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <response code="204">Concept Description updated successfully</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpPut]
        [Route("concept-descriptions/{cdIdentifier}")]
        [ValidateModelState]
        [SwaggerOperation("PutConceptDescriptionById")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public async virtual Task<IActionResult> PutConceptDescriptionById([FromBody] ConceptDescription? body, [FromRoute][Required] string cdIdentifier)
        {
            ProcessBody(body);

            var decodedCdId = _decoderService.Decode("cdIdentifier", cdIdentifier);
            var securityConfig = new SecurityConfig(Program.noSecurity, this);

            await _dbRequestHandlerService.ReplaceConceptDescriptionById(securityConfig, body, decodedCdId);

            return NoContent();
        }

        /// <summary>
        /// Updates an existing Concept Description signed
        /// </summary>
        /// <param name="jws">JWS signed Concept Description object</param>
        /// <param name="cdIdentifier">The Concept Description’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <response code="204">Concept Description updated successfully</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpPut]
        [Route("concept-descriptions/{cdIdentifier}/$sign")]
        [ValidateModelState]
        [Consumes("text/plain")]
        [SwaggerOperation("PutConceptDescriptionByIdSigned")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public async virtual Task<IActionResult> PutConceptDescriptionByIdSigned([FromBody] string? jws, [FromRoute][Required] string cdIdentifier)
        {
            var decodedCdId = _decoderService.Decode("cdIdentifier", cdIdentifier);
            IClass body = ProcessJWS(jws);

            if (body is IConceptDescription)
            {
                var securityConfig = new SecurityConfig(Program.noSecurity, this);
                await _dbRequestHandlerService.ReplaceConceptDescriptionByIdSigned(securityConfig, decodedCdId, body as IConceptDescription, jws);
            }

            return NoContent();
        }

        private IConceptDescription ProcessJWS(string? jws)
        {
            string certFile = "Andreas_Orzelski_Chain.pfx";
            string certPW = "i40";

            IConceptDescription body = null;
            if (System.IO.File.Exists(certFile))
            {
                X509Certificate2Collection xc = new X509Certificate2Collection();
                xc.Import(certFile, certPW, X509KeyStorageFlags.PersistKeySet);

                var i = 0;
                var x5c = new string[xc.Count];
                for (var j = xc.Count - 1; j >= 0; j--)
                {
                    var c = Convert.ToBase64String(xc[j].GetRawCertData());
                    x5c[i++] = c;
                }

                using (var certificate = new X509Certificate2(certFile, certPW))
                {
                    if (certificate == null)
                    {
                        return null;
                    }

                    // Validate
                    var parts = jws.Split('.');
                    var headerJson = Encoding.UTF8.GetString(Jose.Base64Url.Decode(parts[0]));
                    var header = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, JsonElement>>(headerJson);
                    if (header == null)
                    {
                        throw new InvalidOperationException("header missing");
                    }

                    if (!header.TryGetValue("x5c", out var x5cElement))
                    {
                        throw new InvalidOperationException("x5c not found in header");
                    }

                    x5c = x5cElement.EnumerateArray().Select(x => x.GetString()).ToArray();
                    if (x5c.Length == 0)
                    {
                        throw new InvalidOperationException("x5c is empty");
                    }

                    var certBytes = Convert.FromBase64String(x5c[0]);
                    var signingCert = new X509Certificate2(certBytes);
                    using var rsaPublic = signingCert.GetRSAPublicKey();

                    var payload = JWT.Decode(jws, rsaPublic, JwsAlgorithm.RS256);

                    var chain = new X509Chain
                    {
                        ChainPolicy = {
                                RevocationMode   = X509RevocationMode.NoCheck,
                                VerificationFlags= X509VerificationFlags.NoFlag,
                                TrustMode = X509ChainTrustMode.CustomRootTrust
                            }
                    };

                    var root = new X509Certificate2(Convert.FromBase64String(x5c.Last()));
                    chain.ChainPolicy.CustomTrustStore.Add(root);

                    for (i = 1; i < x5c.Length - 1; i++)
                    {
                        var cert = new X509Certificate2(Convert.FromBase64String(x5c[i]));
                        chain.ChainPolicy.ExtraStore.Add(cert);
                    }

                    var isValid = chain.Build(signingCert);

                    if (isValid)
                    {
                        var node = System.Text.Json.JsonSerializer.Deserialize<JsonNode>(payload);
                        body = Jsonization.Deserialize.ConceptDescriptionFrom(node);
                    }
                }
            }

            ProcessBody(body);

            return body;
        }

        private void ProcessBody(IClass body)
        {
            if (body == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(body)} is null");
            }
            //Verify the body first
            _verificationService.VerifyRequestBody(body);
        }
    }
}
