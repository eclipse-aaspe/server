/********************************************************************************
* Copyright (c) {2019 - 2025} Contributors to the Eclipse Foundation
*
* See the NOTICE file(s) distributed with this work for additional
* information regarding copyright ownership.
*
* This program and the accompanying materials are made available under the
* terms of the Apache License Version 2.0 which is available at
* https://www.apache.org/licenses/LICENSE-2.0
*
* SPDX-License-Identifier: Apache-2.0
********************************************************************************/

/*
 * DotAAS Part 2 | HTTP/REST | Submodel Repository Service Specification
 *
 * The entire Submodel Repository Service Specification as part of the [Specification of the Asset Administration Shell: Part 2](http://industrialdigitaltwin.org/en/content-hub).   Publisher: Industrial Digital Twin Association (IDTA) 2023
 *
 * OpenAPI spec version: V3.0.3_SSP-001
 * Contact: info@idtwin.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using AasxServerStandardBib.Logging;
using IO.Swagger.Attributes;
using IO.Swagger.Lib.V3.Interfaces;
using IO.Swagger.Models;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using System;
using System.Collections.Generic;
using System.Xml;

namespace IO.Swagger.Controllers
{
    using System.Linq;
    using System.Net.Mime;
    using System.Runtime.Serialization;
    using System.Threading.Tasks;
    using AasSecurity.Exceptions;
    using AasxServer;
    using AasxServerStandardBib;
    using Contracts;
    using Contracts.DbRequests;
    using IO.Swagger.Lib.V3.Exceptions;
    using IO.Swagger.Lib.V3.Models;
    using Microsoft.AspNetCore.Authorization;
    using Microsoft.AspNetCore.Http;

    /// <summary>
    /// 
    /// </summary>
    [Authorize(AuthenticationSchemes = "AasSecurityAuth")]
    [ApiController]
    public class SerializationAPIApiController : ControllerBase
    {
        private readonly IAppLogger<SerializationAPIApiController> _logger;
        private readonly IBase64UrlDecoderService _decoderService;
        private readonly IDbRequestHandlerService _dbRequestHandlerService;

        public SerializationAPIApiController(IAppLogger<SerializationAPIApiController> logger, IBase64UrlDecoderService decoderService,
                                             IDbRequestHandlerService dbRequestHandlerService)
        {
            _logger = logger ?? throw new ArgumentNullException(nameof(logger));
            _decoderService = decoderService ?? throw new ArgumentNullException(nameof(decoderService));
            _dbRequestHandlerService = dbRequestHandlerService ?? throw new ArgumentNullException(nameof(dbRequestHandlerService));
        }


        /// <summary>
        /// Returns an appropriate serialization based on the specified format (see SerializationFormat)
        /// </summary>
        /// <param name="aasIds">The Asset Administration Shells&#x27; unique ids (UTF8-BASE64-URL-encoded)</param>
        /// <param name="submodelIds">The Submodels&#x27; unique ids (UTF8-BASE64-URL-encoded)</param>
        /// <param name="includeConceptDescriptions">Include Concept Descriptions?</param>
        /// <response code="200">Requested serialization based on SerializationFormat</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpGet]
        [Route("serialization")]
        [ValidateModelState]
        [Produces("application/json", "application/xml", "application/asset-administration-shell-package+xml")]
        [SwaggerOperation("GenerateSerializationByIds")]
        [SwaggerResponse(statusCode: 200, type: typeof(byte[]), description: "Requested serialization based on SerializationFormat")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        public virtual async Task<IActionResult> GenerateSerializationByIds([FromQuery] List<string>? aasIds, [FromQuery] List<string>? submodelIds,
        [FromQuery] string? includeConceptDescriptions)
        {
            _logger.LogDebug($"Received a request an appropriate serialization");

            var decodedAasIds = aasIds.Select(aasId => _decoderService.Decode("aasIdentifier", aasId)).ToList();
            var decodedSubmodelIds = submodelIds.Select(submodelId => _decoderService.Decode("submodelIdentifier", submodelId)).ToList();

            var securityConfig = new SecurityConfig(Program.noSecurity, this);

            bool includeCD = false;

            if (includeConceptDescriptions != null)
            {
                includeConceptDescriptions = includeConceptDescriptions.ToLower();
                if (includeConceptDescriptions == "true")
                {
                    includeCD = true;
                }
                else if (includeConceptDescriptions != "false")
                {
                    throw new NoIdentifierException(includeConceptDescriptions);
                }
            }

            if (!HttpContext.Request.Headers.TryGetValue("Accept", out var isResultType))
            {
                isResultType = "application/json";
            }

            bool createAASXPackage = isResultType.Equals("application/asset-administration-shell-package+xml");

            var result = await _dbRequestHandlerService.GenerateSerializationByIds(securityConfig, decodedAasIds, decodedSubmodelIds, includeCD, createAASXPackage);

            if (createAASXPackage)
            {
                var fileRequestResult = result.FileRequestResult;
                ContentDisposition contentDisposition = new() { FileName = fileRequestResult.File };

                HttpContext.Response.Headers.Append("Content-Disposition", contentDisposition.ToString());
                HttpContext.Response.Headers.Append("X-FileName", fileRequestResult.File);

                HttpContext.Response.ContentLength = fileRequestResult.FileSize;
                await HttpContext.Response.Body.WriteAsync(fileRequestResult.Content);
                return new EmptyResult();
            }
            return new ObjectResult(result.Environment);
        }
    }
}