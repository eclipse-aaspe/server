/********************************************************************************
* Copyright (c) {2019 - 2024} Contributors to the Eclipse Foundation
*
* See the NOTICE file(s) distributed with this work for additional
* information regarding copyright ownership.
*
* This program and the accompanying materials are made available under the
* terms of the Apache License Version 2.0 which is available at
* https://www.apache.org/licenses/LICENSE-2.0
*
* SPDX-License-Identifier: Apache-2.0
********************************************************************************/

namespace IO.Swagger.Controllers
{
    /*
     * DotAAS Part 2 | HTTP/REST | Asset Administration Shell Repository Service Specification
     *
     * The Full Profile of the Asset Administration Shell Repository Service Specification as part of the [Specification of the Asset Administration Shell: Part 2](http://industrialdigitaltwin.org/en/content-hub).   Publisher: Industrial Digital Twin Association (IDTA) April 2023
     *
     * OpenAPI spec version: V3.0.3_SSP-001
     * Contact: info@idtwin.org
     * Generated by: https://github.com/swagger-api/swagger-codegen.git
     */
    using System;
    using System.Collections.Generic;
    using Microsoft.AspNetCore.Mvc;
    using Swashbuckle.AspNetCore.Annotations;
    using Newtonsoft.Json;
    using System.ComponentModel.DataAnnotations;
    using IO.Swagger.Attributes;

    using Microsoft.AspNetCore.Authorization;
    using IO.Swagger.Models;
    using AasxServerStandardBib.Interfaces;
    using AasxServerStandardBib.Logging;
    using IO.Swagger.Lib.V3.Interfaces;
    using IO.Swagger.Lib.V3.SerializationModifiers.Mappers;
    using AasxServer;
    using System.Linq;
    using System.Security.Claims;
    using IO.Swagger.Lib.V3.Models;
    using DataTransferObjects.MetadataDTOs;
    using AdminShellNS.Lib.V3.Models;
    using DataTransferObjects.ValueDTOs;
    using System.Net.Mime;
    using Microsoft.AspNetCore.Http;
    using System.IO;
    using System.Text.Json.Nodes;
    using Contracts.Pagination;
    using Contracts;
    using System.Threading.Tasks;
    using Contracts.Exceptions;
    using Contracts.Security;
    using Microsoft.IdentityModel.Tokens;
    using Jose;
    using System.Security.Cryptography.X509Certificates;
    using System.Text.Json;
    using System.Text;

    /// <summary>
    /// 
    /// </summary>
    [Authorize(AuthenticationSchemes = "AasSecurityAuth")]
    [ApiController]
    public class AssetAdministrationShellRepositoryAPIApiController : ControllerBase
    {
        private readonly IAppLogger<AssetAdministrationShellRepositoryAPIApiController> _logger;
        private readonly IBase64UrlDecoderService _decoderService;
        private readonly IReferenceModifierService _referenceModifierService;
        private readonly IMappingService _mappingService;
        private readonly IPathModifierService _pathModifierService;
        private readonly ILevelExtentModifierService _levelExtentModifierService;
        private readonly IPaginationService _paginationService;
        private readonly IValidateSerializationModifierService _validateModifierService;
        private readonly IIdShortPathParserService _idShortPathParserService;
        private readonly IDbRequestHandlerService _dbRequestHandlerService;
        private readonly IMetamodelVerificationService _verificationService;

        /// <summary>
        /// 
        /// </summary>
        /// <param name="logger"></param>
        /// <param name="decoderService"></param>
        /// <param name="referenceModifierService"></param>
        /// <param name="mappingService"></param>
        /// <param name="pathModifierService"></param>
        /// <param name="levelExtentModifierService"></param>
        /// <param name="paginationService"></param>
        /// <param name="validateModifierService"></param>
        /// <param name="idShortPathParserService"></param>
        /// <param name="dbRequestHandlerService"></param>
        /// <param name="verificationService"></param>
        /// <exception cref="ArgumentNullException"></exception>
        public AssetAdministrationShellRepositoryAPIApiController(IAppLogger<AssetAdministrationShellRepositoryAPIApiController> logger, IBase64UrlDecoderService decoderService,
                                                                  IReferenceModifierService referenceModifierService,
                                                                  IMappingService mappingService, IPathModifierService pathModifierService,
                                                                  ILevelExtentModifierService levelExtentModifierService, IPaginationService paginationService,
                                                                  IValidateSerializationModifierService validateModifierService,
                                                                  IIdShortPathParserService idShortPathParserService, IDbRequestHandlerService dbRequestHandlerService,
                                                                  IMetamodelVerificationService verificationService)
        {
            _logger = logger ?? throw new ArgumentNullException(nameof(logger));
            _decoderService = decoderService ?? throw new ArgumentNullException(nameof(decoderService));
            _referenceModifierService = referenceModifierService ?? throw new ArgumentNullException(nameof(referenceModifierService));
            _mappingService = mappingService ?? throw new ArgumentNullException(nameof(mappingService));
            _pathModifierService = pathModifierService ?? throw new ArgumentNullException(nameof(pathModifierService));
            _levelExtentModifierService = levelExtentModifierService ?? throw new ArgumentNullException(nameof(levelExtentModifierService));
            _paginationService = paginationService ?? throw new ArgumentNullException(nameof(paginationService));
            _validateModifierService = validateModifierService ?? throw new ArgumentNullException(nameof(_validateModifierService));
            _idShortPathParserService = idShortPathParserService ?? throw new ArgumentNullException(nameof(idShortPathParserService));
            _dbRequestHandlerService = dbRequestHandlerService ?? throw new ArgumentNullException(nameof(dbRequestHandlerService));
            _verificationService = verificationService ?? throw new ArgumentNullException(nameof(verificationService));
        }


        /// <summary>
        /// Deletes an Asset Administration Shell
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <response code="204">Asset Administration Shell deleted successfully</response>
        /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpDelete]
        [Route("shells/{aasIdentifier}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteAssetAdministrationShellById")]
        [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public async virtual Task<IActionResult> DeleteAssetAdministrationShellById([FromRoute][Required] string aasIdentifier)
        {
            var decodedAasIdentifier = _decoderService.Decode("aasIdentifier", aasIdentifier);

            _logger.LogInformation($"Received request to delete AAS with id {decodedAasIdentifier}");

            var securityConfig = new SecurityConfig(Program.noSecurity, this);
            await _dbRequestHandlerService.DeleteAssetAdministrationShellById(securityConfig, decodedAasIdentifier);

            return NoContent();
        }

        /// <summary>
        /// Deletes file content of an existing submodel element at a specified path within submodel elements hierarchy
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <response code="200">Submodel element updated successfully</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpDelete]
        [Route("shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment")]
        [ValidateModelState]
        [SwaggerOperation("DeleteFileByPathAasRepository")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public async virtual Task<IActionResult> DeleteFileByPathAasRepository([FromRoute][Required]string aasIdentifier, [FromRoute][Required]string submodelIdentifier,
            [FromRoute][Required]string idShortPath)
        {
            _logger.LogInformation($"Received request to delete a file from AAS");

            var decodedAasIdentifier = _decoderService.Decode("aasIdentifier", aasIdentifier);
            var decodedSmIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);

            if (decodedAasIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedAasIdentifier)} is null");
            }

            if (decodedSmIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedSmIdentifier)} is null");
            }
            var securityConfig = new SecurityConfig(Program.noSecurity, this);

            var idShortPathElements = _idShortPathParserService.ParseIdShortPath(idShortPath);
            await _dbRequestHandlerService.DeleteFileByPath(securityConfig, decodedAasIdentifier, decodedSmIdentifier, idShortPath);

            return NoContent();
        }

        /// <summary>
        /// Deletes the submodel from the Asset Administration Shell and the Repository.
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <response code="204">Submodel deleted successfully</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpDelete]
        [Route("shells/{aasIdentifier}/submodels/{submodelIdentifier}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteSubmodelByIdAasRepository")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public async virtual Task<IActionResult> DeleteSubmodelByIdAasRepository([FromRoute][Required]string aasIdentifier, [FromRoute][Required]string submodelIdentifier)
        {
            _logger.LogInformation($"Received request to delete a submodel from AAS");

            var decodedAasIdentifier = _decoderService.Decode("aasIdentifier", aasIdentifier);
            var decodedSmIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);

            if (decodedAasIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedAasIdentifier)} is null");
            }

            if (decodedSmIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedSmIdentifier)} is null");
            }

            var securityConfig = new SecurityConfig(Program.noSecurity, this);
            await _dbRequestHandlerService.DeleteSubmodelById(securityConfig, decodedAasIdentifier, decodedSmIdentifier);

            return NoContent();
        }

        /// <summary>
        /// Deletes a submodel element at a specified path within the submodel elements hierarchy
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <response code="204">Submodel element deleted successfully</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpDelete]
        [Route("shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteSubmodelElementByPathAasRepository")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public async virtual Task<IActionResult> DeleteSubmodelElementByPathAasRepository([FromRoute][Required]string aasIdentifier, [FromRoute][Required]string submodelIdentifier,
            [FromRoute][Required]string idShortPath)
        {
            _logger.LogInformation($"Received request to delete a SubmodelElement from AAS");
            var decodedAasIdentifier = _decoderService.Decode("aasIdentifier", aasIdentifier);
            var decodedSmIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);

            if (decodedAasIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedAasIdentifier)} is null");
            }

            if (decodedSmIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedSmIdentifier)} is null");
            }

            var securityConfig = new SecurityConfig(Program.noSecurity, this);

            await _dbRequestHandlerService.DeleteSubmodelElementByPath(securityConfig, decodedAasIdentifier, decodedSmIdentifier, idShortPath);

            return NoContent();
        }

        /// <summary>
        /// Deletes the submodel reference from the Asset Administration Shell. Does not delete the submodel itself!
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <response code="204">Submodel reference deleted successfully</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpDelete]
        [Route("shells/{aasIdentifier}/submodel-refs/{submodelIdentifier}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteSubmodelReferenceByIdAasRepository")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public async virtual Task<IActionResult> DeleteSubmodelReferenceByIdAasRepository([FromRoute][Required]string aasIdentifier, [FromRoute][Required]string submodelIdentifier)
        {
            var decodedAasIdentifier = _decoderService.Decode("aasIdentifier", aasIdentifier);
            var decodedSmIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);

            if (decodedAasIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedAasIdentifier)} is null");
            }

            if (decodedSmIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedSmIdentifier)} is null");
            }

            _logger.LogInformation($"Received request to delete submodel reference with id {submodelIdentifier} from the AAS with id {aasIdentifier}.");

            var securityConfig = new SecurityConfig(Program.noSecurity, this);
            await _dbRequestHandlerService.DeleteSubmodelReferenceById(securityConfig, decodedAasIdentifier, decodedSmIdentifier);

            return NoContent();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <response code="204">Thumbnail deletion successful</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpDelete]
        [Route("shells/{aasIdentifier}/asset-information/thumbnail")]
        [ValidateModelState]
        [SwaggerOperation("DeleteThumbnailAasRepository")]
        [SwaggerResponse(statusCode: 204, type: typeof(Result), description: "Thumbnail deletion successful.")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public async virtual Task<IActionResult> DeleteThumbnailAasRepository([FromRoute][Required]string aasIdentifier)
        {
            var decodedAasIdentifier = _decoderService.Decode("aasIdentifier", aasIdentifier);

            _logger.LogInformation($"Received request to delete the thumbnail from the AAS with id {decodedAasIdentifier}.");

            if (decodedAasIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedAasIdentifier)} is null");
            }

            var securityConfig = new SecurityConfig(Program.noSecurity, this);
            await _dbRequestHandlerService.DeleteThumbnail(securityConfig, decodedAasIdentifier);

            return NoContent();
        }

        /// <summary>
        /// Returns all Asset Administration Shells
        /// </summary>
        /// <param name="assetIds">A list of specific Asset identifiers. Every single value asset identifier is a base64-url-encoded [SpecificAssetId](https://api.swaggerhub.com/domains/Plattform_i40/Part1-MetaModel-Schemas/V3.0.3#/components/schemas/SpecificAssetId).</param>
        /// <param name="idShort">The Asset Administration Shell’s IdShort</param>
        /// <param name="limit">The maximum number of elements in the response array</param>
        /// <param name="cursor">A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue</param>
        /// <response code="200">Requested Asset Administration Shells</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpGet]
        [Route("shells")]
        [ValidateModelState]
        [SwaggerOperation("GetAllAssetAdministrationShells")]
        [SwaggerResponse(statusCode: 200, type: typeof(PagedResult), description: "Requested Asset Administration Shells")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public virtual async Task<IActionResult> GetAllAssetAdministrationShells([FromQuery]List<string> assetIds, [FromQuery]string? idShort, [FromQuery]int? limit, [FromQuery]string? cursor)
        { 
			_logger.LogInformation($"Received the request to get all Asset Administration Shells.");

            List<ISpecificAssetId> reqAssetIds = null;

            foreach (var assetId in assetIds)
            {
                if (!string.IsNullOrEmpty(assetId))
                {
                    var decodedAssetIdString = _decoderService.Decode("assetId", assetId);
                    var assetJsonNode = JsonNode.Parse(decodedAssetIdString);
                    var reqAssetId = Jsonization.Deserialize.SpecificAssetIdFrom(assetJsonNode);
                    reqAssetIds??= new List<ISpecificAssetId>();
                    reqAssetIds.Add(reqAssetId);
                } 
            }

            var paginationParameters = new PaginationParameters(cursor, limit);
            var securityConfig = new SecurityConfig(Program.noSecurity, this);

            var result = await _dbRequestHandlerService.ReadPagedAssetAdministrationShells(paginationParameters, securityConfig, reqAssetIds, idShort);
            var paginatedAasList = result;
            var output = _paginationService.GetPaginatedResult(paginatedAasList, paginationParameters);
            return new ObjectResult(output);
        }

        /// <summary>
        /// Returns References to all Asset Administration Shells
        /// </summary>
        /// <param name="assetIds">A list of specific Asset identifiers. Every single value asset identifier is a base64-url-encoded [SpecificAssetId](https://api.swaggerhub.com/domains/Plattform_i40/Part1-MetaModel-Schemas/V3.0.3#/components/schemas/SpecificAssetId).</param>
        /// <param name="idShort">The Asset Administration Shell’s IdShort</param>
        /// <param name="limit">The maximum number of elements in the response array</param>
        /// <param name="cursor">A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue</param>
        /// <response code="200">Requested Asset Administration Shells as a list of References</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpGet]
        [Route("shells/$reference")]
        [ValidateModelState]
        [SwaggerOperation("GetAllAssetAdministrationShellsReference")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetReferencesResult), description: "Requested Asset Administration Shells as a list of References")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public async virtual Task<IActionResult> GetAllAssetAdministrationShellsReference([FromQuery]List<string> assetIds, [FromQuery]string? idShort, 
		[FromQuery]int? limit, [FromQuery]string? cursor)
        { 
            _logger.LogInformation($"Received the request to get all Asset Administration Shells.");

            List<ISpecificAssetId> reqAssetIds = null;

            foreach (var assetId in assetIds)
            {
                if (!string.IsNullOrEmpty(assetId))
                {
                    var decodedAssetIdString = _decoderService.Decode("assetId", assetId);
                    var assetJsonNode = JsonNode.Parse(decodedAssetIdString);
                    var reqAssetId = Jsonization.Deserialize.SpecificAssetIdFrom(assetJsonNode);
                    reqAssetIds ??= new List<ISpecificAssetId>();
                    reqAssetIds.Add(reqAssetId);
                }
            }
            var securityConfig = new SecurityConfig(Program.noSecurity, this);

            var paginationParameters = new PaginationParameters(cursor, limit);
            var aasList = await _dbRequestHandlerService.ReadPagedAssetAdministrationShells(paginationParameters, securityConfig, reqAssetIds, idShort);
            var aasPaginatedList = _paginationService.GetPaginatedResult(aasList, paginationParameters);
            var references = _referenceModifierService.GetReferenceResult(aasPaginatedList.result.ConvertAll(a => (IReferable)a));
            var output = new ReferencePagedResult(references, aasPaginatedList.paging_metadata);
            return new ObjectResult(output);
        }

        /// <summary>
        /// Returns all submodel elements including their hierarchy
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="limit">The maximum number of elements in the response array</param>
        /// <param name="cursor">A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue</param>
        /// <param name="level">Determines the structural depth of the respective resource content</param>
        /// <param name="extent">Determines to which extent the resource is being serialized</param>
        /// <response code="200">List of found submodel elements</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpGet]
        [Route("shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements")]
        [ValidateModelState]
        [SwaggerOperation("GetAllSubmodelElementsAasRepository")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetSubmodelElementsResult), description: "List of found submodel elements")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public async virtual Task<IActionResult> GetAllSubmodelElementsAasRepository([FromRoute][Required]string aasIdentifier, [FromRoute][Required]string submodelIdentifier, [FromQuery]int? limit, [FromQuery]string? cursor, [FromQuery]string? level, [FromQuery]string? extent)
        {
            //Validate level and extent
            var levelEnum = _validateModifierService.ValidateLevel(level);
            var extentEnum = _validateModifierService.ValidateExtent(extent);

            var decodedAasIdentifier = _decoderService.Decode("aasIdentifier", aasIdentifier);
            var decodedSmIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);

            if (decodedAasIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedAasIdentifier)} is null");
            }

            if (decodedSmIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedSmIdentifier)} is null");
            }

            var securityConfig = new SecurityConfig(Program.noSecurity, this);

            _logger.LogInformation($"Received request to get all the submodel elements from submodel with id {submodelIdentifier} and the AAS with id {aasIdentifier}.");

            var paginationParameters = new PaginationParameters(cursor, limit);
            var submodelElements = await _dbRequestHandlerService.ReadPagedSubmodelElements(paginationParameters, securityConfig, decodedAasIdentifier, decodedSmIdentifier);

            /*
            if (!Program.noSecurity && submodelElements.Count > 0)
            {
                var authResult = _authorizationService.AuthorizeAsync(securityConfig.Principal, submodelElements.First().Parent, "SecurityPolicy").Result;
                if (!authResult.Succeeded)
                {
                    throw new NotAllowed(authResult.Failure.FailureReasons.FirstOrDefault()?.Message ?? string.Empty);
                }
            }
            */

            var smePaginated = _paginationService.GetPaginatedResult(submodelElements, paginationParameters);
            var smeLevelList = _levelExtentModifierService.ApplyLevelExtent(smePaginated.result ?? [], levelEnum, extentEnum);
            var output = new PagedResult() { result = smeLevelList.ConvertAll(sme => sme), paging_metadata = smePaginated.paging_metadata };
            return new ObjectResult(output);
        }

        /// <summary>
        /// Returns all submodel elements including their hierarchy
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="limit">The maximum number of elements in the response array</param>
        /// <param name="cursor">A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue</param>
        /// <response code="200">List of found submodel elements</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpGet]
        [Route("shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/$metadata")]
        [ValidateModelState]
        [SwaggerOperation("GetAllSubmodelElementsMetadataAasRepository")]
        [SwaggerResponse(statusCode: 200, type: typeof(MetadataPagedResult), description: "List of found submodel elements")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public async virtual Task<IActionResult> GetAllSubmodelElementsMetadataAasRepository([FromRoute][Required]string aasIdentifier, [FromRoute][Required]string submodelIdentifier, 
		[FromQuery]int? limit, [FromQuery]string? cursor)
        { 
            var decodedAasIdentifier = _decoderService.Decode("aasIdentifier", aasIdentifier);
            var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);

            if (decodedAasIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedAasIdentifier)} is null");
            }

            if (decodedSubmodelIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedSubmodelIdentifier)} is null");
            }

            var securityConfig = new SecurityConfig(Program.noSecurity, this);
            var paginationParameters = new PaginationParameters(cursor, limit);
            var smeList = await _dbRequestHandlerService.ReadPagedSubmodelElements(paginationParameters, securityConfig, decodedAasIdentifier, decodedSubmodelIdentifier);

            _logger.LogInformation($"Received request to get metadata of all the submodel elements from the submodel with id {decodedSubmodelIdentifier} and AAS with id {decodedAasIdentifier}");

            var smePaginated = _paginationService.GetPaginatedResult(smeList, paginationParameters);
            var smeMetadataList = _mappingService.Map(smePaginated.result, "metadata");
            var output = new MetadataPagedResult { result = smeMetadataList.ConvertAll(sme => (IMetadataDTO)sme), paging_metadata = smePaginated.paging_metadata };
            return new ObjectResult(output);
        }

        /// <summary>
        /// Returns all submodel elements including their hierarchy
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="limit">The maximum number of elements in the response array</param>
        /// <param name="cursor">A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue</param>
        /// <param name="level">Determines the structural depth of the respective resource content</param>
        /// <param name="extent">Determines to which extent the resource is being serialized</param>
        /// <response code="200">List of found submodel elements in the Path notation</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpGet]
        [Route("shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/$path")]
        [ValidateModelState]
        [SwaggerOperation("GetAllSubmodelElementsPathAasRepository")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetPathItemsResult), description: "List of found submodel elements in the Path notation")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public async virtual Task<IActionResult> GetAllSubmodelElementsPathAasRepository([FromRoute][Required] string aasIdentifier, [FromRoute][Required] string submodelIdentifier,
        [FromQuery] int? limit, [FromQuery] string? cursor, [FromQuery] string? level, [FromQuery] string? extent)
        {
            //Validate level and extent
            var levelEnum = _validateModifierService.ValidateLevel(level);
            var extentEnum = _validateModifierService.ValidateExtent(extent);

            var decodedAasIdentifier = _decoderService.Decode($"aasIdentifier", aasIdentifier);
            var decodedSubmodelIdentifier = _decoderService.Decode($"submodelIdentifier", submodelIdentifier);

            if (decodedAasIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedAasIdentifier)} is null");
            }

            if (decodedSubmodelIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedSubmodelIdentifier)} is null");
            }

            var securityConfig = new SecurityConfig(Program.noSecurity, this);

            var paginationParameters = new PaginationParameters(cursor, limit);
            var submodelElementsList = await _dbRequestHandlerService.ReadPagedSubmodelElements(paginationParameters, securityConfig, decodedAasIdentifier, decodedSubmodelIdentifier);

            _logger.LogInformation($"Received a request to get path for all the submodel elements from the submodel with id {decodedSubmodelIdentifier} and aas with id {decodedAasIdentifier}");

            var smePaginated = _paginationService.GetPaginatedResult(submodelElementsList, new PaginationParameters(cursor, limit));
            var smeLevelList = _levelExtentModifierService.ApplyLevelExtent(smePaginated.result ?? [], levelEnum, extentEnum);
            var smePathList = _pathModifierService.ToIdShortPath(smeLevelList.ConvertAll(sme => (ISubmodelElement)sme));
            var output = new PathPagedResult { result = smePathList, paging_metadata = smePaginated.paging_metadata };
            return new ObjectResult(output);
        }

        /// <summary>
        /// Returns all submodel elements as a list of References
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="limit">The maximum number of elements in the response array</param>
        /// <param name="cursor">A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue</param>
        /// <param name="level">Determines the structural depth of the respective resource content</param>
        /// <response code="200">List of References of the found submodel elements</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpGet]
        [Route("shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/$reference")]
        [ValidateModelState]
        [SwaggerOperation("GetAllSubmodelElementsReferenceAasRepository")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetReferencesResult), description: "List of References of the found submodel elements")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public async virtual Task<IActionResult> GetAllSubmodelElementsReferenceAasRepository([FromRoute][Required]string aasIdentifier, [FromRoute][Required]string submodelIdentifier, 
		[FromQuery]int? limit, [FromQuery]string? cursor, [FromQuery]string? level)
        {
            //Validate level and extent
            var levelEnum = _validateModifierService.ValidateLevel(level);

            var decodedAasIdentifier = _decoderService.Decode("aasIdentifier", aasIdentifier);
            var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);

            if (decodedAasIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedAasIdentifier)} is null");
            }

            if (decodedSubmodelIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedSubmodelIdentifier)} is null");
            }

            var securityConfig = new SecurityConfig(Program.noSecurity, this);
            var paginationParameters = new PaginationParameters(cursor, limit);
            var smeList = await _dbRequestHandlerService.ReadPagedSubmodelElements(paginationParameters, securityConfig, decodedAasIdentifier, decodedSubmodelIdentifier);

            _logger.LogInformation($"Received request to get references of all the submodel elements from submodel with id {submodelIdentifier} and the AAS with id {aasIdentifier}.");

            // TODO (jtikekar, 2023-09-04): check performace imapct due to ConvertAll
            var smePaginated = _paginationService.GetPaginatedResult(smeList, paginationParameters);
            var smeLevelList = _levelExtentModifierService.ApplyLevelExtent(smePaginated.result ?? [], levelEnum);
            var smeReferenceList = _referenceModifierService.GetReferenceResult(smeLevelList.ConvertAll(sme => (IReferable)sme));
            var output = new ReferencePagedResult(smeReferenceList, smePaginated.paging_metadata);
            return new ObjectResult(output);
        }

        /// <summary>
        /// Returns all submodel elements including their hierarchy in the ValueOnly representation
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="limit">The maximum number of elements in the response array</param>
        /// <param name="cursor">A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue</param>
        /// <param name="level">Determines the structural depth of the respective resource content</param>
        /// <response code="200">List of found submodel elements in their ValueOnly representation</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpGet]
        [Route("shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/$value")]
        [ValidateModelState]
        [SwaggerOperation("GetAllSubmodelElementsValueOnlyAasRepository")]
        [SwaggerResponse(statusCode: 200, type: typeof(ValueOnlyPagedResult), description: "List of found submodel elements in their ValueOnly representation")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public async virtual Task<IActionResult> GetAllSubmodelElementsValueOnlyAasRepository([FromRoute][Required]string aasIdentifier, [FromRoute][Required]string submodelIdentifier, 
		[FromQuery]int? limit, [FromQuery]string? cursor, [FromQuery]string? level)
        {
            //Validate level 
            var levelEnum = _validateModifierService.ValidateLevel(level);

            var decodedAasIdentifier = _decoderService.Decode("aasIdentifier", aasIdentifier);
            var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);

            if (decodedAasIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedAasIdentifier)} is null");
            }

            if (decodedSubmodelIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedSubmodelIdentifier)} is null");
            }

            var securityConfig = new SecurityConfig(Program.noSecurity, this);
            var paginationParameters = new PaginationParameters(cursor, limit);
            var submodelElements = await _dbRequestHandlerService.ReadPagedSubmodelElements(paginationParameters, securityConfig, decodedAasIdentifier, decodedSubmodelIdentifier);

            _logger.LogInformation($"Received request to get the value of all the submodel elements from the submodel with id {decodedSubmodelIdentifier} and aas with id {decodedAasIdentifier}");

            var smePaginated = _paginationService.GetPaginatedResult(submodelElements, paginationParameters);

            var smeLevelList = _levelExtentModifierService.ApplyLevelExtent(smePaginated.result, levelEnum);
            var smeValueList = _mappingService.Map(smeLevelList, "value");
            var output = new ValueOnlyPagedResult { result = smeValueList.ConvertAll(sme => (IValueDTO)sme), paging_metadata = smePaginated.paging_metadata };
            return new ObjectResult(output);
        }

        /// <summary>
        /// Returns all submodel references
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="limit">The maximum number of elements in the response array</param>
        /// <param name="cursor">A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue</param>
        /// <response code="200">Requested submodel references</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpGet]
        [Route("shells/{aasIdentifier}/submodel-refs")]
        [ValidateModelState]
        [SwaggerOperation("GetAllSubmodelReferencesAasRepository")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetReferencesResult), description: "Requested submodel references")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        /*
        public async virtual Task<IActionResult> GetAllSubmodelReferencesAasRepository([FromRoute][Required]string aasIdentifier, [FromQuery]int? limit, [FromQuery]string? cursor)
        {
            //ToDo: Taken from SubmodelService, verify whether correct
            var decodedAasIdentifier = _decoderService.Decode("aasIdentifier", aasIdentifier);
            if (decodedAasIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedAasIdentifier)} is null");
            }

            _logger.LogInformation($"Received request to get all the submodel references from the AAS with id {aasIdentifier}.");
            var securityConfig = new SecurityConfig(Program.noSecurity, this);
            var paginationParameters = new PaginationParameters(cursor, limit);

            var submodelList = await _dbRequestHandlerService.ReadPagedSubmodels(paginationParameters, securityConfig, null, null);

            var submodelsPagedList = _paginationService.GetPaginatedResult(submodelList, paginationParameters);
            var smReferences = _referenceModifierService.GetReferenceResult(submodelsPagedList.result.ConvertAll(sm => (IReferable)sm));
            var output = new ReferencePagedResult(smReferences, submodelsPagedList.paging_metadata);
            return new ObjectResult(output);
        }
        */

        public async virtual Task<IActionResult> GetAllSubmodelReferencesAasRepository([FromRoute][Required] string aasIdentifier, [FromQuery] int? limit, [FromQuery] string? cursor)
        {
            var decodedAasIdentifier = _decoderService.Decode("aasIdentifier", aasIdentifier);
            if (decodedAasIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedAasIdentifier)} is null");
            }

            _logger.LogInformation($"Received request to get all the submodel references from the AAS with id {aasIdentifier}.");
            var securityConfig = new SecurityConfig(Program.noSecurity, this);
            var paginationParameters = new PaginationParameters(cursor, limit);

            var aas = await _dbRequestHandlerService.ReadAssetAdministrationShellById(securityConfig, decodedAasIdentifier);
            var smReferences = new List<IReference>();
            if (aas != null)
            {
                if (aas.Submodels.IsNullOrEmpty())
                {
                    _logger.LogDebug($"No submodels present in the AAS with Id {aasIdentifier}");
                }
                else
                {
                    smReferences = aas.Submodels;
                }
            }

            var output = _paginationService.GetPaginatedResult(smReferences, paginationParameters);
            // var output = new ReferencePagedResult(smReferences, submodelsPagedList.paging_metadata);
            return new ObjectResult(output);
        }

        /// <summary>
        /// Returns a specific Asset Administration Shell
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <response code="200">Requested Asset Administration Shell</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpGet]
        [Route("shells/{aasIdentifier}")]
        [ValidateModelState]
        [SwaggerOperation("GetAssetAdministrationShellById")]
        [SwaggerResponse(statusCode: 200, type: typeof(AssetAdministrationShell), description: "Requested Asset Administration Shell")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public virtual async Task<IActionResult> GetAssetAdministrationShellById([FromRoute][Required] string aasIdentifier)
        {
            var decodedAasIdentifier = _decoderService.Decode("aasIdentifier", aasIdentifier);

            if (decodedAasIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedAasIdentifier)} is null");
            }

            _logger.LogInformation($"Received request to get the AAS with id {aasIdentifier}.");

            var securityConfig = new SecurityConfig(Program.noSecurity, this);
            var aas = await _dbRequestHandlerService.ReadAssetAdministrationShellById(securityConfig, decodedAasIdentifier);

            /* Turn off AAS security to have existing demos run
            var authResult = _authorizationService.AuthorizeAsync(User, aas, "SecurityPolicy").Result;
            if (!authResult.Succeeded)
            {
                var failedReasons = authResult.Failure.FailureReasons;
                if (failedReasons != null && failedReasons.Any())
                {
                    throw new NotAllowed(failedReasons.First().Message);
                }
            }
            */
            return new ObjectResult(aas);
        }

        /// <summary>
        /// Returns a specific Asset Administration Shell signed
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <response code="200">Requested Asset Administration Shell</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpGet]
        [Route("shells/{aasIdentifier}/$sign")]
        [ValidateModelState]
        [SwaggerOperation("GetAssetAdministrationShellById")]
        [SwaggerResponse(statusCode: 200, type: typeof(AssetAdministrationShell), description: "Requested Asset Administration Shell")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public virtual async Task<IActionResult> GetAssetAdministrationShellByIdSigned([FromRoute][Required] string aasIdentifier)
        {
            var decodedAasIdentifier = _decoderService.Decode("aasIdentifier", aasIdentifier);

            if (decodedAasIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedAasIdentifier)} is null");
            }

            _logger.LogInformation($"Received request to get the AAS with id {aasIdentifier}.");

            var securityConfig = new SecurityConfig(Program.noSecurity, this);
            var aasSigned = await _dbRequestHandlerService.ReadAssetAdministrationShellByIdSigned(securityConfig, decodedAasIdentifier);

            if (!aasSigned.IsNullOrEmpty())
            {
                return new ObjectResult(aasSigned);
            }
            else
            {
                throw new NotAllowed($"");
            }
        }

        /// <summary>
        /// Returns a specific Asset Administration Shell as a Reference
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <response code="200">Requested Asset Administration Shell</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpGet]
        [Route("shells/{aasIdentifier}/$reference")]
        [ValidateModelState]
        [SwaggerOperation("GetAssetAdministrationShellByIdReferenceAasRepository")]
        [SwaggerResponse(statusCode: 200, type: typeof(Reference), description: "Requested Asset Administration Shell")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public async virtual Task<IActionResult> GetAssetAdministrationShellByIdReferenceAasRepository([FromRoute][Required]string aasIdentifier)
        { 
            var decodedAasIdentifier = _decoderService.Decode("aasIdentifier", aasIdentifier);

            if (decodedAasIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedAasIdentifier)} is null");
            }

            _logger.LogInformation($"Received request to get the reference of AAS with id {aasIdentifier}.");
            var securityConfig = new SecurityConfig(Program.noSecurity, this);

            var aas = await _dbRequestHandlerService.ReadAssetAdministrationShellById(securityConfig, decodedAasIdentifier);

            var output = _referenceModifierService.GetReferenceResult(aas);

            return new ObjectResult(output);
        }

        /// <summary>
        /// Returns the Asset Information
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <response code="200">Requested Asset Information</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpGet]
        [Route("shells/{aasIdentifier}/asset-information")]
        [ValidateModelState]
        [SwaggerOperation("GetAssetInformationAasRepository")]
        [SwaggerResponse(statusCode: 200, type: typeof(AssetInformation), description: "Requested Asset Information")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public async virtual Task<IActionResult> GetAssetInformationAasRepository([FromRoute][Required]string aasIdentifier)
        {
            var decodedAasIdentifier = _decoderService.Decode("aasIdentifier", aasIdentifier);

            if (decodedAasIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedAasIdentifier)} is null");
            }

            _logger.LogInformation($"Received request to get the AAS with id {decodedAasIdentifier}.");

            var securityConfig = new SecurityConfig(Program.noSecurity, this);
            var output = await _dbRequestHandlerService.ReadAssetInformation(securityConfig, decodedAasIdentifier);

            return new ObjectResult(output);
        }

        /// <summary>
        /// Downloads file content from a specific submodel element from the Submodel at a specified path
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <response code="200">Requested file</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpGet]
        [Route("shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment")]
        [ValidateModelState]
        [SwaggerOperation("GetFileByPathAasRepository")]
        [SwaggerResponse(statusCode: 200, type: typeof(byte[]), description: "Requested file")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public async virtual Task<IActionResult> GetFileByPathAasRepository([FromRoute][Required]string aasIdentifier, [FromRoute][Required]string submodelIdentifier, 
		[FromRoute][Required]string idShortPath)
        { 
            var decodedAasIdentifier = _decoderService.Decode("aasIdentifier", aasIdentifier);
            var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);

            if (decodedAasIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedAasIdentifier)} is null");
            }

            if (decodedSubmodelIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedSubmodelIdentifier)} is null");
            }

            _logger.LogInformation($"Received request to get file by path at the submodel element {idShortPath} from submodel with id {submodelIdentifier} and the AAS with id {aasIdentifier}.");

            var securityConfig = new SecurityConfig(Program.noSecurity, this);

            var idShortPathElements = _idShortPathParserService.ParseIdShortPath(idShortPath);

            var fileResult = await _dbRequestHandlerService.ReadFileByPath(securityConfig, decodedAasIdentifier, decodedSubmodelIdentifier, idShortPath);

            var fileName = fileResult.File;
            var content = fileResult.Content;
            var fileSize = fileResult.FileSize;

            //content-disposition so that the aasx file can be downloaded from the web browser.
            ContentDisposition contentDisposition = new() { FileName = fileName, Inline = fileName.ToLower().EndsWith(".pdf") };

            HttpContext.Response.Headers.Append("Content-Disposition", contentDisposition.ToString());
            HttpContext.Response.ContentLength = fileSize;
            if (fileName.ToLower().EndsWith(".svg"))
            {
                HttpContext.Response.ContentType = "image/svg+xml";
            }

            if (fileName.ToLower().EndsWith(".pdf"))
            {
                HttpContext.Response.ContentType = "application/pdf";
            }

            HttpContext.Response.Body.WriteAsync(content);
            return new EmptyResult();
        }

        /// <summary>
        /// Returns the Operation result of an asynchronous invoked Operation
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="handleId">The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (UTF8-BASE64-URL-encoded)</param>
        /// <response code="200">Operation result object</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpGet]
        [Route("shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/operation-results/{handleId}")]
        [ValidateModelState]
        [SwaggerOperation("GetOperationAsyncResultAasRepository")]
        [SwaggerResponse(statusCode: 200, type: typeof(OperationResult), description: "Operation result object")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public virtual IActionResult GetOperationAsyncResultAasRepository([FromRoute][Required] string aasIdentifier, [FromRoute][Required] string submodelIdentifier,
            [FromRoute][Required] string idShortPath, [FromRoute][Required] string handleId)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns the ValueOnly notation of the Operation result of an asynchronous invoked Operation
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="handleId">The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (UTF8-BASE64-URL-encoded)</param>
        /// <response code="200">Operation result object</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpGet]
        [Route("shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/operation-results/{handleId}/$value")]
        [ValidateModelState]
        [SwaggerOperation("GetOperationAsyncResultValueOnlyAasRepository")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "Operation result object")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public virtual IActionResult GetOperationAsyncResultValueOnlyAasRepository([FromRoute][Required] string aasIdentifier, [FromRoute][Required] string submodelIdentifier,
            [FromRoute][Required] string idShortPath, [FromRoute][Required] string handleId)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns the Operation status of an asynchronous invoked Operation
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="handleId">The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (UTF8-BASE64-URL-encoded)</param>
        /// <response code="200">Operation result object containing information that the &#x27;executionState&#x27; is still &#x27;Running&#x27;</response>
        /// <response code="302">The target resource is available but at a different location.</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpGet]
        [Route("shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/operation-status/{handleId}")]
        [ValidateModelState]
        [SwaggerOperation("GetOperationAsyncStatusAasRepository")]
        [SwaggerResponse(statusCode: 200, type: typeof(BaseOperationResult), description: "Operation result object containing information that the &#x27;executionState&#x27; is still &#x27;Running&#x27;")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public virtual IActionResult GetOperationAsyncStatusAasRepository([FromRoute][Required]string aasIdentifier, [FromRoute][Required]string submodelIdentifier, 
		[FromRoute][Required]string idShortPath, [FromRoute][Required]string handleId)
        { 
            throw new NotImplementedException() ;
        }

        /// <summary>
        /// Returns the Submodel
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content</param>
        /// <param name="extent">Determines to which extent the resource is being serialized</param>
        /// <response code="200">Requested Submodel</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpGet]
        [Route("shells/{aasIdentifier}/submodels/{submodelIdentifier}")]
        [ValidateModelState]
        [SwaggerOperation("GetSubmodelByIdAasRepository")]
        [SwaggerResponse(statusCode: 200, type: typeof(Submodel), description: "Requested Submodel")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public async virtual Task<IActionResult> GetSubmodelByIdAasRepository([FromRoute][Required]string aasIdentifier, [FromRoute][Required]string submodelIdentifier, 
		[FromQuery]string? level, [FromQuery]string? extent)
        {
            //Validate level and extent
            var levelEnum = _validateModifierService.ValidateLevel(level);
            var extentEnum = _validateModifierService.ValidateExtent(extent);

            var decodedAasIdentifier = _decoderService.Decode("aasIdentifier", aasIdentifier);
            var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);

            if (decodedAasIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedAasIdentifier)} is null");
            }

            if (decodedSubmodelIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedSubmodelIdentifier)} is null");
            }

            _logger.LogInformation($"Received request to get the submodel with id {submodelIdentifier} from the AAS with id {aasIdentifier}.");
            var securityConfig = new SecurityConfig(Program.noSecurity, this);

            var submodel = await _dbRequestHandlerService.ReadSubmodelById(securityConfig, decodedAasIdentifier, decodedSubmodelIdentifier);
            //var authResult = _authorizationService.AuthorizeAsync(User, submodel, "SecurityPolicy").Result;
            //if (!authResult.Succeeded)
            //{
            //    var failedReasons = authResult.Failure.FailureReasons;
            //    var authorizationFailureReasons = failedReasons.ToList();
            //    if (authorizationFailureReasons.Count != 0)
            //    {
            //        throw new NotAllowed(authorizationFailureReasons.First().Message);
            //    }
            //}

            var output = _levelExtentModifierService.ApplyLevelExtent(submodel, levelEnum, extentEnum);
            return new ObjectResult(output);
        }

        /// <summary>
        /// Returns the Submodel signed
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content</param>
        /// <param name="extent">Determines to which extent the resource is being serialized</param>
        /// <response code="200">Requested Submodel</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpGet]
        [Route("shells/{aasIdentifier}/submodels/{submodelIdentifier}/$sign")]
        [ValidateModelState]
        [SwaggerOperation("GetSubmodelByIdSigned")]
        [SwaggerResponse(statusCode: 200, type: typeof(Submodel), description: "Requested Submodel")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public async virtual Task<IActionResult> GetSubmodelByIdSigned([FromRoute][Required] string aasIdentifier, [FromRoute][Required] string submodelIdentifier
       /*, [FromQuery] string? level, [FromQuery] string? extent*/, [FromQuery] string? skipPayload)
        {
            ////Validate level and extent
            //var levelEnum = _validateModifierService.ValidateLevel(level);
            //var extentEnum = _validateModifierService.ValidateExtent(extent);

            var decodedAasIdentifier = _decoderService.Decode("aasIdentifier", aasIdentifier);
            var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);

            if (decodedAasIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedAasIdentifier)} is null");
            }

            if (decodedSubmodelIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedSubmodelIdentifier)} is null");
            }

            _logger.LogInformation($"Received request to get the submodel with id {submodelIdentifier} from the AAS with id {aasIdentifier}.");
            var securityConfig = new SecurityConfig(Program.noSecurity, this);

            bool isSkipPayload = false;

            if (skipPayload != null && skipPayload.ToLower() == "true")
            {
                isSkipPayload = true;
            }

            var submodelStringSigned = await _dbRequestHandlerService.ReadSubmodelByIdSigned(securityConfig, aasIdentifier, decodedSubmodelIdentifier, isSkipPayload);

            if (!submodelStringSigned.IsNullOrEmpty())
            {
                return new ObjectResult(submodelStringSigned);
            }
            else
            {
                throw new NotAllowed($"");
            }
        }

        /// <summary>
        /// Returns the Submodel&#x27;s metadata elements
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <response code="200">Requested Submodel</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpGet]
        [Route("shells/{aasIdentifier}/submodels/{submodelIdentifier}/$metadata")]
        [ValidateModelState]
        [SwaggerOperation("GetSubmodelByIdMetadataAasRepository")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "Requested Submodel")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public async virtual Task<IActionResult> GetSubmodelByIdMetadataAasRepository([FromRoute][Required]string aasIdentifier, [FromRoute][Required]string submodelIdentifier)
        { 
            var decodedAasIdentifier = _decoderService.Decode("aasIdentifier", aasIdentifier);
            var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);

            if (decodedAasIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedAasIdentifier)} is null");
            }

            if (decodedSubmodelIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedSubmodelIdentifier)} is null");
            }

            _logger.LogInformation($"Received request to get metadat of the submodel with id {decodedSubmodelIdentifier} from the AAS with id {decodedAasIdentifier}");

            var securityConfig = new SecurityConfig(Program.noSecurity, this);

            var submodel = await _dbRequestHandlerService.ReadSubmodelById(securityConfig, decodedAasIdentifier, decodedSubmodelIdentifier);
            //var authResult = _authorizationService.AuthorizeAsync(User, submodel, "SecurityPolicy").Result;
            //if (!authResult.Succeeded)
            //{
            //    var failedReason = authResult.Failure.FailureReasons.First();
            //    if (failedReason != null)
            //    {
            //        throw new NotAllowed(failedReason.Message);
            //    }
            //}

            var output = _mappingService.Map(submodel, "metadata");
            return new ObjectResult(output);
        }

        /// <summary>
        /// Returns the Submodel&#x27;s metadata elements
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content</param>
        /// <response code="200">Requested Submodel in Path notation</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpGet]
        [Route("shells/{aasIdentifier}/submodels/{submodelIdentifier}/$path")]
        [ValidateModelState]
        [SwaggerOperation("GetSubmodelByIdPathAasRepository")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<string>), description: "Requested Submodel in Path notation")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public async virtual Task<IActionResult> GetSubmodelByIdPathAasRepository([FromRoute][Required]string aasIdentifier, [FromRoute][Required]string submodelIdentifier, 
		[FromQuery]string? level)
        {
            //Validate level 
            var levelEnum = _validateModifierService.ValidateLevel(level);

            var decodedAasIdentifier = _decoderService.Decode($"aasIdentifier", aasIdentifier);
            var decodedSubmodelIdentifier = _decoderService.Decode($"submodelIdentifier", submodelIdentifier);

            if (decodedAasIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedAasIdentifier)} is null");
            }

            if (decodedSubmodelIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedSubmodelIdentifier)} is null");
            }

            _logger.LogInformation($"Received request to get path of a submodel with is {decodedSubmodelIdentifier} and AAS with id {decodedAasIdentifier}");
            var securityConfig = new SecurityConfig(Program.noSecurity, this);

            var submodel = await _dbRequestHandlerService.ReadSubmodelById(securityConfig, decodedAasIdentifier, decodedSubmodelIdentifier);
            //var authResult = _authorizationService.AuthorizeAsync(User, submodel, "SecurityPolicy").Result;
            //if (!authResult.Succeeded)
            //{
            //    var failedReason = authResult.Failure.FailureReasons.First();
            //    if (failedReason != null)
            //    {
            //        throw new NotAllowed(failedReason.Message);
            //    }
            //}

            var submodelLevel = _levelExtentModifierService.ApplyLevelExtent(submodel, levelEnum);
            var output = _pathModifierService.ToIdShortPath(submodelLevel);
            return new ObjectResult(output);
        }

        /// <summary>
        /// Returns the Submodel as a Reference
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <response code="200">Requested Submodel as a Reference</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpGet]
        [Route("shells/{aasIdentifier}/submodels/{submodelIdentifier}/$reference")]
        [ValidateModelState]
        [SwaggerOperation("GetSubmodelByIdReferenceAasRepository")]
        [SwaggerResponse(statusCode: 200, type: typeof(Reference), description: "Requested Submodel as a Reference")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public async virtual Task<IActionResult> GetSubmodelByIdReferenceAasRepository([FromRoute][Required]string aasIdentifier, [FromRoute][Required]string submodelIdentifier)
        { 
            var decodedAasIdentifier = _decoderService.Decode("aasIdentifier", aasIdentifier);
            var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);

            if (decodedAasIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedAasIdentifier)} is null");
            }

            if (decodedSubmodelIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedSubmodelIdentifier)} is null");
            }

            _logger.LogInformation($"Received request to get the submodel with id {submodelIdentifier} from the AAS with id {aasIdentifier}.");
            var securityConfig = new SecurityConfig(Program.noSecurity, this);

            var submodel = await _dbRequestHandlerService.ReadSubmodelById(securityConfig, decodedAasIdentifier, decodedSubmodelIdentifier);
            //var authResult = _authorizationService.AuthorizeAsync(User, submodel, "SecurityPolicy").Result;
            //if (!authResult.Succeeded)
            //{
            //    var failedReason = authResult.Failure.FailureReasons.First();
            //    if (failedReason != null)
            //    {
            //        throw new NotAllowed(failedReason.Message);
            //    }
            //}

            var output = _referenceModifierService.GetReferenceResult(submodel);
            return new ObjectResult(output);
        }

        /// <summary>
        /// Returns the Submodel&#x27;s ValueOnly representation
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content</param>
        /// <param name="extent">Determines to which extent the resource is being serialized</param>
        /// <response code="200">Requested Submodel</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpGet]
        [Route("shells/{aasIdentifier}/submodels/{submodelIdentifier}/$value")]
        [ValidateModelState]
        [SwaggerOperation("GetSubmodelByIdValueOnlyAasRepository")]
        [SwaggerResponse(statusCode: 200, type: typeof(SubmodelValue), description: "Requested Submodel")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public async virtual Task<IActionResult> GetSubmodelByIdValueOnlyAasRepository([FromRoute][Required]string aasIdentifier, [FromRoute][Required]string submodelIdentifier, 
		[FromQuery]string? level, [FromQuery]string? extent)
        {
            //Validate level and extent
            var levelEnum = _validateModifierService.ValidateLevel(level);
            var extentEnum = _validateModifierService.ValidateExtent(extent);

            var decodedAasIdentifier = _decoderService.Decode("aasIdentifier", aasIdentifier);
            var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);

            if (decodedAasIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedAasIdentifier)} is null");
            }

            if (decodedSubmodelIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedSubmodelIdentifier)} is null");
            }

            _logger.LogInformation($"Received request to get the value of submodel with id {decodedSubmodelIdentifier} from the aas with id {decodedAasIdentifier}");
            var securityConfig = new SecurityConfig(Program.noSecurity, this);

            var submodel = await _dbRequestHandlerService.ReadSubmodelById(securityConfig, decodedAasIdentifier, decodedSubmodelIdentifier);
            //var authResult = _authorizationService.AuthorizeAsync(User, submodel, "SecurityPolicy").Result;
            //if (!authResult.Succeeded)
            //{
            //    var failedReason = authResult.Failure.FailureReasons.First();
            //    if (failedReason != null)
            //    {
            //        throw new NotAllowed(failedReason.Message);
            //    }
            //}

            var submodelLevel = _levelExtentModifierService.ApplyLevelExtent(submodel, levelEnum, extentEnum);
            var output = _mappingService.Map(submodelLevel, "value");
            return new ObjectResult(output);
        }

        /// <summary>
        /// Returns a specific submodel element from the Submodel at a specified path
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content</param>
        /// <param name="extent">Determines to which extent the resource is being serialized</param>
        /// <response code="200">Requested submodel element</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpGet]
        [Route("shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}")]
        [ValidateModelState]
        [SwaggerOperation("GetSubmodelElementByPathAasRepository")]
        [SwaggerResponse(statusCode: 200, type: typeof(ISubmodelElement), description: "Requested submodel element")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public async virtual Task<IActionResult> GetSubmodelElementByPathAasRepository([FromRoute][Required]string aasIdentifier, [FromRoute][Required]string submodelIdentifier, 
		[FromRoute][Required]string idShortPath, [FromQuery]string? level, [FromQuery]string? extent)
        {
            //Validate level and extent
            var levelEnum = _validateModifierService.ValidateLevel(level);
            var extentEnum = _validateModifierService.ValidateExtent(extent);

            var decodedAasIdentifier = _decoderService.Decode("aasIdentifier", aasIdentifier);
            var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);

            if (decodedAasIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedAasIdentifier)} is null");
            }

            if (decodedSubmodelIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedSubmodelIdentifier)} is null");
            }

            _logger.LogInformation($"Received request to get the submodel element at {idShortPath} from the submodel with id {submodelIdentifier} and the AAS with id {aasIdentifier}.");

            var securityConfig = new SecurityConfig(Program.noSecurity, this);

            var idShortPathElements = _idShortPathParserService.ParseIdShortPath(idShortPath);

            var submodelElement = await _dbRequestHandlerService.ReadSubmodelElementByPath(securityConfig, decodedAasIdentifier, decodedSubmodelIdentifier, idShortPath);

            var smeLevel = _levelExtentModifierService.ApplyLevelExtent(submodelElement, levelEnum, extentEnum);
            return new ObjectResult(smeLevel);
        }

        /// <summary>
        /// Returns the metadata attributes if a specific submodel element from the Submodel at a specified path
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <response code="200">Requested submodel element</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpGet]
        [Route("shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$metadata")]
        [ValidateModelState]
        [SwaggerOperation("GetSubmodelElementByPathMetadataAasRepository")]
        [SwaggerResponse(statusCode: 200, type: typeof(ISubmodelElementMetadata), description: "Requested submodel element")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public async virtual Task<IActionResult> GetSubmodelElementByPathMetadataAasRepository([FromRoute][Required]string aasIdentifier, [FromRoute][Required]string submodelIdentifier, 
		[FromRoute][Required]string idShortPath)
        { 
            var decodedAasIdentifier = _decoderService.Decode("aasIdentifier", aasIdentifier);
            var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);

            if (decodedAasIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedAasIdentifier)} is null");
            }

            if (decodedSubmodelIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedSubmodelIdentifier)} is null");
            }

            _logger.LogInformation($"Received request to get metadata of the submodel element at {idShortPath} from the submodel with id {submodelIdentifier} and the AAS with id {aasIdentifier}.");


            var securityConfig = new SecurityConfig(Program.noSecurity, this);
            var idShortPathElements = _idShortPathParserService.ParseIdShortPath(idShortPath);

            var submodelElement = await _dbRequestHandlerService.ReadSubmodelElementByPath(securityConfig, decodedAasIdentifier, decodedSubmodelIdentifier, idShortPath);

            var output = _mappingService.Map(submodelElement, "metadata");
            return new ObjectResult(output);
        }

        /// <summary>
        /// Returns a specific submodel element from the Submodel at a specified path in the Path notation
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content</param>
        /// <response code="200">Requested submodel element in the Path notation</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpGet]
        [Route("shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$path")]
        [ValidateModelState]
        [SwaggerOperation("GetSubmodelElementByPathPathAasRepository")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<string>), description: "Requested submodel element in the Path notation")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public async virtual Task<IActionResult> GetSubmodelElementByPathPathAasRepository([FromRoute][Required]string aasIdentifier, [FromRoute][Required]string submodelIdentifier, 
		[FromRoute][Required]string idShortPath, [FromQuery]string? level)
        {
            //Validate level and extent
            var levelEnum = _validateModifierService.ValidateLevel(level);

            var decodedAasIdentifier = _decoderService.Decode($"aasIdentifier", aasIdentifier);
            var decodedSubmodelIdentifier = _decoderService.Decode($"submodelIdentifier", submodelIdentifier);

            if (decodedAasIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedAasIdentifier)} is null");
            }

            if (decodedSubmodelIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedSubmodelIdentifier)} is null");
            }

            _logger.LogInformation($"Received a request to get a path of a submodel element at {idShortPath} from a submodel with id {decodedSubmodelIdentifier} and aas with id {decodedAasIdentifier}");
            var securityConfig = new SecurityConfig(Program.noSecurity, this);
            var idShortPathElements = _idShortPathParserService.ParseIdShortPath(idShortPath);

            var submodelElement = await _dbRequestHandlerService.ReadSubmodelElementByPath(securityConfig, decodedAasIdentifier, decodedSubmodelIdentifier, idShortPath);

            var output = _pathModifierService.ToIdShortPath(submodelElement);
            return new ObjectResult(output);
        }

        /// <summary>
        /// Returns the Reference of a specific submodel element from the Submodel at a specified path
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content</param>
        /// <response code="200">Requested submodel element in its ValueOnly representation</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpGet]
        [Route("shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$reference")]
        [ValidateModelState]
        [SwaggerOperation("GetSubmodelElementByPathReferenceAasRepository")]
        [SwaggerResponse(statusCode: 200, type: typeof(Reference), description: "Requested submodel element in its ValueOnly representation")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public virtual async Task<IActionResult> GetSubmodelElementByPathReferenceAasRepository([FromRoute][Required]string aasIdentifier, [FromRoute][Required]string submodelIdentifier, 
		[FromRoute][Required]string idShortPath, [FromQuery]string? level)
        { 
            var decodedAasIdentifier = _decoderService.Decode("aasIdentifier", aasIdentifier);
            var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);

            _logger.LogInformation($"Received request to get the submodel element at {idShortPath} from the submodel with id {submodelIdentifier} and the AAS with id {aasIdentifier}.");

            var securityConfig = new SecurityConfig(Program.noSecurity, this);
            var idShortPathElements = _idShortPathParserService.ParseIdShortPath(idShortPath);

            var submodelElement = await _dbRequestHandlerService.ReadSubmodelElementByPath(securityConfig, decodedAasIdentifier, decodedSubmodelIdentifier, idShortPath);

            //Level should not be applicable

            var output = _referenceModifierService.GetReferenceResult(submodelElement);
            return new ObjectResult(output);
        }

        /// <summary>
        /// Returns a specific submodel element from the Submodel at a specified path in the ValueOnly representation
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content</param>
        /// <param name="extent">Determines to which extent the resource is being serialized</param>
        /// <response code="200">Requested submodel element in its ValueOnly representation</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpGet]
        [Route("shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$value")]
        [ValidateModelState]
        [SwaggerOperation("GetSubmodelElementByPathValueOnlyAasRepository")]
        [SwaggerResponse(statusCode: 200, type: typeof(IValueDTO), description: "Requested submodel element in its ValueOnly representation")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public async virtual Task<IActionResult> GetSubmodelElementByPathValueOnlyAasRepository([FromRoute][Required]string aasIdentifier, [FromRoute][Required]string submodelIdentifier, 
		[FromRoute][Required]string idShortPath, [FromQuery]string? level, [FromQuery]string? extent)
        {
            //Validate level and extent
            var levelEnum = _validateModifierService.ValidateLevel(level);
            var extentEnum = _validateModifierService.ValidateExtent(extent);

            var decodedAasIdentifier = _decoderService.Decode("aasIdentifier", aasIdentifier);
            var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);

            if (decodedAasIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedAasIdentifier)} is null");
            }

            if (decodedSubmodelIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedSubmodelIdentifier)} is null");
            }

            _logger.LogInformation($"Received request to get the value of the submodel element at {idShortPath} from the submodel with id {decodedSubmodelIdentifier} and the aas with id {decodedAasIdentifier}");


            var securityConfig = new SecurityConfig(Program.noSecurity, this);
            var idShortPathElements = _idShortPathParserService.ParseIdShortPath(idShortPath);

            var submodelElement = await _dbRequestHandlerService.ReadSubmodelElementByPath(securityConfig, decodedAasIdentifier, decodedSubmodelIdentifier, idShortPath);

            var smeLevel = _levelExtentModifierService.ApplyLevelExtent(submodelElement, levelEnum, extentEnum);
            var output = _mappingService.Map(smeLevel, "value");
            return new ObjectResult(output);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <response code="200">The thumbnail of the Asset Information.</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpGet]
        [Route("shells/{aasIdentifier}/asset-information/thumbnail")]
        [ValidateModelState]
        [SwaggerOperation("GetThumbnailAasRepository")]
        [SwaggerResponse(statusCode: 200, type: typeof(byte[]), description: "The thumbnail of the Asset Information.")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public async virtual Task<IActionResult> GetThumbnailAasRepository([FromRoute][Required]string aasIdentifier)
        { 
            var decodedAasIdentifier = _decoderService.Decode("aasIdentifier", aasIdentifier);

            if (decodedAasIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedAasIdentifier)} is null");
            }

            _logger.LogInformation($"Received request to get the thumbnail of the AAS with Id {aasIdentifier}");

            var securityConfig = new SecurityConfig(Program.noSecurity, this);
            var fileRequestResult = await _dbRequestHandlerService.ReadThumbnail(securityConfig, decodedAasIdentifier);
            var content = fileRequestResult.Content;
            var fileSize = fileRequestResult.FileSize;
            var fileName = fileRequestResult.File;

            //content-disposition so that the aasx file can be downloaded from the web browser.
            ContentDisposition contentDisposition = new() { FileName = fileName };

            HttpContext.Response.Headers.Append("Content-Disposition", contentDisposition.ToString());
            HttpContext.Response.ContentLength = fileSize;
            HttpContext.Response.Body.WriteAsync(content);
            return new EmptyResult();
        }

        /// <summary>
        /// Synchronously invokes an Operation at a specified path
        /// </summary>
        /// <param name="body">Operation request object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <response code="200">Operation result object</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpPost]
        [Route("shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke")]
        [ValidateModelState]
        [SwaggerOperation("InvokeOperationAasRepository")]
        [SwaggerResponse(statusCode: 200, type: typeof(OperationResult), description: "Operation result object")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public virtual IActionResult InvokeOperationAasRepository([FromBody]OperationRequest body, [FromRoute][Required]string aasIdentifier, 
		[FromRoute][Required]string submodelIdentifier, [FromRoute][Required]string idShortPath)
        { 
            throw new NotImplementedException();
        }

        /// <summary>
        /// Asynchronously invokes an Operation at a specified path
        /// </summary>
        /// <param name="body">Operation request object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <response code="202">The server has accepted the request.</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpPost]
        [Route("shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke-async")]
        [ValidateModelState]
        [SwaggerOperation("InvokeOperationAsyncAasRepository")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public virtual IActionResult InvokeOperationAsyncAasRepository([FromBody] OperationRequest body, [FromRoute][Required] string aasIdentifier,
            [FromRoute][Required] string submodelIdentifier, [FromRoute][Required] string idShortPath)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Asynchronously invokes an Operation at a specified path
        /// </summary>
        /// <param name="body">Operation request object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <response code="202">The server has accepted the request.</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpPost]
        [Route("shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke-async/$value")]
        [ValidateModelState]
        [SwaggerOperation("InvokeOperationAsyncValueOnlyAasRepository")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public virtual IActionResult InvokeOperationAsyncValueOnlyAasRepository([FromBody]OperationRequestValueOnly body, [FromRoute][Required]string aasIdentifier, 
		[FromRoute][Required]string submodelIdentifier, [FromRoute][Required]string idShortPath)
        { 
            throw new NotImplementedException();
        }

        /// <summary>
        /// Synchronously invokes an Operation at a specified path
        /// </summary>
        /// <param name="body">Operation request object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <response code="200">Operation result object</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpPost]
        [Route("shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke/$value")]
        [ValidateModelState]
        [SwaggerOperation("InvokeOperationValueOnlyAasRepository")]
        [SwaggerResponse(statusCode: 200, type: typeof(OperationResultValueOnly), description: "Operation result object")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public virtual IActionResult InvokeOperationValueOnlyAasRepository([FromBody]OperationRequestValueOnly body, [FromRoute][Required]string aasIdentifier, 
		[FromRoute][Required]string submodelIdentifier, [FromRoute][Required]string idShortPath)
        { 
            throw new NotImplementedException();
        }

        /// <summary>
        /// Updates the Submodel
        /// </summary>
        /// <param name="body">Submodel object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content</param>
        /// <response code="204">Submodel updated successfully</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpPatch]
        [Route("shells/{aasIdentifier}/submodels/{submodelIdentifier}")]
        [ValidateModelState]
        [SwaggerOperation("PatchSubmodelAasRepository")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public async virtual Task<IActionResult> PatchSubmodelAasRepository([FromBody]Submodel body, [FromRoute][Required]string aasIdentifier, 
		[FromRoute][Required]string submodelIdentifier, [FromQuery]string? level)
        { 
            var decodedAasIdentifier = _decoderService.Decode("aasIdentifier", aasIdentifier);
            var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);

            _logger.LogInformation($"Received request to update the submodel with id {decodedSubmodelIdentifier} from the AAS with id {decodedAasIdentifier}");

            ISecurityConfig securityConfig = new SecurityConfig(Program.noSecurity, this);

            await _dbRequestHandlerService.UpdateSubmodelById(securityConfig, decodedAasIdentifier, decodedSubmodelIdentifier, (ISubmodel)body);

            return NoContent();
        }

        /// <summary>
        /// Updates the metadata attributes of the Submodel
        /// </summary>
        /// <param name="body">Submodel object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <response code="204">Submodel updated successfully</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpPatch]
        [Route("shells/{aasIdentifier}/submodels/{submodelIdentifier}/$metadata")]
        [ValidateModelState]
        [SwaggerOperation("PatchSubmodelByIdMetadataAasRepository")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public async virtual Task<IActionResult> PatchSubmodelByIdMetadataAasRepository([FromBody]SubmodelMetadata body, [FromRoute][Required]string aasIdentifier, 
		[FromRoute][Required]string submodelIdentifier)
        { 
            var decodedAasIdentifier = _decoderService.Decode("aasIdentifier", aasIdentifier);
            var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);

            if (decodedAasIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedAasIdentifier)} is null");
            }

            if (decodedSubmodelIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedSubmodelIdentifier)} is null");
            }

            _logger.LogInformation($"Received Request to update for submodel with id {decodedSubmodelIdentifier} from the aas with id {decodedAasIdentifier}");

            if (body == null)
            {
                return BadRequest($"Could not proceed, as {nameof(body)} is null.");
            }

            //Reverse mapping from Metadata to submodel element
            var submodel = _mappingService.Map(body, "metadata") as ISubmodel;

            //Update
            if (submodel == null)
            {
                return BadRequest($"Could not update Submodel  as {nameof(submodel)} is null.");
            }

            var securityConfig = new SecurityConfig(Program.noSecurity, this);
            await _dbRequestHandlerService.UpdateSubmodelById(securityConfig, decodedAasIdentifier, decodedSubmodelIdentifier, submodel);

            return NoContent();
        }

        /// <summary>
        /// Updates the values of the Submodel
        /// </summary>
        /// <param name="body">Submodel object in the ValueOnly representation</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content</param>
        /// <response code="204">Submodel updated successfully</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpPatch]
        [Route("shells/{aasIdentifier}/submodels/{submodelIdentifier}/$value")]
        [ValidateModelState]
        [SwaggerOperation("PatchSubmodelByIdValueOnlyAasRepository")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public virtual async Task<IActionResult> PatchSubmodelByIdValueOnlyAasRepository([FromBody]SubmodelValue body, [FromRoute][Required]string aasIdentifier, 
		[FromRoute][Required]string submodelIdentifier, [FromQuery]string? level)
        { 
            var decodedAasIdentifier = _decoderService.Decode("aasIdentifier", aasIdentifier);
            var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);

            if (decodedAasIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedAasIdentifier)} is null");
            }

            if (decodedSubmodelIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedSubmodelIdentifier)} is null");
            }

            _logger.LogInformation($"Received request to update the submodel with id {decodedSubmodelIdentifier} from the aas with tid {decodedAasIdentifier} by value.");

            if (body == null)
            {
                return BadRequest($"Could not proceed, as {nameof(body)} is null.");
            }

            var submodel = _mappingService.Map(body, "value") as Submodel;
            if (submodel == null)
            {
                return BadRequest($"Could not update Submodel  as {nameof(submodel)} is null.");
            }

            var securityConfig = new SecurityConfig(Program.noSecurity, this);
            await _dbRequestHandlerService.UpdateSubmodelById(securityConfig, decodedAasIdentifier, decodedSubmodelIdentifier, submodel);

            return NoContent();
        }

        /// <summary>
        /// Updates an existing submodel element value at a specified path within submodel elements hierarchy
        /// </summary>
        /// <param name="body">The updated value of the submodel element</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content</param>
        /// <response code="204">Submodel element updated successfully</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpPatch]
        [Route("shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}")]
        [ValidateModelState]
        [SwaggerOperation("PatchSubmodelElementValueByPathAasRepository")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public virtual async Task<IActionResult> PatchSubmodelElementValueByPathAasRepository([FromBody]ISubmodelElement body, [FromRoute][Required]string aasIdentifier, 
		[FromRoute][Required]string submodelIdentifier, [FromRoute][Required]string idShortPath, [FromQuery]string? level)
        { 
            var decodedAasIdentifier = _decoderService.Decode("aasIdentifier", aasIdentifier);
            var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);
            if (decodedAasIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedAasIdentifier)} is null");
            }

            if (decodedSubmodelIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedSubmodelIdentifier)} is null");
            }

            _logger.LogInformation($"Received request to update the submodel element at {idShortPath} from submodel with id {decodedSubmodelIdentifier} from the AAS with id {decodedAasIdentifier}");

            if (body == null)
            {
                return BadRequest($"Could not proceed, as {nameof(body)} is null.");
            }
            var securityConfig = new SecurityConfig(Program.noSecurity, this);
            await _dbRequestHandlerService.UpdateSubmodelElementByPath(securityConfig, decodedAasIdentifier, decodedSubmodelIdentifier, idShortPath, body);

            return NoContent();
        }

        /// <summary>
        /// Updates the metadata attributes of an existing submodel element value at a specified path within submodel elements hierarchy
        /// </summary>
        /// <param name="body">The updated metadata attributes of the submodel element</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <response code="204">Submodel element updated successfully</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpPatch]
        [Route("shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$metadata")]
        [ValidateModelState]
        [SwaggerOperation("PatchSubmodelElementValueByPathMetadata")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public async virtual Task<IActionResult> PatchSubmodelElementValueByPathMetadata([FromBody]ISubmodelElementMetadata body, [FromRoute][Required]string aasIdentifier, 
		[FromRoute][Required]string submodelIdentifier, [FromRoute][Required]string idShortPath)
        { 
            var decodedAasIdentifier = _decoderService.Decode("aasIdentifier", aasIdentifier);
            var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);
            if (decodedAasIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedAasIdentifier)} is null");
            }

            if (decodedSubmodelIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedSubmodelIdentifier)} is null");
            }

            _logger.LogInformation($"Received request to update the submodel element at {idShortPath} in the submodel with id {decodedSubmodelIdentifier} and the AAS with id {decodedAasIdentifier}");

            if (body == null)
            {
                return BadRequest($"Could not proceed, as {nameof(body)} is null.");
            }

            //Reverse mapping from Metadata to submodel element
            if (_mappingService.Map(body, "metadata") is not ISubmodelElement submodelElement)
            {
                return BadRequest($"Could not update Submodel  as {nameof(submodelElement)} is null.");
            }

            var securityConfig = new SecurityConfig(Program.noSecurity, this);
            //Update
            await _dbRequestHandlerService.UpdateSubmodelElementByPath(securityConfig, decodedAasIdentifier, decodedSubmodelIdentifier, idShortPath, submodelElement);

            return NoContent();
        }

        /// <summary>
        /// Updates the value of an existing submodel element value at a specified path within submodel elements hierarchy
        /// </summary>
        /// <param name="body">The updated value of the submodel element</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content</param>
        /// <response code="204">Submodel element updated successfully</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpPatch]
        [Route("shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$value")]
        [ValidateModelState]
        [SwaggerOperation("PatchSubmodelElementValueByPathValueOnly")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public async virtual Task<IActionResult> PatchSubmodelElementValueByPathValueOnly([FromBody]ISubmodelElementValue body, [FromRoute][Required]string aasIdentifier, 
		[FromRoute][Required]string submodelIdentifier, [FromRoute][Required]string idShortPath, [FromQuery]string? level)
        { 
            var decodedAasIdentifier = _decoderService.Decode("aasIdentifier", aasIdentifier);
            var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);
            if (decodedAasIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedAasIdentifier)} is null");
            }

            if (decodedSubmodelIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedSubmodelIdentifier)} is null");
            }

            _logger.LogInformation($"Received request to update the submodel element at {idShortPath} in the submodel with id {decodedSubmodelIdentifier} and the AAS with id {decodedAasIdentifier} by value.");
            if (body == null)
            {
                return BadRequest($"Could not proceed, as {nameof(body)} is null.");
            }

            //Reverse mapping from Metadata to submodel element
            var submodelElement = _mappingService.Map(body, "value") as ISubmodelElement;

            //Update
            if (submodelElement == null)
            {
                return BadRequest($"Could not update Submodel  as {nameof(submodelElement)} is null.");
            }

            var securityConfig = new SecurityConfig(Program.noSecurity, this);
            //Update
            await _dbRequestHandlerService.UpdateSubmodelElementByPath(securityConfig, decodedAasIdentifier, decodedSubmodelIdentifier, idShortPath, submodelElement);

            return NoContent();
        }

        /// <summary>
        /// Creates a new Asset Administration Shell
        /// </summary>
        /// <param name="body">Asset Administration Shell object</param>
        /// <response code="201">Asset Administration Shell created successfully</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="409">Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request.</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpPost]
        [Route("shells")]
        [ValidateModelState]
        [SwaggerOperation("PostAssetAdministrationShell")]
        [SwaggerResponse(statusCode: 201, type: typeof(AssetAdministrationShell), description: "Asset Administration Shell created successfully")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 409, type: typeof(Result), description: "Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request.")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public async virtual Task<IActionResult> PostAssetAdministrationShell([FromBody] AssetAdministrationShell body)
        {
            ProcessBody(body);

            var securityConfig = new SecurityConfig(Program.noSecurity, this);

            var output = await _dbRequestHandlerService.CreateAssetAdministrationShell(securityConfig, body);

            return CreatedAtAction("PostAssetAdministrationShell", output);
        }

        /// <summary>
        /// Creates a new submodel element
        /// </summary>
        /// <param name="body">Requested submodel element</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <response code="201">Submodel element created successfully</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="409">Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request.</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpPost]
        [Route("shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements")]
        [ValidateModelState]
        [SwaggerOperation("PostSubmodelElementAasRepository")]
        [SwaggerResponse(statusCode: 201, type: typeof(ISubmodelElement), description: "Submodel element created successfully")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 409, type: typeof(Result), description: "Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request.")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public async virtual Task<IActionResult> PostSubmodelElementAasRepository([FromBody] ISubmodelElement body, [FromRoute][Required] string aasIdentifier, 
		[FromRoute][Required] string submodelIdentifier, bool first)
        { 
            var decodedAasIdentifier = _decoderService.Decode("aasIdentifier", aasIdentifier);
            var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);
            if (decodedAasIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedAasIdentifier)} is null");
            }

            if (decodedSubmodelIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedSubmodelIdentifier)} is null");
            }

            _logger.LogInformation($"Received request to create a new submodel element in the submodel {decodedSubmodelIdentifier} and AAS {decodedAasIdentifier}");

            var securityConfig = new SecurityConfig(Program.noSecurity, this);

            ProcessBody(body);

            var output = await _dbRequestHandlerService.CreateSubmodelElement(securityConfig, decodedAasIdentifier, decodedSubmodelIdentifier, body, null, first);

            return CreatedAtAction("PostSubmodelElementAasRepository", output);
        }

        /// <summary>
        /// Creates a new submodel element at a specified path within submodel elements hierarchy
        /// </summary>
        /// <param name="body">Requested submodel element</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <response code="201">Submodel element created successfully</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="409">Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request.</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpPost]
        [Route("shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}")]
        [ValidateModelState]
        [SwaggerOperation("PostSubmodelElementByPathAasRepository")]
        [SwaggerResponse(statusCode: 201, type: typeof(ISubmodelElement), description: "Submodel element created successfully")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 409, type: typeof(Result), description: "Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request.")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public async virtual Task<IActionResult> PostSubmodelElementByPathAasRepository([FromBody]ISubmodelElement body, [FromRoute][Required]string aasIdentifier, 
		[FromRoute][Required]string submodelIdentifier, [FromRoute][Required]string idShortPath, bool first)
        { 
            var decodedAasIdentifier = _decoderService.Decode("aasIdentifier", aasIdentifier);
            var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);
            if (decodedAasIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedAasIdentifier)} is null");
            }

            if (decodedSubmodelIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedSubmodelIdentifier)} is null");
            }

            _logger.LogInformation($"Received request to create a new submodel element in the submodel {decodedSubmodelIdentifier} and AAS {decodedAasIdentifier}");

            var securityConfig = new SecurityConfig(Program.noSecurity, this);

            ProcessBody(body);

            var output = _dbRequestHandlerService.CreateSubmodelElement(securityConfig, decodedAasIdentifier, decodedSubmodelIdentifier, body, idShortPath, first);

            return CreatedAtAction("PostSubmodelElementByPathAasRepository", output);
        }

        /// <summary>
        /// Creates a submodel reference at the Asset Administration Shell
        /// </summary>
        /// <param name="body">Reference to the Submodel</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <response code="201">Submodel reference created successfully</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="409">Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request.</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpPost]
        [Route("shells/{aasIdentifier}/submodel-refs")]
        [ValidateModelState]
        [SwaggerOperation("PostSubmodelReferenceAasRepository")]
        [SwaggerResponse(statusCode: 201, type: typeof(Reference), description: "Submodel reference created successfully")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 409, type: typeof(Result), description: "Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request.")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public virtual IActionResult PostSubmodelReferenceAasRepository([FromBody]Reference body, [FromRoute][Required]string aasIdentifier)
        { 
            var decodedAasIdentifier = _decoderService.Decode("aasIdentifier", aasIdentifier);
            if (decodedAasIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedAasIdentifier)} is null");
            }

            _logger.LogInformation($"Received request to create a submodel reference in the AAS with id {decodedAasIdentifier}");

            ProcessBody(body);

            var securityConfig = new SecurityConfig(Program.noSecurity, this);

            var output = _dbRequestHandlerService.CreateSubmodelReferenceInAAS(securityConfig, body, decodedAasIdentifier);

            return CreatedAtAction("PostSubmodelReferenceAasRepository", output);
        }

        /// <summary>
        /// Updates an existing Asset Administration Shell
        /// </summary>
        /// <param name="body">Asset Administration Shell object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <response code="204">Asset Administration Shell updated successfully</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpPut]
        [Route("shells/{aasIdentifier}")]
        [ValidateModelState]
        [SwaggerOperation("PutAssetAdministrationShellById")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public async virtual Task<IActionResult> PutAssetAdministrationShellById([FromBody]AssetAdministrationShell body, [FromRoute][Required]string aasIdentifier)
        {
            ProcessBody(body);

            var decodedAasIdentifier = _decoderService.Decode("aasIdentifier", aasIdentifier);
            if (decodedAasIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedAasIdentifier)} is null");
            }

            _logger.LogInformation($"Received request to replace the AAS with id {decodedAasIdentifier}");


            var securityConfig = new SecurityConfig(Program.noSecurity, this);
            await _dbRequestHandlerService.ReplaceAssetAdministrationShellById(securityConfig, decodedAasIdentifier, body);

            return NoContent();
        }

        /// <summary>
        /// Updates an existing Asset Administration Shell signed
        /// </summary>
        /// <param name="jws">Asset Administration Shell object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <response code="204">Asset Administration Shell updated successfully</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpPut]
        [Route("shells/{aasIdentifier}/$sign")]
        [ValidateModelState]
        [Consumes("text/plain")]
        [SwaggerOperation("PutAssetAdministrationShellByIdSigned")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public async virtual Task<IActionResult> PutAssetAdministrationShellByIdSigned([FromBody] string? jws, [FromRoute][Required] string aasIdentifier)
        {
            var decodedAasIdentifier = _decoderService.Decode("aasIdentifier", aasIdentifier);
            if (decodedAasIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedAasIdentifier)} is null");
            }

            var body = ProcessJWS(jws);

            if (body is AssetAdministrationShell)
            {
                _logger.LogInformation($"Received request to replace the AAS with id {decodedAasIdentifier}");

                var securityConfig = new SecurityConfig(Program.noSecurity, this);
                await _dbRequestHandlerService.ReplaceAssetAdministrationShellByIdSigned(securityConfig, decodedAasIdentifier, body as AssetAdministrationShell, jws);
            }

            return NoContent();
        }

        private IClass ProcessJWS(string? jws)
        {
            string certFile = "Andreas_Orzelski_Chain.pfx";
            string certPW = "i40";

            IClass body = null;
            if (System.IO.File.Exists(certFile))
            {
                X509Certificate2Collection xc = new X509Certificate2Collection();
                xc.Import(certFile, certPW, X509KeyStorageFlags.PersistKeySet);

                var i = 0;
                var x5c = new string[xc.Count];
                for (var j = xc.Count - 1; j >= 0; j--)
                {
                    var c = Convert.ToBase64String(xc[j].GetRawCertData());
                    x5c[i++] = c;
                }

                using (var certificate = new X509Certificate2(certFile, certPW))
                {
                    if (certificate == null)
                    {
                        return null;
                    }

                    // Validate
                    var parts = jws.Split('.');
                    var headerJson = Encoding.UTF8.GetString(Jose.Base64Url.Decode(parts[0]));
                    var header = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, JsonElement>>(headerJson);
                    if (header == null)
                    {
                        throw new InvalidOperationException("header missing");
                    }

                    if (!header.TryGetValue("x5c", out var x5cElement))
                    {
                        throw new InvalidOperationException("x5c not found in header");
                    }

                    x5c = x5cElement.EnumerateArray().Select(x => x.GetString()).ToArray();
                    if (x5c.Length == 0)
                    {
                        throw new InvalidOperationException("x5c is empty");
                    }

                    var certBytes = Convert.FromBase64String(x5c[0]);
                    var signingCert = new X509Certificate2(certBytes);
                    using var rsaPublic = signingCert.GetRSAPublicKey();

                    var payload = JWT.Decode(jws, rsaPublic, JwsAlgorithm.RS256);

                    var chain = new X509Chain
                    {
                        ChainPolicy = {
                                RevocationMode   = X509RevocationMode.NoCheck,
                                VerificationFlags= X509VerificationFlags.NoFlag,
                                TrustMode = X509ChainTrustMode.CustomRootTrust
                            }
                    };

                    var root = new X509Certificate2(Convert.FromBase64String(x5c.Last()));
                    chain.ChainPolicy.CustomTrustStore.Add(root);

                    for (i = 1; i < x5c.Length - 1; i++)
                    {
                        var cert = new X509Certificate2(Convert.FromBase64String(x5c[i]));
                        chain.ChainPolicy.ExtraStore.Add(cert);
                    }

                    var isValid = chain.Build(signingCert);

                    if (isValid)
                    {
                        var node = System.Text.Json.JsonSerializer.Deserialize<JsonNode>(payload);
                        body = Jsonization.Deserialize.SubmodelFrom(node);
                    }
                }
            }

            ProcessBody(body);

            return body;
        }

        /// <summary>
        /// Updates the Asset Information
        /// </summary>
        /// <param name="body">Asset Information object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <response code="204">Asset Information updated successfully</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpPut]
        [Route("shells/{aasIdentifier}/asset-information")]
        [ValidateModelState]
        [SwaggerOperation("PutAssetInformationAasRepository")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public async virtual Task<IActionResult> PutAssetInformationAasRepository([FromBody]AssetInformation body, [FromRoute][Required]string aasIdentifier)
        { 
            var decodedAasIdentifier = _decoderService.Decode("aasIdentifier", aasIdentifier);
            if (decodedAasIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedAasIdentifier)} is null");
            }

            _logger.LogInformation($"Received request to replace the asset information of the AAS with id {decodedAasIdentifier}");
            ProcessBody(body);

            var securityConfig = new SecurityConfig(Program.noSecurity, this);
            await _dbRequestHandlerService.ReplaceAssetInformation(securityConfig, decodedAasIdentifier, body);

            return NoContent();
        }


        /// <summary>
        /// Updates the Submodel
        /// </summary>
        /// <param name="body">Submodel object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <response code="204">Submodel updated successfully</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpPut]
        [Route("shells/{aasIdentifier}/submodels/{submodelIdentifier}")]
        [ValidateModelState]
        [SwaggerOperation("PutSubmodelByIdAasRepository")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public virtual async Task<IActionResult> PutSubmodelByIdAasRepository([FromBody]Submodel body, [FromRoute][Required]string aasIdentifier, 
		[FromRoute][Required]string submodelIdentifier)
        { 
            var decodedAasIdentifier = _decoderService.Decode("aasIdentifier", aasIdentifier);
            var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);
            if (decodedAasIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedAasIdentifier)} is null");
            }

            if (decodedSubmodelIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedSubmodelIdentifier)} is null");
            }

            _logger.LogInformation($"Received request to replace a a submodel {decodedSubmodelIdentifier} from the AAS {decodedAasIdentifier}");

            ProcessBody(body);

            var securityConfig = new SecurityConfig(Program.noSecurity, this);
            await _dbRequestHandlerService.ReplaceSubmodelById(securityConfig, decodedAasIdentifier, decodedSubmodelIdentifier, body);

            return NoContent();
        }


        /// <summary>
        /// Updates the Submodel signed
        /// </summary>
        /// <param name="jws">Submodel object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <response code="204">Submodel updated successfully</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpPut]
        [Route("shells/{aasIdentifier}/submodels/{submodelIdentifier}/$sign")]
        [ValidateModelState]
        [Consumes("text/plain")]
        [SwaggerOperation("PutSubmodelByIdSignedAasRepository")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public virtual async Task<IActionResult> PutSubmodelByIdSignedAasRepository([FromBody] string? jws, [FromRoute][Required] string aasIdentifier,
        [FromRoute][Required] string submodelIdentifier)
        {
            var decodedAasIdentifier = _decoderService.Decode("aasIdentifier", aasIdentifier);
            var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);
            if (decodedAasIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedAasIdentifier)} is null");
            }

            if (decodedSubmodelIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedSubmodelIdentifier)} is null");
            }

            _logger.LogInformation($"Received request to replace a a submodel {decodedSubmodelIdentifier} from the AAS {decodedAasIdentifier}");

            IClass body = ProcessJWS(jws);

            if (body is ISubmodel)
            {
                var securityConfig = new SecurityConfig(Program.noSecurity, this);
                await _dbRequestHandlerService.ReplaceSubmodelByIdSigned(securityConfig, decodedAasIdentifier, decodedSubmodelIdentifier, body as ISubmodel, jws);
            }

            return NoContent();
        }

        /// <summary>
        /// Updates an existing submodel element at a specified path within submodel elements hierarchy
        /// </summary>
        /// <param name="body">Requested submodel element</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <response code="204">Submodel element updated successfully</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpPut]
        [Route("shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}")]
        [ValidateModelState]
        [SwaggerOperation("PutSubmodelElementByPathAasRepository")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public virtual async Task<IActionResult> PutSubmodelElementByPathAasRepository([FromBody]ISubmodelElement body, [FromRoute][Required]string aasIdentifier, 
		[FromRoute][Required]string submodelIdentifier, [FromRoute][Required]string idShortPath)
        { 
            var decodedAasIdentifier = _decoderService.Decode("aasIdentifier", aasIdentifier);
            var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);
            if (decodedAasIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedAasIdentifier)} is null");
            }

            if (decodedSubmodelIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedSubmodelIdentifier)} is null");
            }

            _logger.LogInformation($"Received request to replace a submodel element at {idShortPath} dom the submodel with id {decodedSubmodelIdentifier} from the AAS {decodedAasIdentifier}");
            ProcessBody(body);

            var securityConfig = new SecurityConfig(Program.noSecurity, this);
            await _dbRequestHandlerService.ReplaceSubmodelElementByPath(securityConfig, decodedAasIdentifier, decodedSubmodelIdentifier, idShortPath, body);

            return NoContent();
        }

        /// <summary>
        /// Uploads file content to an existing submodel element at a specified path within submodel elements hierarchy
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="file">File to upload</param>
        /// <response code="204">Submodel element updated successfully</response>
        /// <response code="400">Bad Request</response>
        /// <response code="404">Not Found</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpPut]
        [Route("shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment")]
        [ValidateModelState]
        [SwaggerOperation("PutFileByPath")]
        [SwaggerResponse(statusCode: 204, type: typeof(Result), description: "Submodel element updated successfully")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public async virtual Task<IActionResult> PutFileByPath([FromRoute][Required] string aasIdentifier, [FromRoute][Required] string submodelIdentifier, [FromRoute] string? idShortPath,
                                                   IFormFile? file)
        {
            var decodedAasIdentifier = _decoderService.Decode("aasIdentifier", aasIdentifier);
            var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);
            if (decodedAasIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedAasIdentifier)} is null");
            }

            if (decodedSubmodelIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedSubmodelIdentifier)} is null");
            }

            var stream = new MemoryStream();
            if (file == null)
            {
                return NoContent();
            }

            file.CopyTo(stream);
            var fileName = file.FileName;
            var contentType = file.ContentType;

            if (idShortPath == null)
            {
                return BadRequest($"Could not proceed, as {nameof(idShortPath)} is null.");
            }

            var securityConfig = new SecurityConfig(Program.noSecurity, this);

            var idShortPathElements = _idShortPathParserService.ParseIdShortPath(idShortPath);
            await _dbRequestHandlerService.ReplaceFileByPath(securityConfig, decodedAasIdentifier, decodedSubmodelIdentifier, idShortPath, fileName, contentType, stream);

            return NoContent();
        }

        /// <summary>
        /// Replaces the thumbnail file
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="file">Thumbnail to upload</param>
        /// <response code="204">Thumbnail updated successfully</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="404">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpPut]
        [Route("shells/{aasIdentifier}/asset-information/thumbnail")]
        [ValidateModelState]
        [SwaggerOperation("PutThumbnail")]
        [SwaggerResponse(statusCode: 204, type: typeof(Result), description: "Thumbnail updated successfully")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public virtual async Task<IActionResult> PutThumbnail([FromRoute][Required] string aasIdentifier, IFormFile? file)
        {
            var decodedAasIdentifier = _decoderService.Decode("aasIdentifier", aasIdentifier);
            if (decodedAasIdentifier == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(decodedAasIdentifier)} is null");
            }

            var stream = new MemoryStream();
            if (file == null)
            {
                return NoContent();
            }

            file.CopyTo(stream);
            var fileName = file.FileName;
            var contentType = file.ContentType;

            var securityConfig = new SecurityConfig(Program.noSecurity, this);
            await _dbRequestHandlerService.ReplaceThumbnail(securityConfig, decodedAasIdentifier, fileName, contentType, stream);

            return NoContent();
        }

        private void ProcessBody(IClass body)
        {
            if (body == null)
            {
                throw new NotAllowed($"Cannot proceed as {nameof(body)} is null");
            }
            //Verify the body first
            _verificationService.VerifyRequestBody(body);
        }
    }
}
