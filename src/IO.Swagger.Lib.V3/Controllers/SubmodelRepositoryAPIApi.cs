/********************************************************************************
* Copyright (c) {2019 - 2024} Contributors to the Eclipse Foundation
*
* See the NOTICE file(s) distributed with this work for additional
* information regarding copyright ownership.
*
* This program and the accompanying materials are made available under the
* terms of the Apache License Version 2.0 which is available at
* https://www.apache.org/licenses/LICENSE-2.0
*
* SPDX-License-Identifier: Apache-2.0
********************************************************************************/

namespace IO.Swagger.Controllers;
/*
 * DotAAS Part 2 | HTTP/REST | Submodel Repository Service Specification
 *
 * The entire Submodel Repository Service Specification as part of the [Specification of the Asset Administration Shell: Part 2](http://industrialdigitaltwin.org/en/content-hub).   Publisher: Industrial Digital Twin Association (IDTA) 2023
 *
 * OpenAPI spec version: V3.0.3_SSP-001
 * Contact: info@idtwin.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Net.Mime;
using System.Runtime.ConstrainedExecution;
using System.Security.Claims;
using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;
using System.Security.Cryptography.Xml;
using System.Text;
using System.Text.Json;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using System.Threading.Tasks;
using AasxServer;
using AasxServerStandardBib.Interfaces;
using AasxServerStandardBib.Logging;
using AdminShellNS.Exceptions;
using AdminShellNS.Lib.V3.Models;
using Contracts;
using Contracts.DbRequests;
using Contracts.Exceptions;
using Contracts.Pagination;
using Contracts.Security;
using DataTransferObjects.MetadataDTOs;
using DataTransferObjects.ValueDTOs;
using IO.Swagger.Attributes;
using IO.Swagger.Lib.V3.Interfaces;
using IO.Swagger.Lib.V3.Models;
using IO.Swagger.Lib.V3.SerializationModifiers.Mappers;
using IO.Swagger.Lib.V3.Services;
using IO.Swagger.Models;
using Jose;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.IdentityModel.Tokens;
using Namotion.Reflection;
using Newtonsoft.Json;
using Swashbuckle.AspNetCore.Annotations;
using TimeStamp;
using static QRCoder.PayloadGenerator;

/// <summary>
/// 
/// </summary>
[Authorize(AuthenticationSchemes = "AasSecurityAuth")]
[ApiController]
public class SubmodelRepositoryAPIApiController : ControllerBase
{
    private readonly IAppLogger<SubmodelRepositoryAPIApiController> _logger;
    private readonly IBase64UrlDecoderService _decoderService;
    private readonly IReferenceModifierService _referenceModifierService;
    private readonly IJsonQueryDeserializer _jsonQueryDeserializer;
    private readonly IMappingService _mappingService;
    private readonly IPathModifierService _pathModifierService;
    private readonly IPaginationService _paginationService;
    private readonly IValidateSerializationModifierService _validateModifierService;
    private readonly IDbRequestHandlerService _dbRequestHandlerService;
    private readonly IMetamodelVerificationService _verificationService;
    private readonly IContractSecurityRules _contractSecurityRules;

    public SubmodelRepositoryAPIApiController(IAppLogger<SubmodelRepositoryAPIApiController> logger, IBase64UrlDecoderService decoderService,
                                              IReferenceModifierService referenceModifierService, IJsonQueryDeserializer jsonQueryDeserializer, IMappingService mappingService,
                                              IPathModifierService pathModifierService,
                                              IPaginationService paginationService,
                                              IValidateSerializationModifierService validateModifierService, IDbRequestHandlerService dbRequestHandlerService,
                                              IMetamodelVerificationService verificationService, IContractSecurityRules contractSecurityRules)
    {
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
        _decoderService = decoderService ?? throw new ArgumentNullException(nameof(decoderService));
        _referenceModifierService = referenceModifierService ?? throw new ArgumentNullException(nameof(referenceModifierService));
        _jsonQueryDeserializer = jsonQueryDeserializer ?? throw new ArgumentNullException(nameof(jsonQueryDeserializer));
        _mappingService = mappingService ?? throw new ArgumentNullException(nameof(mappingService));
        _pathModifierService = pathModifierService ?? throw new ArgumentNullException(nameof(pathModifierService));
        _paginationService = paginationService ?? throw new ArgumentNullException(nameof(paginationService));
        _validateModifierService = validateModifierService ?? throw new ArgumentNullException(nameof(validateModifierService));
        _dbRequestHandlerService = dbRequestHandlerService ?? throw new ArgumentNullException(nameof(dbRequestHandlerService));
        _verificationService = verificationService ?? throw new ArgumentNullException(nameof(verificationService));
        _contractSecurityRules = contractSecurityRules ?? throw new ArgumentNullException(nameof(contractSecurityRules));
    }

    // Events
    [HttpGet]
    [Route("/submodels/{submodelIdentifier}/events/{eventName}/status")]
    [ValidateModelState]
    [SwaggerOperation("GetEventStatus")]
    [SwaggerResponse(statusCode: 200, type: typeof(String), description: "List of Text")]
    [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
    public async virtual Task<IActionResult> GetEventStatus([FromRoute][Required] string submodelIdentifier, [FromRoute][Required] string eventName)
    {
        var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);

        if (decodedSubmodelIdentifier == null)
        {
            throw new NotAllowed($"Decoding {submodelIdentifier} returned null");
        }

        Submodel submodel = null;
        int packageIndex = 0;
        while (packageIndex < Program.env.Length)
        {
            var env = Program.env[packageIndex];
            var s = env?.AasEnv?.Submodels?.Where(sm => sm.Id == decodedSubmodelIdentifier).FirstOrDefault();
            if (s != null)
            {
                submodel = (Submodel)s;
                break;
            }
            packageIndex++;
        }

        if (submodel != null)
        {
            var securityConfig = new SecurityConfig(Program.noSecurity, this);

            if (!Program.noSecurity)
            {
                bool isAllowed = InitSecurity(securityConfig);
                if (!isAllowed)
                {
                    throw new NotAllowed($"NOT ALLOWED: API route");
                }
            }

            var eventRequest = new DbEventRequest()
            {
                DbEventRequestType = DbEventRequestType.Status,
                Env = Program.env,
                PackageIndex = packageIndex,
                EventName = eventName,
                Submodel = submodel,
            };

            var eventPayload = await _dbRequestHandlerService.ReadEventMessages(securityConfig, eventRequest);

            Program.signalNewData(2);

            if (eventPayload == null)
            {
                return NoContent();
            }

            var options = new JsonSerializerOptions
            {
                DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull
            };


            var payloadObjString = System.Text.Json.JsonSerializer.Serialize(eventPayload[0], options);

            return new ObjectResult(payloadObjString);
        }

        return NoContent();
    }

    [HttpGet]
    [Route("/submodels/{submodelIdentifier}/events/{eventName}")]
    [ValidateModelState]
    [SwaggerOperation("GetEventSubmodels")]
    [SwaggerResponse(statusCode: 200, type: typeof(String), description: "List of Text")]
    [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
    public async virtual Task<IActionResult> GetEventSubmodels([FromRoute][Required] string submodelIdentifier, [Required] string eventName,
        [FromQuery] bool? include, [FromQuery] int? limitSm, [FromQuery] int? offsetSm, [FromQuery] string? time = "")
    {
        var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);

        if (decodedSubmodelIdentifier == null)
        {
            throw new NotAllowed($"Decoding {submodelIdentifier} returned null");
        }

        Submodel submodel = null;
        int packageIndex = 0;
        while (packageIndex < Program.env.Length)
        {
            var env = Program.env[packageIndex];
            var s = env?.AasEnv?.Submodels?.Where(sm => sm.Id == decodedSubmodelIdentifier).FirstOrDefault();
            if (s != null)
            {
                submodel = (Submodel)s;
                break;
            }
            packageIndex++;
        }

        if (submodel != null)
        {
            var securityConfig = new SecurityConfig(Program.noSecurity, this);

            if (!Program.noSecurity)
            {
                bool isAllowed = InitSecurity(securityConfig);
                if (!isAllowed)
                {
                    throw new NotAllowed($"NOT ALLOWED: API route");
                }
            }

            bool wp = false;
            if (include.HasValue && include != null)
            {
                wp = (bool)include;
            }
            bool smOnly = false;
            int limSm = 1000;
            if (limitSm.HasValue && limitSm != null)
            {
                limSm = (int)limitSm;
            }
            int offSm = 0;
            if (offsetSm.HasValue && offsetSm != null)
            {
                offSm = (int)offsetSm;
            }
            int limSme = 1000;
            int offSme = 0;

            //ToDo: Find out whether we need refresh
            //if (diff.StartsWith("refresh="))
            //{
            //    diff = diff.Replace("refresh=", "");
            //    Response.Headers["Refresh"] = diff;
            //    int s = Convert.ToInt32(diff);
            //    diff = TimeStamp.DateTimeToString(DateTime.UtcNow.AddSeconds(-s));
            //}

            var eventRequest = new DbEventRequest()
            {
                DbEventRequestType = DbEventRequestType.Submodels,
                Env = Program.env,
                PackageIndex = packageIndex,
                EventName = eventName,
                Submodel = submodel,
                Time = time,
                IsInclude = wp,
                LimitSm = limSm,
                LimitSme = limSme,
                OffsetSm = offSm,
                OffsetSme = offSme,
                ExternalBlazor = Program.externalBlazor
            };

            var eventPayload = await _dbRequestHandlerService.ReadEventMessages(securityConfig, eventRequest);

            Program.signalNewData(2);

            if (eventPayload == null)
            {
                return NoContent();
            }

            var options = new JsonSerializerOptions
            {
                DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull
            };


            var payloadObjString = System.Text.Json.JsonSerializer.Serialize(eventPayload, options);

            return new ObjectResult(payloadObjString);
        }

        return NoContent();
    }


    static bool debug = false;
    static bool isRunning = false;

    [HttpPut]
    [Route("/submodels/{submodelIdentifier}/events/{eventName}")]
    [ValidateModelState]
    [SwaggerOperation("PutEventMessages")]
    [Consumes("text/plain")]
    [SwaggerResponse(statusCode: 200, type: typeof(String), description: "List of Text")]
    [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
    public async virtual Task<IActionResult> PutEventMessages([FromRoute][Required] string submodelIdentifier, [Required] string eventName, [FromBody][Required] string body)
    {
        if (debug)
        {
            if (isRunning)
            {
                return NoContent();
            }
            isRunning = true;
        }

        // int packageIndex;
        var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);

        if (decodedSubmodelIdentifier == null)
        {
            isRunning = false;
            throw new NotAllowed($"Decoding {submodelIdentifier} returned null");
        }

        var securityConfig = new SecurityConfig(Program.noSecurity, this);

        Submodel submodel = null;
        int packageIndex = 0;
        while (packageIndex < Program.env.Length)
        {
            var env = Program.env[packageIndex];
            var s = env?.AasEnv?.Submodels?.Where(sm => sm.Id == decodedSubmodelIdentifier).FirstOrDefault();
            if (s != null)
            {
                submodel = (Submodel)s;
                break;
            }
            packageIndex++;
        }

        if (!Program.noSecurity)
        {
            bool isAllowed = InitSecurity(securityConfig);
            if (!isAllowed)
            {
                throw new NotAllowed($"NOT ALLOWED: API route");
            }
        }

        // Now you can use jsonBody as needed

        var eventRequest = new DbEventRequest()
        {
            Env = Program.env,
            PackageIndex = packageIndex,
            EventName = eventName,
            Submodel = submodel,
            Body = body,
        };

        await _dbRequestHandlerService.UpdateEventMessages(securityConfig, eventRequest);

        Program.signalNewData(2);

        if (debug)
        {
            isRunning = false;
        }

        return NoContent();
    }

    // End Events

    /// <summary>
    /// Deletes file content of an existing submodel element at a specified path within submodel elements hierarchy
    /// </summary>
    /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
    /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
    /// <response code="200">Submodel element updated successfully</response>
    /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
    /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
    /// <response code="403">Forbidden</response>
    /// <response code="404">Not Found</response>
    /// <response code="500">Internal Server Error</response>
    /// <response code="0">Default error handling for unmentioned status codes</response>
    [HttpDelete]
    [Route("submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment")]
    [ValidateModelState]
    [SwaggerOperation("DeleteFileByPathSubmodelRepo")]
    [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
    [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
    [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
    [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
    [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
    [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
    public async virtual Task<IActionResult> DeleteFileByPathSubmodelRepo([FromRoute][Required] string submodelIdentifier, [FromRoute][Required] string idShortPath)
    {
        var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);

        if (decodedSubmodelIdentifier == null)
        {
            throw new NotAllowed($"Decoding {submodelIdentifier} returned null");
        }

        var securityConfig = new SecurityConfig(Program.noSecurity, this);

        _logger.LogInformation($"Received a request to delete a file at {idShortPath} from the submodel {decodedSubmodelIdentifier}");
        await _dbRequestHandlerService.DeleteFileByPath(securityConfig, null, decodedSubmodelIdentifier, idShortPath);

        return NoContent();
    }

    /// <summary>
    /// Deletes a Submodel
    /// </summary>
    /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
    /// <response code="204">Submodel deleted successfully</response>
    /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
    /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
    /// <response code="403">Forbidden</response>
    /// <response code="404">Not Found</response>
    /// <response code="500">Internal Server Error</response>
    /// <response code="0">Default error handling for unmentioned status codes</response>
    [HttpDelete]
    [Route("submodels/{submodelIdentifier}")]
    [ValidateModelState]
    [SwaggerOperation("DeleteSubmodelById")]
    [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
    [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
    [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
    [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
    [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
    [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
    public async virtual Task<IActionResult> DeleteSubmodelById([FromRoute][Required] string submodelIdentifier)
    {
        var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);

        if (decodedSubmodelIdentifier == null)
        {
            throw new NotAllowed($"Decoding {submodelIdentifier} returned null");
        }

        _logger.LogInformation($"Received a request to delete a submodel with id {decodedSubmodelIdentifier}");
        var securityConfig = new SecurityConfig(Program.noSecurity, this);

        await _dbRequestHandlerService.DeleteSubmodelById(securityConfig, null, decodedSubmodelIdentifier);

        return NoContent();
    }

    /// <summary>
    /// Deletes a Submodel jws file
    /// </summary>
    /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
    /// <response code="204">Submodel deleted successfully</response>
    /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
    /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
    /// <response code="403">Forbidden</response>
    /// <response code="404">Not Found</response>
    /// <response code="500">Internal Server Error</response>
    /// <response code="0">Default error handling for unmentioned status codes</response>
    [HttpDelete]
    [Route("submodels/{submodelIdentifier}/$sign")]
    [ValidateModelState]
    [SwaggerOperation("DeleteSubmodelByIdSigned")]
    [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
    [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
    [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
    [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
    [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
    [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
    public async virtual Task<IActionResult> DeleteSubmodelByIdSigned([FromRoute][Required] string submodelIdentifier)
    {
        var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);

        if (decodedSubmodelIdentifier == null)
        {
            throw new NotAllowed($"Decoding {submodelIdentifier} returned null");
        }

        _logger.LogInformation($"Received a request to delete submodel sign file with id {decodedSubmodelIdentifier}");
        var securityConfig = new SecurityConfig(Program.noSecurity, this);

        await _dbRequestHandlerService.DeleteSubmodelByIdSigned(securityConfig, null, decodedSubmodelIdentifier);

        return NoContent();
    }

    /// <summary>
    /// Deletes a submodel element at a specified path within the submodel elements hierarchy
    /// </summary>
    /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
    /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
    /// <response code="204">Submodel element deleted successfully</response>
    /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
    /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
    /// <response code="403">Forbidden</response>
    /// <response code="404">Not Found</response>
    /// <response code="500">Internal Server Error</response>
    /// <response code="0">Default error handling for unmentioned status codes</response>
    [HttpDelete]
    [Route("submodels/{submodelIdentifier}/submodel-elements/{idShortPath}")]
    [ValidateModelState]
    [SwaggerOperation("DeleteSubmodelElementByPathSubmodelRepo")]
    [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
    [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
    [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
    [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
    [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
    [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
    public async virtual Task<IActionResult> DeleteSubmodelElementByPathSubmodelRepo([FromRoute][Required] string submodelIdentifier, [FromRoute][Required] string idShortPath)
    {
        var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);

        if (decodedSubmodelIdentifier == null)
        {
            throw new NotAllowed($"Decoding {submodelIdentifier} returned null");
        }

        var securityConfig = new SecurityConfig(Program.noSecurity, this);

        _logger.LogInformation($"Received a request to delete a submodel element at {idShortPath} from submodel with id {decodedSubmodelIdentifier}");
        // return StatusCode(500, default(Result));

        await _dbRequestHandlerService.DeleteSubmodelElementByPath(securityConfig, null, decodedSubmodelIdentifier, idShortPath);

        return NoContent();
    }

    /// <summary>
    /// Returns all submodel elements including their hierarchy
    /// </summary>
    /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
    /// <param name="limit">The maximum number of elements in the response array</param>
    /// <param name="cursor">A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue</param>
    /// <param name="level">Determines the structural depth of the respective resource content</param>
    /// <param name="extent">Determines to which extent the resource is being serialized</param>
    /// <response code="200">List of found submodel elements</response>
    /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
    /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
    /// <response code="403">Forbidden</response>
    /// <response code="404">Not Found</response>
    /// <response code="500">Internal Server Error</response>
    /// <response code="0">Default error handling for unmentioned status codes</response>
    [HttpGet]
    [Route("submodels/{submodelIdentifier}/submodel-elements")]
    [ValidateModelState]
    [SwaggerOperation("GetAllSubmodelElements")]
    [SwaggerResponse(statusCode: 200, type: typeof(GetSubmodelElementsResult), description: "List of found submodel elements")]
    [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
    [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
    [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
    [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
    [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
    [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
    public async virtual Task<IActionResult> GetAllSubmodelElements([FromRoute][Required] string submodelIdentifier,
    [FromQuery] int? limit, [FromQuery] string? cursor, [FromQuery] string? level,
    [FromQuery] string? extent, [FromQuery] string? diff)
    {
        //Validate level and extent
        var levelEnum = _validateModifierService.ValidateLevel(level);
        var extentEnum = _validateModifierService.ValidateExtent(extent);
        var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);

        if (decodedSubmodelIdentifier == null)
        {
            throw new NotAllowed($"Decoding {submodelIdentifier} returned null");
        }

        _logger.LogInformation($"Received a request to get all the submodel elements from submodel with id {decodedSubmodelIdentifier}");

        var securityConfig = new SecurityConfig(Program.noSecurity, this);

        var paginationParameters = new PaginationParameters(cursor, limit);
        var result = await _dbRequestHandlerService.ReadPagedSubmodelElements(paginationParameters, securityConfig, null, decodedSubmodelIdentifier, levelEnum, extentEnum);
        var submodelElements = result.ConvertAll(x => x as ISubmodelElement);

        var filtered = new List<ISubmodelElement>();
        if (!diff.IsNullOrEmpty())
        {
            try
            {
                var _diff = TimeStamp.StringToDateTime(diff);
                Console.WriteLine(_diff.ToString());
                _diff = DateTime.Parse(diff);
                Console.WriteLine(_diff.ToString());
                filtered = filterSubmodelElements(submodelElements, _diff);
            }
            catch
            {
                // ignored
            }
        }
        else
        {
            filtered = submodelElements;
        }

        var smePaginatedList = _paginationService.GetPaginatedResult(filtered, paginationParameters);
        var output = new PagedResult { result = smePaginatedList.result, paging_metadata = smePaginatedList.paging_metadata };
        return new ObjectResult(output);
    }

    List<ISubmodelElement?> filterSubmodelElements(List<ISubmodelElement?> submodelElements, DateTime diff)
    {
        var output = new List<ISubmodelElement?>();

        foreach (var sme in submodelElements.Where(sme => sme != null && (sme.TimeStampTree - diff).TotalMilliseconds > 1))
        {
            List<ISubmodelElement?> smeDiff;
            switch (sme)
            {
                case SubmodelElementCollection smc:
                {
                    smeDiff = filterSubmodelElements(smc.Value ?? [], diff);
                    if (smeDiff.Count != 0)
                    {
                        var smcDiff = new SubmodelElementCollection(
                                                                    extensions: smc.Extensions,
                                                                    category: smc.Category,
                                                                    idShort: smc.IdShort,
                                                                    displayName: smc.DisplayName,
                                                                    description: smc.Description,
                                                                    semanticId: smc.SemanticId,
                                                                    supplementalSemanticIds: smc.SupplementalSemanticIds,
                                                                    qualifiers: smc.Qualifiers,
                                                                    embeddedDataSpecifications: smc.EmbeddedDataSpecifications,
                                                                    value: smeDiff)
                        { Parent = smc.Parent };
                        output.Add(smcDiff);
                    }
                    else if ((smc.TimeStamp - diff).TotalMilliseconds > 1)
                    {
                        output.Add(smc);
                    }

                    break;
                }
                case SubmodelElementList sml:
                {
                    smeDiff = filterSubmodelElements(sml.Value ?? [], diff);
                    if (smeDiff.Count != 0)
                    {
                        var smlDiff = new SubmodelElementList(
                                                              typeValueListElement: sml.TypeValueListElement,
                                                              extensions: sml.Extensions,
                                                              category: sml.Category,
                                                              idShort: sml.IdShort,
                                                              displayName: sml.DisplayName,
                                                              description: sml.Description,
                                                              semanticId: sml.SemanticId,
                                                              supplementalSemanticIds: sml.SupplementalSemanticIds,
                                                              qualifiers: sml.Qualifiers,
                                                              embeddedDataSpecifications: sml.EmbeddedDataSpecifications,
                                                              value: smeDiff)
                        { Parent = sml.Parent };
                        output.Add(smlDiff);
                    }
                    else if ((sml.TimeStamp - diff).TotalMilliseconds > 1)
                    {
                        output.Add(sml);
                    }

                    break;
                }
                default:
                    output.Add(sme);
                    break;
            }
        }

        return output;
    }

    /// <summary>
    /// Returns the metadata attributes of all submodel elements including their hierarchy
    /// </summary>
    /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
    /// <param name="limit">The maximum number of elements in the response array</param>
    /// <param name="cursor">A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue</param>
    /// <param name="level">Determines the structural depth of the respective resource content</param>
    /// <param name="diff">Filters response, only elements changed after DateTime</param>
    /// <response code="200">List of found submodel elements</response>
    /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
    /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
    /// <response code="403">Forbidden</response>
    /// <response code="404">Not Found</response>
    /// <response code="500">Internal Server Error</response>
    /// <response code="0">Default error handling for unmentioned status codes</response>
    [HttpGet]
    [Route("submodels/{submodelIdentifier}/submodel-elements/$metadata")]
    [ValidateModelState]
    [SwaggerOperation("GetAllSubmodelElementsMetadataSubmodelRepo")]
    [SwaggerResponse(statusCode: 200, type: typeof(MetadataPagedResult), description: "List of found submodel elements")]
    [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
    [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
    [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
    [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
    [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
    [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
    public async virtual Task<IActionResult> GetAllSubmodelElementsMetadataSubmodelRepo([FromRoute][Required] string submodelIdentifier,
                                                                            [FromQuery] int? limit, [FromQuery] string? cursor,
                                                                            [FromQuery] string? diff)
    {
        var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);

        if (decodedSubmodelIdentifier == null)
        {
            throw new NotAllowed($"Cannot proceed as {nameof(decodedSubmodelIdentifier)} is null");
        }

        _logger.LogInformation($"Received request to get the metadata of all the submodel elements from the submodel with id {decodedSubmodelIdentifier}");

        var securityConfig = new SecurityConfig(Program.noSecurity, this);

        var paginationParameters = new PaginationParameters(cursor, limit);
        var result = await _dbRequestHandlerService.ReadPagedSubmodelElements(paginationParameters, securityConfig, null, decodedSubmodelIdentifier, null, null);
        var submodelElements = result.ConvertAll(x => x as ISubmodelElement);

        var filtered = new List<ISubmodelElement>();
        if (!diff.IsNullOrEmpty())
        {
            try
            {
                var _diff = TimeStamp.StringToDateTime(diff);
                filtered = filterSubmodelElements(submodelElements, _diff);
            }
            catch
            {
                // ignored
            }
        }
        else
            filtered = submodelElements;

        var smePagedList = _paginationService.GetPaginatedResult(filtered, paginationParameters);
        var smeMetadataList = _mappingService.Map(smePagedList.result, "metadata");
        var output = new MetadataPagedResult() { result = smeMetadataList.ConvertAll(sme => (IMetadataDTO)sme), paging_metadata = smePagedList.paging_metadata };
        return new ObjectResult(output);
    }

    /// <summary>
    /// Returns all submodel elements including their hierarchy in the Path notation
    /// </summary>
    /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
    /// <param name="limit">The maximum number of elements in the response array</param>
    /// <param name="cursor">A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue</param>
    /// <param name="level">Determines the structural depth of the respective resource content</param>
	/// <param name="diff">Filters response, only elements changed after DateTime</param>
    /// <response code="200">List of found submodel elements in the Path notation</response>
    /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
    /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
    /// <response code="403">Forbidden</response>
    /// <response code="404">Not Found</response>
    /// <response code="500">Internal Server Error</response>
    /// <response code="0">Default error handling for unmentioned status codes</response>
    [HttpGet]
    [Route("submodels/{submodelIdentifier}/submodel-elements/$path")]
    [ValidateModelState]
    [SwaggerOperation("GetAllSubmodelElementsPathSubmodelRepo")]
    [SwaggerResponse(statusCode: 200, type: typeof(List<List<string>>), description: "List of found submodel elements in the Path notation")]
    [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
    [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
    [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
    [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
    [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
    [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
    public async virtual Task<IActionResult> GetAllSubmodelElementsPathSubmodelRepo([FromRoute][Required] string submodelIdentifier,
    [FromQuery] int? limit, [FromQuery] string? cursor, [FromQuery] string? level, [FromQuery] string? diff)
    {
        //Validate level and extent
        var levelEnum = _validateModifierService.ValidateLevel(level);

        var decodedSubmodelIdentifier = _decoderService.Decode($"submodelIdentifier", submodelIdentifier);

        _logger.LogDebug($"Received request to get all the submodel elements from the submodel with id {decodedSubmodelIdentifier}");

        var securityConfig = new SecurityConfig(Program.noSecurity, this);

        var paginationParameters = new PaginationParameters(cursor, limit);
        var result = await _dbRequestHandlerService.ReadPagedSubmodelElements(paginationParameters, securityConfig, null, decodedSubmodelIdentifier, levelEnum, null);
        var submodelElements = result.ConvertAll(x => x as ISubmodelElement);

        var filtered = new List<ISubmodelElement?>();
        if (!diff.IsNullOrEmpty())
        {
            try
            {
                var _diff = TimeStamp.StringToDateTime(diff);
                filtered = filterSubmodelElements(submodelElements, _diff);
            }
            catch
            {
                // ignored
            }
        }
        else
            filtered = submodelElements;

        var smePaginated = _paginationService.GetPaginatedResult(filtered, paginationParameters);
        var smePathList = _pathModifierService.ToIdShortPath(smePaginated.result.ConvertAll(sme => (ISubmodelElement)sme));
        var output = new PathPagedResult { result = smePathList, paging_metadata = smePaginated.paging_metadata };
        return new ObjectResult(output);
    }

    /// <summary>
    /// Returns the References of all submodel elements
    /// </summary>
    /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
    /// <param name="limit">The maximum number of elements in the response array</param>
    /// <param name="cursor">A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue</param>
    /// <param name="level">Determines the structural depth of the respective resource content</param>
    /// <response code="200">List of found submodel elements</response>
    /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
    /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
    /// <response code="403">Forbidden</response>
    /// <response code="404">Not Found</response>
    /// <response code="500">Internal Server Error</response>
    /// <response code="0">Default error handling for unmentioned status codes</response>
    [HttpGet]
    [Route("submodels/{submodelIdentifier}/submodel-elements/$reference")]
    [ValidateModelState]
    [SwaggerOperation("GetAllSubmodelElementsReferenceSubmodelRepo")]
    [SwaggerResponse(statusCode: 200, type: typeof(GetReferencesResult), description: "List of found submodel elements")]
    [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
    [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
    [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
    [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
    [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
    [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
    public async virtual Task<IActionResult> GetAllSubmodelElementsReferenceSubmodelRepo([FromRoute][Required] string submodelIdentifier, [FromQuery] int? limit,
    [FromQuery] string? cursor, [FromQuery] string? level)
    {
        //Validate level and extent
        var levelEnum = _validateModifierService.ValidateLevel(level);

        var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);

        if (decodedSubmodelIdentifier == null)
        {
            throw new NotAllowed($"Decoding {submodelIdentifier} returned null");
        }

        var securityConfig = new SecurityConfig(Program.noSecurity, this);

        _logger.LogInformation($"Received a request to get all the submodel elements from submodel with id {decodedSubmodelIdentifier}");
        var paginationParameters = new PaginationParameters(cursor, limit);
        var smeList = await _dbRequestHandlerService.ReadPagedSubmodelElements(paginationParameters, securityConfig, null, decodedSubmodelIdentifier, levelEnum, null);

        var smePagedList = _paginationService.GetPaginatedResult(smeList, paginationParameters);
        var smeReferences = _referenceModifierService.GetReferenceResult(smePagedList.result.ConvertAll(sme => (IReferable)sme));
        var output = new ReferencePagedResult(smeReferences, smePagedList.paging_metadata);
        return new ObjectResult(output);
    }

    /// <summary>
    /// Returns all submodel elements including their hierarchy in the ValueOnly representation
    /// </summary>
    /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
    /// <param name="limit">The maximum number of elements in the response array</param>
    /// <param name="cursor">A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue</param>
    /// <param name="level">Determines the structural depth of the respective resource content</param>
    /// <param name="extent">Determines to which extent the resource is being serialized</param>
	/// <param name="diff">Filters response, only elements changed after DateTime</param>
    /// <response code="200">List of found submodel elements</response>
    /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
    /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
    /// <response code="403">Forbidden</response>
    /// <response code="404">Not Found</response>
    /// <response code="500">Internal Server Error</response>
    /// <response code="0">Default error handling for unmentioned status codes</response>
    [HttpGet]
    [Route("submodels/{submodelIdentifier}/submodel-elements/$value")]
    [ValidateModelState]
    [SwaggerOperation("GetAllSubmodelElementsValueOnlySubmodelRepo")]
    [SwaggerResponse(statusCode: 200, type: typeof(ValueOnlyPagedResult), description: "List of found submodel elements")]
    [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
    [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
    [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
    [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
    [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
    [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
    public async virtual Task<IActionResult> GetAllSubmodelElementsValueOnlySubmodelRepo([FromRoute][Required] string submodelIdentifier,
    [FromQuery] int? limit, [FromQuery] string? cursor, [FromQuery] string? level,
    [FromQuery] string? extent, [FromQuery] string? diff)
    {
        //Validate level and extent
        var levelEnum = _validateModifierService.ValidateLevel(level);
        var extentEnum = _validateModifierService.ValidateExtent(extent);
        var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);

        if (decodedSubmodelIdentifier == null)
        {
            throw new NotAllowed($"Decoding {submodelIdentifier} returned null");
        }

        _logger.LogInformation($"Received request to get value of all the submodel elements from the submodel with id {decodedSubmodelIdentifier}");

        var securityConfig = new SecurityConfig(Program.noSecurity, this);

        var paginationParameters = new PaginationParameters(cursor, limit);
        var result = await _dbRequestHandlerService.ReadPagedSubmodelElements(paginationParameters, securityConfig, null, decodedSubmodelIdentifier, levelEnum, extentEnum);
        var submodelElements = result.ConvertAll(x => x as ISubmodelElement);

        var filtered = new List<ISubmodelElement>();
        if (!diff.IsNullOrEmpty())
        {
            try
            {
                var _diff = TimeStamp.StringToDateTime(diff);
                filtered = filterSubmodelElements(submodelElements, _diff);
            }
            catch
            {
                // ignored
            }
        }
        else
            filtered = submodelElements;

        var smePagedList = _paginationService.GetPaginatedResult(filtered, paginationParameters);
        var smeValues = _mappingService.Map(smePagedList.result, "value");
        var output = new ValueOnlyPagedResult() { result = smeValues.ConvertAll(sme => (IValueDTO)sme), paging_metadata = smePagedList.paging_metadata };
        return new ObjectResult(output);
    }

    /// <summary>
    /// Returns all Submodels
    /// </summary>
    /// <param name="semanticId">The value of the semantic id reference (BASE64-URL-encoded)</param>
    /// <param name="idShort">The Asset Administration Shell’s IdShort</param>
    /// <param name="limit">The maximum number of elements in the response array</param>
    /// <param name="cursor">A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue</param>
    /// <param name="level">Determines the structural depth of the respective resource content</param>
    /// <param name="extent">Determines to which extent the resource is being serialized</param>
    /// <response code="200">Requested Submodels</response>
    /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
    /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
    /// <response code="403">Forbidden</response>
    /// <response code="500">Internal Server Error</response>
    /// <response code="0">Default error handling for unmentioned status codes</response>
    [HttpGet]
    [Route("submodels")]
    [ValidateModelState]
    [SwaggerOperation("GetAllSubmodels")]
    [SwaggerResponse(statusCode: 200, type: typeof(PagedResult), description: "Requested Submodels")]
    [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
    [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
    [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
    [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
    [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
    public async virtual Task<IActionResult> GetAllSubmodels([FromQuery][StringLength(3072, MinimumLength = 1)] string? semanticId, [FromQuery] string? idShort, [FromQuery] int? limit, [FromQuery] string? cursor, [FromQuery] string? level, [FromQuery] string? extent)
    {
        //Validate level and extent
        var levelEnum = _validateModifierService.ValidateLevel(level);
        var extentEnum = _validateModifierService.ValidateExtent(extent);
        _logger.LogInformation($"Received a request to get all the submodels.");

        var reqSemanticId = _jsonQueryDeserializer.DeserializeReference("semanticId", semanticId);

        var securityConfig = new SecurityConfig(Program.noSecurity, this);
        var paginationParameters = new PaginationParameters(cursor, limit);

        var submodelList = await _dbRequestHandlerService.ReadPagedSubmodels(paginationParameters, securityConfig, reqSemanticId, idShort, levelEnum, extentEnum);

        var submodelsPagedList = _paginationService.GetPaginatedResult(submodelList, paginationParameters);
        var output = new PagedResult { result = submodelsPagedList.result, paging_metadata = submodelsPagedList.paging_metadata };
        return new ObjectResult(output);
    }

    /// <summary>
    /// Returns the metadata attributes of all Submodels
    /// </summary>
    /// <param name="semanticId">The value of the semantic id reference (BASE64-URL-encoded)</param>
    /// <param name="idShort">The Asset Administration Shell’s IdShort</param>
    /// <param name="limit">The maximum number of elements in the response array</param>
    /// <param name="cursor">A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue</param>
	/// <param name="level">Determines the structural depth of the respective resource content</param>
    /// <response code="200">Requested Submodels</response>
    /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
    /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
    /// <response code="403">Forbidden</response>
    /// <response code="500">Internal Server Error</response>
    /// <response code="0">Default error handling for unmentioned status codes</response>
    [HttpGet]
    [Route("submodels/$metadata")]
    [ValidateModelState]
    [SwaggerOperation("GetAllSubmodelsMetadata")]
    [SwaggerResponse(statusCode: 200, type: typeof(MetadataPagedResult), description: "Requested Submodels")]
    [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
    [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
    [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
    [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
    [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
    public async virtual Task<IActionResult> GetAllSubmodelsMetadata([FromQuery][StringLength(3072, MinimumLength = 1)] string? semanticId, [FromQuery] string? idShort, [FromQuery] int? limit, [FromQuery] string? cursor)
    {
        _logger.LogInformation($"Received request to get the metadata of all the submodels.");
        var securityConfig = new SecurityConfig(Program.noSecurity, this);

        var reqSemanticId = _jsonQueryDeserializer.DeserializeReference("semanticId", semanticId);
        var paginationParameters = new PaginationParameters(cursor, limit);

        var submodelList = await _dbRequestHandlerService.ReadPagedSubmodels(paginationParameters, securityConfig, reqSemanticId, idShort, null, null);

        var submodelPagedList = _paginationService.GetPaginatedResult(submodelList, paginationParameters);
        var smMetadataList = _mappingService.Map(submodelPagedList.result, "metadata");
        var output = new MetadataPagedResult() { result = smMetadataList.ConvertAll(sme => (IMetadataDTO)sme), paging_metadata = submodelPagedList.paging_metadata };
        return new ObjectResult(output);
    }

    /// <summary>
    /// Returns all Submodels in the Path notation
    /// </summary>
    /// <param name="semanticId">The value of the semantic id reference (BASE64-URL-encoded)</param>
    /// <param name="idShort">The Asset Administration Shell’s IdShort</param>
    /// <param name="limit">The maximum number of elements in the response array</param>
    /// <param name="cursor">A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue</param>
    /// <param name="level">Determines the structural depth of the respective resource content</param>
    /// <response code="200">Requested Submodels</response>
    /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
    /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
    /// <response code="403">Forbidden</response>
    /// <response code="500">Internal Server Error</response>
    /// <response code="0">Default error handling for unmentioned status codes</response>
    [HttpGet]
    [Route("submodels/$path")]
    [ValidateModelState]
    [SwaggerOperation("GetAllSubmodelsPath")]
    [SwaggerResponse(statusCode: 200, type: typeof(GetPathItemsResult), description: "Requested Submodels")]
    [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
    [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
    [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
    [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
    [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
    public async virtual Task<IActionResult> GetAllSubmodelsPath([FromQuery][StringLength(3072, MinimumLength = 1)] string? semanticId, [FromQuery] string? idShort, [FromQuery] int? limit, [FromQuery] string? cursor, [FromQuery] string? level)
    {
        //Validate level and extent
        var levelEnum = _validateModifierService.ValidateLevel(level);
        _logger.LogInformation($"Received request to get the metadata of all the submodels.");
        var securityConfig = new SecurityConfig(Program.noSecurity, this);

        var reqSemanticId = _jsonQueryDeserializer.DeserializeReference("semanticId", semanticId);
        var paginationParameters = new PaginationParameters(cursor, limit);

        var submodelList = await _dbRequestHandlerService.ReadPagedSubmodels(paginationParameters, securityConfig, reqSemanticId, idShort, levelEnum, null);

        var submodelPagedList = _paginationService.GetPaginatedResult(submodelList, paginationParameters);
        var submodelsPath = _pathModifierService.ToIdShortPath(submodelPagedList.result.ConvertAll(sm => (ISubmodel)sm));
        var output = new PathPagedResult() { result = submodelsPath, paging_metadata = submodelPagedList.paging_metadata };
        return new ObjectResult(output);
    }

    /// <summary>
    /// Returns the References for all Submodels
    /// </summary>
    /// <param name="semanticId">The value of the semantic id reference (BASE64-URL-encoded)</param>
    /// <param name="idShort">The Asset Administration Shell’s IdShort</param>
    /// <param name="limit">The maximum number of elements in the response array</param>
    /// <param name="cursor">A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue</param>
    /// <param name="level">Determines the structural depth of the respective resource content</param>
    /// <response code="200">References of the requested Submodels</response>
    /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
    /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
    /// <response code="403">Forbidden</response>
    /// <response code="500">Internal Server Error</response>
    /// <response code="0">Default error handling for unmentioned status codes</response>
    [HttpGet]
    [Route("submodels/$reference")]
    [ValidateModelState]
    [SwaggerOperation("GetAllSubmodelsReference")]
    [SwaggerResponse(statusCode: 200, type: typeof(GetReferencesResult), description: "References of the requested Submodels")]
    [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
    [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
    [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
    [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
    [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
    public async virtual Task<IActionResult> GetAllSubmodelsReference([FromQuery][StringLength(3072, MinimumLength = 1)] string? semanticId, [FromQuery] string? idShort, [FromQuery] int? limit, [FromQuery] string? cursor, [FromQuery] string? level)
    {
        _logger.LogInformation($"Received a request to get all the submodels.");
        var securityConfig = new SecurityConfig(Program.noSecurity, this);

        //Validate level and extent
        var levelEnum = _validateModifierService.ValidateLevel(level);
        var paginationParameters = new PaginationParameters(cursor, limit);

        var reqSemanticId = _jsonQueryDeserializer.DeserializeReference("semanticId", semanticId);
        var submodelList = await _dbRequestHandlerService.ReadPagedSubmodels(paginationParameters, securityConfig, reqSemanticId, idShort, levelEnum, null);

        var submodelsPagedList = _paginationService.GetPaginatedResult(submodelList, paginationParameters);
        var smReferences = _referenceModifierService.GetReferenceResult(submodelsPagedList.result.ConvertAll(sm => (IReferable)sm));
        var output = new ReferencePagedResult(smReferences, submodelsPagedList.paging_metadata);
        return new ObjectResult(output);
    }

    /// <summary>
    /// Returns all Submodels in their ValueOnly representation
    /// </summary>
    /// <param name="semanticId">The value of the semantic id reference (BASE64-URL-encoded)</param>
    /// <param name="idShort">The Asset Administration Shell’s IdShort</param>
    /// <param name="limit">The maximum number of elements in the response array</param>
    /// <param name="cursor">A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue</param>
    /// <param name="level">Determines the structural depth of the respective resource content</param>
    /// <param name="extent">Determines to which extent the resource is being serialized</param>
    /// <response code="200">Requested Submodels</response>
    /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
    /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
    /// <response code="403">Forbidden</response>
    /// <response code="404">Not Found</response>
    /// <response code="500">Internal Server Error</response>
    /// <response code="0">Default error handling for unmentioned status codes</response>
    [HttpGet]
    [Route("submodels/$value")]
    [ValidateModelState]
    [SwaggerOperation("GetAllSubmodelsValueOnly")]
    [SwaggerResponse(statusCode: 200, type: typeof(ValueOnlyPagedResult), description: "Requested Submodels")]
    [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
    [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
    [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
    [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
    [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
    [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
    public async virtual Task<IActionResult> GetAllSubmodelsValueOnly([FromQuery][StringLength(3072, MinimumLength = 1)] string? semanticId, [FromQuery] string? idShort, [FromQuery] int? limit, [FromQuery] string? cursor, [FromQuery] string? level, [FromQuery] string? extent)
    {
        //Validate level and extent
        var levelEnum = _validateModifierService.ValidateLevel(level);
        var extentEnum = _validateModifierService.ValidateExtent(extent);
        _logger.LogInformation($"Received a request to get all the submodels.");
        var securityConfig = new SecurityConfig(Program.noSecurity, this);

        var reqSemanticId = _jsonQueryDeserializer.DeserializeReference("semanticId", semanticId);
        var paginationParameters = new PaginationParameters(cursor, limit);

        var submodelList = await _dbRequestHandlerService.ReadPagedSubmodels(paginationParameters, securityConfig, reqSemanticId, idShort, levelEnum, extentEnum);

        var submodelsPagedList = _paginationService.GetPaginatedResult(submodelList, paginationParameters);
        var submodelsValue = _mappingService.Map(submodelsPagedList.result, "value");
        var output = new ValueOnlyPagedResult { result = submodelsValue.ConvertAll(sme => (IValueDTO)sme), paging_metadata = submodelsPagedList.paging_metadata };
        return new ObjectResult(output);
    }

    /// <summary>
    /// Downloads file content from a specific submodel element from the Submodel at a specified path
    /// </summary>
    /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
    /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
    /// <response code="200">Requested file</response>
    /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
    /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
    /// <response code="403">Forbidden</response>
    /// <response code="404">Not Found</response>
    /// <response code="405">Method not allowed - Download only valid for File submodel element</response>
    /// <response code="500">Internal Server Error</response>
    /// <response code="0">Default error handling for unmentioned status codes</response>
    [HttpGet]
    [Route("submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment")]
    [ValidateModelState]
    [SwaggerOperation("GetFileByPathSubmodelRepo")]
    [SwaggerResponse(statusCode: 200, type: typeof(byte[]), description: "Requested file")]
    [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
    [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
    [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
    [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
    [SwaggerResponse(statusCode: 405, type: typeof(Result), description: "Method not allowed - Download only valid for File submodel element")]
    [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
    [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
    public async virtual Task<IActionResult> GetFileByPathSubmodelRepo([FromRoute][Required] string submodelIdentifier, [FromRoute][Required] string idShortPath)
    {
        var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);

        _logger.LogInformation($"Received a request to get file at {idShortPath} from submodel with id {decodedSubmodelIdentifier}");
        if (decodedSubmodelIdentifier == null)
        {
            throw new NotAllowed($"Cannot proceed as {nameof(decodedSubmodelIdentifier)} is null");
        }

        var securityConfig = new SecurityConfig(Program.noSecurity, this);

        var dbFileRequestResult = await _dbRequestHandlerService.ReadFileByPath(securityConfig, null, decodedSubmodelIdentifier, idShortPath);

        var fileName = dbFileRequestResult.File;
        var fileSize = dbFileRequestResult.FileSize;
        var content = dbFileRequestResult.Content;

        //content-disposition so that the aasx file can be downloaded from the web browser.
        ContentDisposition contentDisposition = new()
        {
            FileName = fileName ?? throw new NullValueException(nameof(fileName)),
            Inline = fileName.EndsWith(".pdf", StringComparison.InvariantCulture)
        };

        HttpContext.Response.Headers.Append("Content-Disposition", contentDisposition.ToString());
        HttpContext.Response.ContentLength = fileSize;
        if (fileName.EndsWith(".svg", StringComparison.InvariantCulture))
        {
            HttpContext.Response.ContentType = "image/svg+xml";
        }

        if (fileName.EndsWith(".pdf", StringComparison.InvariantCulture))
        {
            HttpContext.Response.ContentType = "application/pdf";
        }

        await HttpContext.Response.Body.WriteAsync(content);
        return new EmptyResult();
    }

    /// <summary>
    /// Returns the Operation result of an asynchronously invoked Operation
    /// </summary>
    /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
    /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
    /// <param name="handleId">The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (UTF8-BASE64-URL-encoded)</param>
    /// <response code="200">Operation result object</response>
    /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
    /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
    /// <response code="403">Forbidden</response>
    /// <response code="404">Not Found</response>
    /// <response code="500">Internal Server Error</response>
    /// <response code="0">Default error handling for unmentioned status codes</response>
    [HttpGet]
    [Route("submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/operation-results/{handleId}")]
    [ValidateModelState]
    [SwaggerOperation("GetOperationAsyncResult")]
    [SwaggerResponse(statusCode: 200, type: typeof(OperationResult), description: "Operation result object")]
    [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
    [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
    [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
    [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
    [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
    [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
    public virtual IActionResult GetOperationAsyncResult([FromRoute][Required] string submodelIdentifier, [FromRoute][Required] string idShortPath,
    [FromRoute][Required] string handleId) => throw new NotImplementedException();

    /// <summary>
    /// Returns the Operation result of an asynchronously invoked Operation
    /// </summary>
    /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
    /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
    /// <param name="handleId">The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (UTF8-BASE64-URL-encoded)</param>
    /// <response code="200">Value of the operation result object</response>
    /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
    /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
    /// <response code="403">Forbidden</response>
    /// <response code="404">Not Found</response>
    /// <response code="500">Internal Server Error</response>
    /// <response code="0">Default error handling for unmentioned status codes</response>
    [HttpGet]
    [Route("submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/operation-results/{handleId}/$value")]
    [ValidateModelState]
    [SwaggerOperation("GetOperationAsyncResultValueOnly")]
    [SwaggerResponse(statusCode: 200, type: typeof(IValueDTO), description: "Value of the operation result object")]
    [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
    [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
    [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
    [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
    [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
    [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
    public virtual IActionResult GetOperationAsyncResultValueOnly([FromRoute][Required] string submodelIdentifier, [FromRoute][Required] string idShortPath,
    [FromRoute][Required] string handleId) => throw new NotImplementedException();

    /// <summary>
    /// Returns the status of an asynchronously invoked Operation
    /// </summary>
    /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
    /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
    /// <param name="handleId">The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (UTF8-BASE64-URL-encoded)</param>
    /// <response code="200">Operation result object containing information that the &#x27;executionState&#x27; is still &#x27;Running&#x27;</response>
    /// <response code="302">The target resource is available but at a different location.</response>
    /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
    /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
    /// <response code="403">Forbidden</response>
    /// <response code="404">Not Found</response>
    /// <response code="500">Internal Server Error</response>
    /// <response code="0">Default error handling for unmentioned status codes</response>
    [HttpGet]
    [Route("submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/operation-status/{handleId}")]
    [ValidateModelState]
    [SwaggerOperation("GetOperationAsyncStatus")]
    [SwaggerResponse(statusCode: 200, type: typeof(BaseOperationResult), description: "Operation result object containing information that the &#x27;executionState&#x27; is still &#x27;Running&#x27;")]
    [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
    [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
    [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
    [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
    [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
    [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
    public virtual IActionResult GetOperationAsyncStatus([FromRoute][Required] string submodelIdentifier, [FromRoute][Required] string idShortPath,
    [FromRoute][Required] string handleId) => throw new NotImplementedException();

    //TODO:jtikekar @Andreas the route is same as GetSubmodelById
    /// <summary>
    /// Returns a specific Submodel
    /// </summary>
    /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
    /// <response code="200">Requested Submodel</response>
    /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
    /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
    /// <response code="403">Forbidden</response>
    /// <response code="404">Not Found</response>
    /// <response code="500">Internal Server Error</response>
    /// <response code="0">Default error handling for unmentioned status codes</response>
    [HttpHead]
    [Route("submodels/{submodelIdentifier}")]
    [ValidateModelState]
    [SwaggerOperation("GetSubmodelPolicyHeader")]
    [SwaggerResponse(statusCode: 200, type: typeof(Submodel), description: "Requested Header")]
    [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
    [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
    [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
    [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
    [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
    [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
    public async virtual Task<IActionResult> GetSubmodelPolicyHeader([FromRoute][Required] string submodelIdentifier)
    {
        var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);

        _logger.LogInformation($"Received head request to get the submodel policy for id {decodedSubmodelIdentifier}");
        if (decodedSubmodelIdentifier == null)
        {
            throw new NotAllowed($"Cannot proceed as {nameof(decodedSubmodelIdentifier)} is null");
        }
        var securityConfig = new SecurityConfig(Program.noSecurity, this);

        var submodel = await _dbRequestHandlerService.ReadSubmodelById(securityConfig, null, decodedSubmodelIdentifier, null, null);

        // JUIJUI
        // with HEAD the needed policy shall be returned
        // access must be checked, but no given policy is ok
        // to be changed

        return Ok();
    }


    /// <summary>
    /// Returns a specific Submodel
    /// </summary>
    /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
    /// <param name="level">Determines the structural depth of the respective resource content</param>
    /// <param name="extent">Determines to which extent the resource is being serialized</param>
    /// <response code="200">Requested Submodel</response>
    /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
    /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
    /// <response code="403">Forbidden</response>
    /// <response code="404">Not Found</response>
    /// <response code="500">Internal Server Error</response>
    /// <response code="0">Default error handling for unmentioned status codes</response>
    [HttpGet]
    [Route("submodels/{submodelIdentifier}")]
    [ValidateModelState]
    [SwaggerOperation("GetSubmodelById")]
    [SwaggerResponse(statusCode: 200, type: typeof(Submodel), description: "Requested Submodel")]
    [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
    [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
    [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
    [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
    [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
    [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
    public async virtual Task<IActionResult> GetSubmodelById([FromRoute][Required] string submodelIdentifier, [FromQuery] string? level, [FromQuery] string? extent)
    {
        //Validate level and extent
        var levelEnum = _validateModifierService.ValidateLevel(level);
        var extentEnum = _validateModifierService.ValidateExtent(extent);

        var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);

        _logger.LogInformation($"Received request to get the submodel with id {decodedSubmodelIdentifier}");
        if (decodedSubmodelIdentifier == null)
        {
            throw new NotAllowed($"Cannot proceed as {nameof(decodedSubmodelIdentifier)} is null");
        }

        var securityConfig = new SecurityConfig(Program.noSecurity, this);

        var submodel = await _dbRequestHandlerService.ReadSubmodelById(securityConfig, null, decodedSubmodelIdentifier, levelEnum, extentEnum);


        //TODO:jtikekar @Andreas, in earlier API policy set as getPolicy
        //Response.Headers.Add("policy", policy);
        return new ObjectResult(submodel);
    }

    ///// <summary>
    ///// Returns a specific Submodel signed
    ///// </summary>
    ///// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
    ///// <param name="level">Determines the structural depth of the respective resource content</param>
    ///// <param name="extent">Determines to which extent the resource is being serialized</param>
    ///// <response code="200">Requested Submodel</response>
    ///// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
    ///// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
    ///// <response code="403">Forbidden</response>
    ///// <response code="404">Not Found</response>
    ///// <response code="500">Internal Server Error</response>
    ///// <response code="0">Default error handling for unmentioned status codes</response>
    //[HttpGet]
    //[Route("submodels/{submodelIdentifier}/$sign00")]
    //[ValidateModelState]
    //[SwaggerOperation("GetSubmodelByIdSigned00")]
    //[SwaggerResponse(statusCode: 200, type: typeof(Submodel), description: "Requested Submodel")]
    //[SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
    //[SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
    //[SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
    //[SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
    //[SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
    //[SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
    //public async virtual Task<IActionResult> GetSubmodelByIdSigned00([FromRoute][Required] string submodelIdentifier, [FromQuery] string? level, [FromQuery] string? extent)
    //{
    //    //Validate level and extent
    //    var levelEnum = _validateModifierService.ValidateLevel(level);
    //    var extentEnum = _validateModifierService.ValidateExtent(extent);

    //    var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);

    //    _logger.LogInformation($"Received request to get the submodel with id {decodedSubmodelIdentifier}");
    //    if (decodedSubmodelIdentifier == null)
    //    {
    //        throw new NotAllowed($"Cannot proceed as {nameof(decodedSubmodelIdentifier)} is null");
    //    }

    //    var securityConfig = new SecurityConfig(Program.noSecurity, this);

    //    var submodel = await _dbRequestHandlerService.ReadSubmodelById(securityConfig, null, decodedSubmodelIdentifier);

    //    string certFile = "Andreas_Orzelski_Chain.pfx";
    //    string certPW = "i40";
    //    if (System.IO.File.Exists(certFile))
    //    {
    //        var submodelText = Jsonization.Serialize.ToJsonObject(submodel).ToJsonString();

    //        var mStrm = new MemoryStream(Encoding.UTF8.GetBytes(submodelText));
    //        var node = System.Text.Json.JsonSerializer.DeserializeAsync<JsonNode>(mStrm).Result;
    //        var s = Jsonization.Deserialize.SubmodelFrom(node);

    //        submodel.Extensions ??= [];
    //        using (var certificate = new X509Certificate2(certFile, certPW))
    //        {
    //            if (certificate == null)
    //            {
    //                throw new NotAllowed($"");
    //            }

    //            X509Certificate2Collection xc = new X509Certificate2Collection();
    //            xc.Import(certFile, certPW, X509KeyStorageFlags.PersistKeySet);

    //            var x5cString = "";
    //            for (var j = xc.Count - 1; j >= 0; j--)
    //            {
    //                var c = Convert.ToBase64String(xc[j].GetRawCertData());
    //                if (x5cString != "")
    //                {
    //                    x5cString += ", ";
    //                }
    //                x5cString += c;
    //            }

    //            var signature = "";
    //            try
    //            {
    //                using (RSA rsa = certificate.GetRSAPrivateKey())
    //                {
    //                    if (rsa == null)
    //                    {
    //                        throw new NotAllowed($"");
    //                    }

    //                    var data = Encoding.UTF8.GetBytes(submodelText);
    //                    var signed = rsa.SignData(data, HashAlgorithmName.SHA256, RSASignaturePadding.Pkcs1);
    //                    signature = Convert.ToBase64String(signed);
    //                }
    //            }
    //            // ReSharper disable EmptyGeneralCatchClause
    //            catch
    //            {
    //            }

    //            submodel.Extensions.Add(new Extension("$sign_submodel", value: submodelText));
    //            submodel.Extensions.Add(new Extension("$sign_algorithm", value: "RS256"));
    //            submodel.Extensions.Add(new Extension("$sign_x5c", value: x5cString));
    //            submodel.Extensions.Add(new Extension("$sign_signature", value: signature));

    //            // submodel.SubmodelElements = [];

    //            return new ObjectResult(submodel);
    //        }
    //    }

    //    throw new NotAllowed($"");
    //}

    /// <summary>
    /// Returns a specific Submodel signed
    /// </summary>
    /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
    /// <param name="level">Determines the structural depth of the respective resource content</param>
    /// <param name="extent">Determines to which extent the resource is being serialized</param>
    /// <param name="skipPayload">Payload is skipped, because it is already inside JWS</param>
    /// <response code="200">Requested Submodel</response>
    /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
    /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
    /// <response code="403">Forbidden</response>
    /// <response code="404">Not Found</response>
    /// <response code="500">Internal Server Error</response>
    /// <response code="0">Default error handling for unmentioned status codes</response>
    [HttpGet]
    [Route("submodels/{submodelIdentifier}/$sign")]
    [ValidateModelState]
    [SwaggerOperation("GetSubmodelByIdSigned")]
    [SwaggerResponse(statusCode: 200, type: typeof(Submodel), description: "Requested Submodel")]
    [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
    [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
    [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
    [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
    [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
    [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
    public async virtual Task<IActionResult> GetSubmodelByIdSigned([FromRoute][Required] string submodelIdentifier,
        [FromQuery] string? level, [FromQuery] string? extent, [FromQuery] string? skipPayload)
    {
        //Validate level and extent
        var levelEnum = _validateModifierService.ValidateLevel(level);
        var extentEnum = _validateModifierService.ValidateExtent(extent);

        var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);

        _logger.LogInformation($"Received request to get the submodel with id {decodedSubmodelIdentifier}");
        if (decodedSubmodelIdentifier == null)
        {
            throw new NotAllowed($"Cannot proceed as {nameof(decodedSubmodelIdentifier)} is null");
        }

        var securityConfig = new SecurityConfig(Program.noSecurity, this);

        bool isSkipPayload = false;

        if (skipPayload != null && skipPayload.ToLower() == "true")
        {
            isSkipPayload = true;
        }

        var submodelStringSigned = await _dbRequestHandlerService.ReadSubmodelByIdSigned(securityConfig, null, decodedSubmodelIdentifier, levelEnum, extentEnum, isSkipPayload);

        if (!submodelStringSigned.IsNullOrEmpty())
        {
            return new ObjectResult(submodelStringSigned);
        }
        else
        {
            throw new NotAllowed($"");
        }
    }

    /// <summary>
    /// Returns the metadata attributes of a specific Submodel
    /// </summary>
    /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
    /// <response code="200">Requested Submodel in the metadata representation</response>
    /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
    /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
    /// <response code="403">Forbidden</response>
    /// <response code="404">Not Found</response>
    /// <response code="500">Internal Server Error</response>
    /// <response code="0">Default error handling for unmentioned status codes</response>
    [HttpGet]
    [Route("submodels/{submodelIdentifier}/$metadata")]
    [ValidateModelState]
    [SwaggerOperation("GetSubmodelByIdMetadata")]
    [SwaggerResponse(statusCode: 200, type: typeof(SubmodelMetadata), description: "Requested Submodel in the metadata representation")]
    [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
    [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
    [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
    [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
    [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
    [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
    public async virtual Task<IActionResult> GetSubmodelByIdMetadata([FromRoute][Required] string submodelIdentifier)
    {
        var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);
        _logger.LogInformation($"Received request to get the metadata of the submodel with id {decodedSubmodelIdentifier}");
        if (decodedSubmodelIdentifier == null)
        {
            throw new NotAllowed($"Cannot proceed as {nameof(decodedSubmodelIdentifier)} is null");
        }

        var securityConfig = new SecurityConfig(Program.noSecurity, this);

        var submodel = await _dbRequestHandlerService.ReadSubmodelById(securityConfig, null, decodedSubmodelIdentifier, null, null);

        var output = _mappingService.Map(submodel, "metadata");
        return new ObjectResult(output);
    }

    /// <summary>
    /// Returns a specific Submodel in the Path notation
    /// </summary>
    /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
    /// <param name="level">Determines the structural depth of the respective resource content</param>
    /// <response code="200">Requested Submodel</response>
    /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
    /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
    /// <response code="403">Forbidden</response>
    /// <response code="404">Not Found</response>
    /// <response code="500">Internal Server Error</response>
    /// <response code="0">Default error handling for unmentioned status codes</response>
    [HttpGet]
    [Route("submodels/{submodelIdentifier}/$path")]
    [ValidateModelState]
    [SwaggerOperation("GetSubmodelByIdPath")]
    [SwaggerResponse(statusCode: 200, type: typeof(List<string>), description: "Requested Submodel")]
    [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
    [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
    [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
    [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
    [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
    [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
    public async virtual Task<IActionResult> GetSubmodelByIdPath([FromRoute][Required] string submodelIdentifier, [FromQuery] string? level)
    {
        //Validate level and extent
        var levelEnum = _validateModifierService.ValidateLevel(level);

        var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);
        _logger.LogInformation($"Received request to get the idShortPath of the submodel with id {decodedSubmodelIdentifier}");
        if (decodedSubmodelIdentifier == null)
        {
            throw new NotAllowed($"Cannot proceed as {nameof(decodedSubmodelIdentifier)} is null");
        }

        var securityConfig = new SecurityConfig(Program.noSecurity, this);

        var submodel = await _dbRequestHandlerService.ReadSubmodelById(securityConfig, null, decodedSubmodelIdentifier, levelEnum, null);

        var output = _pathModifierService.ToIdShortPath(submodel);
        return new ObjectResult(output);
    }

    /// <summary>
    /// Returns the Reference of a specific Submodel
    /// </summary>
    /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
    /// <response code="200">Requested Submodel</response>
    /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
    /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
    /// <response code="403">Forbidden</response>
    /// <response code="404">Not Found</response>
    /// <response code="500">Internal Server Error</response>
    /// <response code="0">Default error handling for unmentioned status codes</response>
    [HttpGet]
    [Route("submodels/{submodelIdentifier}/$reference")]
    [ValidateModelState]
    [SwaggerOperation("GetSubmodelByIdReference")]
    [SwaggerResponse(statusCode: 200, type: typeof(Reference), description: "Requested Submodel")]
    [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
    [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
    [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
    [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
    [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
    [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
    public async virtual Task<IActionResult> GetSubmodelByIdReference([FromRoute][Required] string submodelIdentifier)
    {
        var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);

        _logger.LogInformation($"Received request to get the submodel with id {decodedSubmodelIdentifier}");
        if (decodedSubmodelIdentifier == null)
        {
            throw new NotAllowed($"Cannot proceed as {nameof(decodedSubmodelIdentifier)} is null");
        }

        var securityConfig = new SecurityConfig(Program.noSecurity, this);

        var submodel = await _dbRequestHandlerService.ReadSubmodelById(securityConfig, null, decodedSubmodelIdentifier, null, null);

        var output = _referenceModifierService.GetReferenceResult(submodel as IReferable);
        return new ObjectResult(output);
    }

    /// <summary>
    /// Returns a specific Submodel in the ValueOnly representation
    /// </summary>
    /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
    /// <param name="level">Determines the structural depth of the respective resource content</param>
    /// <param name="extent">Determines to which extent the resource is being serialized</param>
    /// <response code="200">Requested Submodel</response>
    /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
    /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
    /// <response code="403">Forbidden</response>
    /// <response code="404">Not Found</response>
    /// <response code="500">Internal Server Error</response>
    /// <response code="0">Default error handling for unmentioned status codes</response>
    [HttpGet]
    [Route("submodels/{submodelIdentifier}/$value")]
    [ValidateModelState]
    [SwaggerOperation("GetSubmodelByIdValueOnly")]
    [SwaggerResponse(statusCode: 200, type: typeof(SubmodelValue), description: "Requested Submodel")]
    [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
    [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
    [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
    [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
    [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
    [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
    public async virtual Task<IActionResult> GetSubmodelByIdValueOnly([FromRoute][Required] string submodelIdentifier, [FromQuery] string? level, [FromQuery] string? extent)
    {
        //Validate level and extent
        var levelEnum = _validateModifierService.ValidateLevel(level);
        var extentEnum = _validateModifierService.ValidateExtent(extent);

        var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);
        _logger.LogInformation($"Received request to get value of submodel with id {decodedSubmodelIdentifier}");
        if (decodedSubmodelIdentifier == null)
        {
            throw new NotAllowed($"Cannot proceed as {nameof(decodedSubmodelIdentifier)} is null");
        }

        var securityConfig = new SecurityConfig(Program.noSecurity, this);

        var submodel = await _dbRequestHandlerService.ReadSubmodelById(securityConfig, null, decodedSubmodelIdentifier, levelEnum, extentEnum);

        var output = _mappingService.Map(submodel, "value");
        return new ObjectResult(output);
    }

    /// <summary>
    /// Returns the matadata attributes of a specific submodel element from the Submodel at a specified path
    /// </summary>
    /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
    /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
    /// <response code="200">Metadata attributes of the requested submodel element</response>
    /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
    /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
    /// <response code="403">Forbidden</response>
    /// <response code="404">Not Found</response>
    /// <response code="500">Internal Server Error</response>
    /// <response code="0">Default error handling for unmentioned status codes</response>
    [HttpGet]
    [Route("submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$metadata")]
    [ValidateModelState]
    [SwaggerOperation("GetSubmodelElementByPathMetadataSubmodelRepo")]
    [SwaggerResponse(statusCode: 200, type: typeof(ISubmodelElementMetadata), description: "Metadata attributes of the requested submodel element")]
    [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
    [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
    [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
    [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
    [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
    [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
    public async virtual Task<IActionResult> GetSubmodelElementByPathMetadataSubmodelRepo([FromRoute][Required] string submodelIdentifier, [FromRoute][Required] string idShortPath)
    {
        var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);
        _logger.LogInformation($"Received request to get metadata of submodel element at {idShortPath} from the submodel with id {decodedSubmodelIdentifier}");
        if (decodedSubmodelIdentifier == null)
        {
            throw new NotAllowed($"Cannot proceed as {nameof(decodedSubmodelIdentifier)} is null");
        }

        var securityConfig = new SecurityConfig(Program.noSecurity, this);

        var submodelElement = await _dbRequestHandlerService.ReadSubmodelElementByPath(securityConfig, null, decodedSubmodelIdentifier, idShortPath, null, null);
        var output = _mappingService.Map(submodelElement, "metadata");

        return new ObjectResult(output);
    }

    /// <summary>
    /// Returns a specific submodel element from the Submodel at a specified path in the Path notation
    /// </summary>
    /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
    /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
    /// <param name="level">Determines the structural depth of the respective resource content</param>
    /// <response code="200">Submodel elements in path notation</response>
    /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
    /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
    /// <response code="403">Forbidden</response>
    /// <response code="404">Not Found</response>
    /// <response code="500">Internal Server Error</response>
    /// <response code="0">Default error handling for unmentioned status codes</response>
    [HttpGet]
    [Route("submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$path")]
    [ValidateModelState]
    [SwaggerOperation("GetSubmodelElementByPathPathSubmodelRepo")]
    [SwaggerResponse(statusCode: 200, type: typeof(List<string>), description: "Submodel elements in path notation")]
    [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
    [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
    [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
    [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
    [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
    [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
    public async virtual Task<IActionResult> GetSubmodelElementByPathPathSubmodelRepo([FromRoute][Required] string submodelIdentifier, [FromRoute][Required] string idShortPath, [FromQuery] string? level)
    {
        //Validate level and extent
        var levelEnum = _validateModifierService.ValidateLevel(level);

        var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);
        _logger.LogInformation($"Received request to path of the submodel element at {idShortPath} from a submodel with id {decodedSubmodelIdentifier}");
        if (decodedSubmodelIdentifier == null)
        {
            throw new NotAllowed($"Cannot proceed as {nameof(decodedSubmodelIdentifier)} is null");
        }

        var securityConfig = new SecurityConfig(Program.noSecurity, this);
        //var idShortPathElements = _idShortPathParserService.ParseIdShortPath(idShortPath);

        var submodelElement = await _dbRequestHandlerService.ReadSubmodelElementByPath(securityConfig, null, decodedSubmodelIdentifier, idShortPath, levelEnum, null);

        var output = _pathModifierService.ToIdShortPath(submodelElement);
        return new ObjectResult(output);
    }

    /// <summary>
    /// Returns the Referene of a specific submodel element from the Submodel at a specified path
    /// </summary>
    /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
    /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
    /// <response code="200">Requested submodel element</response>
    /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
    /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
    /// <response code="403">Forbidden</response>
    /// <response code="404">Not Found</response>
    /// <response code="500">Internal Server Error</response>
    /// <response code="0">Default error handling for unmentioned status codes</response>
    [HttpGet]
    [Route("submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$reference")]
    [ValidateModelState]
    [SwaggerOperation("GetSubmodelElementByPathReferenceSubmodelRepo")]
    [SwaggerResponse(statusCode: 200, type: typeof(Reference), description: "Requested submodel element")]
    [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
    [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
    [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
    [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
    [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
    [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
    public async virtual Task<IActionResult> GetSubmodelElementByPathReferenceSubmodelRepo([FromRoute][Required] string submodelIdentifier,
    [FromRoute][Required] string idShortPath)
    {
        var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);

        _logger.LogInformation($"Received request to get reference of the submodel element atv{idShortPath} from the submodel with id {decodedSubmodelIdentifier}");

        if (decodedSubmodelIdentifier == null)
        {
            throw new NotAllowed($"Cannot proceed as {nameof(decodedSubmodelIdentifier)} is null");
        }

        var securityConfig = new SecurityConfig(Program.noSecurity, this);

        var submodelElement = await _dbRequestHandlerService.ReadSubmodelElementByPath(securityConfig, null, decodedSubmodelIdentifier, idShortPath, null, null);

        var output = _referenceModifierService.GetReferenceResult(submodelElement as IReferable);
        return new ObjectResult(output);
    }

    /// <summary>
    /// Returns a specific submodel element from the Submodel at a specified path
    /// </summary>
    /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
    /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
    /// <param name="level">Determines the structural depth of the respective resource content</param>
    /// <param name="extent">Determines to which extent the resource is being serialized</param>
    /// <response code="200">Requested submodel element</response>
    /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
    /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
    /// <response code="403">Forbidden</response>
    /// <response code="404">Not Found</response>
    /// <response code="500">Internal Server Error</response>
    /// <response code="0">Default error handling for unmentioned status codes</response>
    [HttpGet]
    [Route("submodels/{submodelIdentifier}/submodel-elements/{idShortPath}")]
    [ValidateModelState]
    [SwaggerOperation("GetSubmodelElementByPathSubmodelRepo")]
    [SwaggerResponse(statusCode: 200, type: typeof(ISubmodelElement), description: "Requested submodel element")]
    [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
    [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
    [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
    [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
    [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
    [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
    public virtual async Task<IActionResult> GetSubmodelElementByPathSubmodelRepo([FromRoute][Required] string submodelIdentifier, [FromRoute][Required] string idShortPath,
    [FromQuery] string? level, [FromQuery] string? extent)
    {
        //Validate level and extent
        var levelEnum = _validateModifierService.ValidateLevel(level);
        var extentEnum = _validateModifierService.ValidateExtent(extent);

        var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);

        _logger.LogInformation($"Received request to get the submodel element at {idShortPath} from the submodel with id {decodedSubmodelIdentifier}");

        if (decodedSubmodelIdentifier == null)
        {
            throw new NotAllowed($"Cannot proceed as {nameof(decodedSubmodelIdentifier)} is null");
        }

        var securityConfig = new SecurityConfig(Program.noSecurity, this);

        //if (!Program.noSecurity)
        //{
        //    var submodel = await _dbRequestHandlerService.ReadSubmodelById(securityConfig, null, decodedSubmodelIdentifier);
        //    User.Claims.ToList().Add(new Claim("idShortPath", $"{submodel.IdShort}.{idShortPath}"));
        //    var claimsList = new List<Claim>(User.Claims) { new("IdShortPath", $"{submodel.IdShort}.{idShortPath}") };
        //    var identity = new ClaimsIdentity(claimsList, "AasSecurityAuth");
        //    var principal = new System.Security.Principal.GenericPrincipal(identity, null);
        //    var authResult = _authorizationService.AuthorizeAsync(principal, submodel, "SecurityPolicy").Result;
        //    if (!authResult.Succeeded)
        //    {
        //        throw new NotAllowed(authResult.Failure.FailureReasons.FirstOrDefault()?.Message ?? string.Empty);
        //    }
        //}
        //var idShortPathElements = _idShortPathParserService.ParseIdShortPath(idShortPath);

        var submodelElement = await _dbRequestHandlerService.ReadSubmodelElementByPath(securityConfig, null, decodedSubmodelIdentifier, idShortPath, levelEnum, extentEnum);

        return new ObjectResult(submodelElement);
    }

    /// <summary>
    /// Returns a specific submodel element from the Submodel at a specified path in the ValueOnly representation
    /// </summary>
    /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
    /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
    /// <param name="level">Determines the structural depth of the respective resource content</param>
    /// <param name="extent">Determines to which extent the resource is being serialized</param>
    /// <response code="200">Requested submodel element</response>
    /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
    /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
    /// <response code="403">Forbidden</response>
    /// <response code="404">Not Found</response>
    /// <response code="500">Internal Server Error</response>
    /// <response code="0">Default error handling for unmentioned status codes</response>
    [HttpGet]
    [Route("submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$value")]
    [ValidateModelState]
    [SwaggerOperation("GetSubmodelElementByPathValueOnlySubmodelRepo")]
    [SwaggerResponse(statusCode: 200, type: typeof(ISubmodelElementValue), description: "Requested submodel element")]
    [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
    [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
    [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
    [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
    [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
    [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
    public async virtual Task<IActionResult> GetSubmodelElementByPathValueOnlySubmodelRepo([FromRoute][Required] string submodelIdentifier,
    [FromRoute][Required] string idShortPath, [FromQuery] string? level, [FromQuery] string? extent)
    {
        //Validate level and extent
        var levelEnum = _validateModifierService.ValidateLevel(level);
        var extentEnum = _validateModifierService.ValidateExtent(extent);

        var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);
        _logger.LogInformation($"Received request to get the value of the submodel element at {idShortPath} from the submodel with id {decodedSubmodelIdentifier}");
        if (decodedSubmodelIdentifier == null)
        {
            throw new NotAllowed($"Cannot proceed as {nameof(decodedSubmodelIdentifier)} is null");
        }

        var securityConfig = new SecurityConfig(Program.noSecurity, this);

        var submodelElement = await _dbRequestHandlerService.ReadSubmodelElementByPath(securityConfig, null, decodedSubmodelIdentifier, idShortPath, levelEnum, extentEnum);

        var output = _mappingService.Map(submodelElement, "value");
        return new ObjectResult(output);
    }

    /// <summary>
    /// Asynchronously invokes an Operation at a specified path
    /// </summary>
    /// <param name="body">Operation request object</param>
    /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
    /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
    /// <response code="202">The server has accepted the request.</response>
    /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
    /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
    /// <response code="403">Forbidden</response>
    /// <response code="404">Not Found</response>
    /// <response code="405">Method not allowed - Invoke only valid for Operation submodel element</response>
    /// <response code="500">Internal Server Error</response>
    /// <response code="0">Default error handling for unmentioned status codes</response>
    [HttpPost]
    [Route("submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke-async")]
    [ValidateModelState]
    [SwaggerOperation("InvokeOperationAsync")]
    [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
    [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
    [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
    [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
    [SwaggerResponse(statusCode: 405, type: typeof(Result), description: "Method not allowed - Invoke only valid for Operation submodel element")]
    [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
    [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
    public virtual IActionResult InvokeOperationAsync([FromBody] OperationRequest? body, [FromRoute][Required] string submodelIdentifier,
    [FromRoute][Required] string idShortPath) => throw new NotImplementedException();

    /// <summary>
    /// Asynchronously invokes an Operation at a specified path
    /// </summary>
    /// <param name="body">Operation request object</param>
    /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
    /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
    /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
    /// <response code="202">The server has accepted the request.</response>
    /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
    /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
    /// <response code="403">Forbidden</response>
    /// <response code="404">Not Found</response>
    /// <response code="500">Internal Server Error</response>
    /// <response code="0">Default error handling for unmentioned status codes</response>
    [HttpPost]
    [Route("submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke-async/$value")]
    [ValidateModelState]
    [SwaggerOperation("InvokeOperationAsyncValueOnly")]
    [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
    [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
    [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
    [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
    [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
    [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
    public virtual IActionResult InvokeOperationAsyncValueOnly([FromBody] OperationRequestValueOnly body, [FromRoute][Required] string aasIdentifier,
    [FromRoute][Required] string submodelIdentifier, [FromRoute][Required] string idShortPath) => throw new NotImplementedException();

    /// <summary>
    /// Synchronously or asynchronously invokes an Operation at a specified path
    /// </summary>
    /// <param name="body">Operation request object</param>
    /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
    /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
    /// <param name="_async">Determines whether an operation invocation is performed asynchronously or synchronously</param>
    /// <response code="200">Operation result object</response>
    /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
    /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
    /// <response code="403">Forbidden</response>
    /// <response code="404">Not Found</response>
    /// <response code="405">Method not allowed - Invoke only valid for Operation submodel element</response>
    /// <response code="500">Internal Server Error</response>
    /// <response code="0">Default error handling for unmentioned status codes</response>
    [HttpPost]
    [Route("submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke")]
    [ValidateModelState]
    [SwaggerOperation("InvokeOperationSubmodelRepo")]
    [SwaggerResponse(statusCode: 200, type: typeof(OperationResult), description: "Operation result object")]
    [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
    [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
    [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
    [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
    [SwaggerResponse(statusCode: 405, type: typeof(Result), description: "Method not allowed - Invoke only valid for Operation submodel element")]
    [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
    [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
    public virtual IActionResult InvokeOperationSubmodelRepo([FromBody] OperationRequest body, [FromRoute][Required] string submodelIdentifier,
    [FromRoute][Required] string idShortPath, [FromQuery] bool? _async) => throw new NotImplementedException();

    /// <summary>
    /// Synchronously or asynchronously invokes an Operation at a specified path
    /// </summary>
    /// <param name="body">Operation request object</param>
    /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
    /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
    /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
    /// <param name="_async">Determines whether an operation invocation is performed asynchronously or synchronously</param>
    /// <response code="200">Operation result object</response>
    /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
    /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
    /// <response code="403">Forbidden</response>
    /// <response code="404">Not Found</response>
    /// <response code="500">Internal Server Error</response>
    /// <response code="0">Default error handling for unmentioned status codes</response>
    [HttpPost]
    [Route("submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke/$value")]
    [ValidateModelState]
    [SwaggerOperation("InvokeOperationValueOnly")]
    [SwaggerResponse(statusCode: 200, type: typeof(IValueDTO), description: "Operation result object")]
    [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
    [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
    [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
    [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
    [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
    [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
    public virtual IActionResult InvokeOperationValueOnly([FromBody] OperationRequestValueOnly body, [FromRoute][Required] string aasIdentifier,
    [FromRoute][Required] string submodelIdentifier, [FromRoute][Required] string idShortPath,
    [FromQuery] bool? _async) => throw new NotImplementedException();

    /// <summary>
    /// Updates an existing Submodel
    /// </summary>
    /// <param name="body">Submodel object</param>
    /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
    /// <param name="level">Determines the structural depth of the respective resource content</param>
    /// <response code="204">Submodel updated successfully</response>
    /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
    /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
    /// <response code="403">Forbidden</response>
    /// <response code="404">Not Found</response>
    /// <response code="500">Internal Server Error</response>
    /// <response code="0">Default error handling for unmentioned status codes</response>
    [HttpPatch]
    [Route("submodels/{submodelIdentifier}")]
    [ValidateModelState]
    [SwaggerOperation("PatchSubmodelById")]
    [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
    [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
    [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
    [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
    [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
    [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
    public virtual async Task<IActionResult> PatchSubmodelById([FromBody] Submodel? body, [FromRoute][Required] string submodelIdentifier, [FromQuery] string? level)
    {
        ProcessBody(body);

        var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);

        _logger.LogInformation($"Received request to update the submodel with id {decodedSubmodelIdentifier}.");
        if (decodedSubmodelIdentifier == null)
        {
            throw new NotAllowed($"Cannot proceed as {nameof(decodedSubmodelIdentifier)} is null");
        }

        var securityConfig = new SecurityConfig(Program.noSecurity, this);
        await _dbRequestHandlerService.UpdateSubmodelById(securityConfig, null, decodedSubmodelIdentifier, body);

        return NoContent();
    }

    /// <summary>
    /// Updates the metadata attributes of an existing Submodel
    /// </summary>
    /// <param name="body">The metadata attributes of the Submodel object</param>
    /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
    /// <response code="204">Submodel updated successfully</response>
    /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
    /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
    /// <response code="403">Forbidden</response>
    /// <response code="404">Not Found</response>
    /// <response code="500">Internal Server Error</response>
    /// <response code="0">Default error handling for unmentioned status codes</response>
    [HttpPatch]
    [Route("submodels/{submodelIdentifier}/$metadata")]
    [ValidateModelState]
    [SwaggerOperation("PatchSubmodelByIdMetadata")]
    [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
    [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
    [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
    [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
    [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
    [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
    public async virtual Task<IActionResult> PatchSubmodelByIdMetadata([FromBody] SubmodelMetadata? body, [FromRoute][Required] string? submodelIdentifier)
    {
        if (body == null)
        {
            throw new NotAllowed($"Cannot proceed as {nameof(body)} is null");
        }

        var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);
        _logger.LogInformation($"Received Patch Request for submodel with id {decodedSubmodelIdentifier}");
        if (decodedSubmodelIdentifier == null)
        {
            throw new NotAllowed($"Cannot proceed as {nameof(decodedSubmodelIdentifier)} is null");
        }

        var submodel = _mappingService.Map(body, "metadata") as ISubmodel;
        if (submodel == null)
        {
            throw new NotAllowed($"Cannot proceed as {nameof(submodel)} is null");
        }


        var securityConfig = new SecurityConfig(Program.noSecurity, this);
        //Update
        await _dbRequestHandlerService.UpdateSubmodelById(securityConfig, null, decodedSubmodelIdentifier, submodel);

        return NoContent();
    }

    /// <summary>
    /// Updates the values of an existing Submodel
    /// </summary>
    /// <param name="body">Submodel object in its ValueOnly representation</param>
    /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
    /// <param name="level">Determines the structural depth of the respective resource content</param>
    /// <response code="204">Submodel updated successfully</response>
    /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
    /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
    /// <response code="403">Forbidden</response>
    /// <response code="404">Not Found</response>
    /// <response code="500">Internal Server Error</response>
    /// <response code="0">Default error handling for unmentioned status codes</response>
    [HttpPatch]
    [Route("submodels/{submodelIdentifier}/$value")]
    [ValidateModelState]
    [SwaggerOperation("PatchSubmodelByIdValueOnly")]
    [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
    [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
    [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
    [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
    [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
    [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
    public virtual async Task<IActionResult> PatchSubmodelByIdValueOnly([FromBody] SubmodelValue? body, [FromRoute][Required] string submodelIdentifier,
    [FromQuery] string? level)
    {
        if (body == null)
        {
            throw new NotAllowed($"Cannot proceed as {nameof(body)} is null");
        }

        var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);
        if (decodedSubmodelIdentifier == null)
        {
            throw new NotAllowed($"Cannot proceed as {nameof(decodedSubmodelIdentifier)} is null");
        }

        _logger.LogInformation($"Received request to update the submodel with id {decodedSubmodelIdentifier} by value.");

        var submodel = _mappingService.Map(body, "value") as Submodel;
        if (submodel == null)
        {
            throw new NotAllowed($"Cannot proceed as {nameof(submodel)} is null");
        }
        var securityConfig = new SecurityConfig(Program.noSecurity, this);
        await _dbRequestHandlerService.UpdateSubmodelById(securityConfig, null, decodedSubmodelIdentifier, submodel);

        return NoContent();
    }

    /// <summary>
    /// Updates the metadata attributes an existing SubmodelElement
    /// </summary>
    /// <param name="body">Metadata attributes of the SubmodelElement</param>
    /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
    /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
    /// <response code="204">SubmodelElement updated successfully</response>
    /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
    /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
    /// <response code="403">Forbidden</response>
    /// <response code="404">Not Found</response>
    /// <response code="500">Internal Server Error</response>
    /// <response code="0">Default error handling for unmentioned status codes</response>
    [HttpPatch]
    [Route("submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$metadata")]
    [ValidateModelState]
    [SwaggerOperation("PatchSubmodelElementByPathMetadataSubmodelRepo")]
    [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
    [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
    [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
    [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
    [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
    [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
    public virtual async Task<IActionResult> PatchSubmodelElementByPathMetadataSubmodelRepo([FromBody] ISubmodelElementMetadata? body,
    [FromRoute][Required] string submodelIdentifier, [FromRoute][Required] string idShortPath)
    {
        if (body == null)
        {
            throw new NotAllowed($"Cannot proceed as {nameof(body)} is null");
        }

        var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);
        _logger.LogInformation($"Received request to update the submodel element at {idShortPath} in the submodel with id {decodedSubmodelIdentifier}");
        if (decodedSubmodelIdentifier == null)
        {
            throw new NotAllowed($"Cannot proceed as {nameof(decodedSubmodelIdentifier)} is null");
        }

        //Reverse mapping from Metadata to submodel element
        var submodelElement = _mappingService.Map(body, "metadata") as ISubmodelElement;
        if (submodelElement == null)
        {
            throw new NotAllowed($"Cannot proceed as {nameof(submodelElement)} is null");
        }


        var securityConfig = new SecurityConfig(Program.noSecurity, this);
        //Update
        await _dbRequestHandlerService.UpdateSubmodelElementByPath(securityConfig, null, decodedSubmodelIdentifier, idShortPath, submodelElement);

        return NoContent();
    }

    /// <summary>
    /// Updates an existing SubmodelElement
    /// </summary>
    /// <param name="body">SubmodelElement object</param>
    /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
    /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
    /// <param name="level">Determines the structural depth of the respective resource content</param>
    /// <response code="204">SubmodelElement updated successfully</response>
    /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
    /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
    /// <response code="403">Forbidden</response>
    /// <response code="404">Not Found</response>
    /// <response code="500">Internal Server Error</response>
    /// <response code="0">Default error handling for unmentioned status codes</response>
    [HttpPatch]
    [Route("submodels/{submodelIdentifier}/submodel-elements/{idShortPath}")]
    [ValidateModelState]
    [SwaggerOperation("PatchSubmodelElementByPathSubmodelRepo")]
    [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
    [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
    [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
    [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
    [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
    [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
    public async virtual Task<IActionResult> PatchSubmodelElementByPathSubmodelRepo([FromBody] ISubmodelElement? body, [FromRoute][Required] string submodelIdentifier,
    [FromRoute][Required] string idShortPath, [FromQuery] string? level)
    {
        ProcessBody(body);

        var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);
        if (decodedSubmodelIdentifier == null)
        {
            throw new NotAllowed($"Cannot proceed as {nameof(decodedSubmodelIdentifier)} is null");
        }

        _logger.LogInformation($"Received request to update the submodel element at {idShortPath} from submodel with id {decodedSubmodelIdentifier}.");

        var securityConfig = new SecurityConfig(Program.noSecurity, this);
        await _dbRequestHandlerService.UpdateSubmodelElementByPath(securityConfig, null, decodedSubmodelIdentifier, idShortPath, body);

        return NoContent();
    }

    /// <summary>
    /// Updates the value of an existing SubmodelElement
    /// </summary>
    /// <param name="body">The SubmodelElement in its ValueOnly representation</param>
    /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
    /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
    /// <param name="level">Determines the structural depth of the respective resource content</param>
    /// <response code="204">Submodel updated successfully</response>
    /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
    /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
    /// <response code="403">Forbidden</response>
    /// <response code="404">Not Found</response>
    /// <response code="500">Internal Server Error</response>
    /// <response code="0">Default error handling for unmentioned status codes</response>
    [HttpPatch]
    [Route("submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$value")]
    [ValidateModelState]
    [SwaggerOperation("PatchSubmodelElementByPathValueOnlySubmodelRepo")]
    [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
    [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
    [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
    [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
    [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
    [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
    public virtual async Task<IActionResult> PatchSubmodelElementByPathValueOnlySubmodelRepo([FromBody] ISubmodelElementValue? body,
    [FromRoute][Required] string submodelIdentifier, [FromRoute][Required] string idShortPath,
    [FromQuery] string? level)
    {
        if (body == null)
        {
            throw new NotAllowed($"Cannot proceed as {nameof(body)} is null");
        }

        var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);
        _logger.LogInformation($"Received an update request for a submodel element at {idShortPath} in the submodel with id {decodedSubmodelIdentifier}.");
        if (decodedSubmodelIdentifier == null)
        {
            throw new NotAllowed($"Cannot proceed as {nameof(decodedSubmodelIdentifier)} is null");
        }

        if (_mappingService.Map(body, "value") is not ISubmodelElement submodelElement)
        {
            throw new NotAllowed($"Cannot proceed as {nameof(submodelElement)} is null");
        }

        var securityConfig = new SecurityConfig(Program.noSecurity, this);
        //Update
        await _dbRequestHandlerService.UpdateSubmodelElementByPath(securityConfig, null, decodedSubmodelIdentifier, idShortPath, submodelElement);

        return NoContent();
    }

    /// <summary>
    /// Creates a new Submodel
    /// </summary>
    /// <param name="body">Submodel object</param>
    /// <response code="201">Submodel created successfully</response>
    /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
    /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
    /// <response code="403">Forbidden</response>
    /// <response code="409">Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request.</response>
    /// <response code="500">Internal Server Error</response>
    /// <response code="0">Default error handling for unmentioned status codes</response>
    [HttpPost]
    [Route("submodels")]
    [ValidateModelState]
    [SwaggerOperation("PostSubmodel")]
    [SwaggerResponse(statusCode: 201, type: typeof(Submodel), description: "Submodel created successfully")]
    [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
    [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
    [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
    [SwaggerResponse(statusCode: 409, type: typeof(Result), description: "Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request.")]
    [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
    [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
    // public async virtual Task<IActionResult> PostSubmodel([FromBody]Submodel body, [FromQuery] string aasIdentifier)
    public async virtual Task<IActionResult> PostSubmodel([FromBody] Submodel body)
    {
        ProcessBody(body);

        _logger.LogInformation($"Received request to create a submodel.");

        /*
        var decodedAasIdentifier = _decoderService.Decode("aasIdentifier", aasIdentifier);
        if (decodedAasIdentifier == null)
        {
            throw new NotAllowed($"Cannot proceed as {nameof(decodedAasIdentifier)} is null");
        }
        */

        var securityConfig = new SecurityConfig(Program.noSecurity, this);

        // var output = await _dbRequestHandlerService.CreateSubmodel(securityConfig, body, decodedAasIdentifier);
        var output = await _dbRequestHandlerService.CreateSubmodel(securityConfig, body, null);

        return CreatedAtAction("PostSubmodel", output);
    }

    /// <summary>
    /// Creates a new submodel element at a specified path within submodel elements hierarchy
    /// </summary>
    /// <param name="body">Requested submodel element</param>
    /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
    /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
    /// <param name="first">Create element as first one in list</param>
    /// <response code="201">Submodel element created successfully</response>
    /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
    /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
    /// <response code="403">Forbidden</response>
    /// <response code="404">Not Found</response>
    /// <response code="409">Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request.</response>
    /// <response code="500">Internal Server Error</response>
    /// <response code="0">Default error handling for unmentioned status codes</response>
    [HttpPost]
    [Route("submodels/{submodelIdentifier}/submodel-elements/{idShortPath}")]
    [ValidateModelState]
    [SwaggerOperation("PostSubmodelElementByPathSubmodelRepo")]
    [SwaggerResponse(statusCode: 201, type: typeof(ISubmodelElement), description: "Submodel element created successfully")]
    [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
    [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
    [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
    [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
    [SwaggerResponse(statusCode: 409, type: typeof(Result), description: "Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request.")]
    [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
    [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
    public async virtual Task<IActionResult> PostSubmodelElementByPathSubmodelRepo([FromBody] ISubmodelElement? body, [FromRoute][Required] string submodelIdentifier, [FromRoute][Required] string idShortPath)
    {
        ProcessBody(body);

        var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);
        if (decodedSubmodelIdentifier == null)
        {
            throw new NotAllowed($"Cannot proceed as {nameof(decodedSubmodelIdentifier)} is null");
        }

        var securityConfig = new SecurityConfig(Program.noSecurity, this);

        _logger.LogInformation($"Received request to create a new submodel element at {idShortPath} in the submodel with id {decodedSubmodelIdentifier}");

        var output = _dbRequestHandlerService.CreateSubmodelElement(securityConfig, null, decodedSubmodelIdentifier, body, idShortPath);

        /*
        if (output != null)
        {
            Program.signalNewData(2);
        }
        */

        return CreatedAtAction("PostSubmodelElementByPathSubmodelRepo", output);
    }

    /// <summary>
    /// Creates a new submodel element
    /// </summary>
    /// <param name="body">Requested submodel element</param>
    /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
    /// <param name="first">Create element as first one in list</param>
    /// <response code="201">Submodel element created successfully</response>
    /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
    /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
    /// <response code="403">Forbidden</response>
    /// <response code="404">Not Found</response>
    /// <response code="409">Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request.</response>
    /// <response code="500">Internal Server Error</response>
    /// <response code="0">Default error handling for unmentioned status codes</response>
    [HttpPost]
    [Route("submodels/{submodelIdentifier}/submodel-elements")]
    [ValidateModelState]
    [SwaggerOperation("PostSubmodelElementSubmodelRepo")]
    [SwaggerResponse(statusCode: 201, type: typeof(ISubmodelElement), description: "Submodel element created successfully")]
    [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
    [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
    [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
    [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
    [SwaggerResponse(statusCode: 409, type: typeof(Result),
                        description:
                        "Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request.")]
    [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
    [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
    public async virtual Task<IActionResult> PostSubmodelElementSubmodelRepo([FromBody] ISubmodelElement? body,
                                                                 [FromRoute][Required] string submodelIdentifier,
                                                                 bool first)
    {
        ProcessBody(body);

        var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);
        _logger.LogInformation($"Received request to create a new submodel element in the submodel with id {decodedSubmodelIdentifier}");
        if (decodedSubmodelIdentifier == null)
        {
            throw new NotAllowed($"Cannot proceed as {nameof(decodedSubmodelIdentifier)} is null");
        }

        var securityConfig = new SecurityConfig(Program.noSecurity, this);

        var output = await _dbRequestHandlerService.CreateSubmodelElement(securityConfig, null, decodedSubmodelIdentifier, body, null, first);

        /*
        if (output != null)
        {
            Program.signalNewData(2);
        }
        */

        return CreatedAtAction("PostSubmodelElementSubmodelRepo", output);
    }


    /// <summary>
    /// Updates an existing Submodel
    /// </summary>
    /// <param name="body">Submodel object</param>
    /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
    /// <response code="204">Submodel updated successfully</response>
    /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
    /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
    /// <response code="403">Forbidden</response>
    /// <response code="404">Not Found</response>
    /// <response code="500">Internal Server Error</response>
    /// <response code="0">Default error handling for unmentioned status codes</response>
    [HttpPut]
    [Route("submodels/{submodelIdentifier}")]
    [ValidateModelState]
    [SwaggerOperation("PutSubmodelById")]
    [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
    [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
    [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
    [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
    [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
    [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
    public virtual async Task<IActionResult> PutSubmodelById([FromBody] Submodel? body, [FromRoute][Required] string submodelIdentifier)
    {
        ProcessBody(body);

        var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);

        _logger.LogInformation($"Received request to replace a submodel {decodedSubmodelIdentifier}");
        if (decodedSubmodelIdentifier == null)
        {
            throw new NotAllowed($"Cannot proceed as {nameof(decodedSubmodelIdentifier)} is null");
        }

        var securityConfig = new SecurityConfig(Program.noSecurity, this);
        await _dbRequestHandlerService.ReplaceSubmodelById(securityConfig, null, decodedSubmodelIdentifier, body);

        return NoContent();
    }

    /// <summary>
    /// Updates an existing Submodel signed
    /// </summary>
    /// <param name="jws">Submodel jws object</param>
    /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
    /// <response code="204">Submodel updated successfully</response>
    /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
    /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
    /// <response code="403">Forbidden</response>
    /// <response code="404">Not Found</response>
    /// <response code="500">Internal Server Error</response>
    /// <response code="0">Default error handling for unmentioned status codes</response>
    [HttpPut]
    [Route("submodels/{submodelIdentifier}/$sign")]
    [ValidateModelState]
    [Consumes("text/plain")]
    [SwaggerOperation("PutSubmodelByIdSigned")]
    [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
    [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
    [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
    [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
    [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
    [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
    public virtual async Task<IActionResult> PutSubmodelByIdSigned([FromBody] string? jws, [FromRoute][Required] string submodelIdentifier)
    {
        var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);

        _logger.LogInformation($"Received request to replace a submodel {decodedSubmodelIdentifier}");

        if (decodedSubmodelIdentifier == null)
        {
            throw new NotAllowed($"Cannot proceed as {nameof(decodedSubmodelIdentifier)} is null");
        }
        var body = ProcessJWS(jws);

        if (body != null)
        {
            var securityConfig = new SecurityConfig(Program.noSecurity, this);
            await _dbRequestHandlerService.ReplaceSubmodelByIdSigned(securityConfig, null, decodedSubmodelIdentifier, body as ISubmodel, jws);
        }

        return NoContent();
    }

    private ISubmodel ProcessJWS(string? jws)
    {
        string certFile = "Andreas_Orzelski_Chain.pfx";
        string certPW = "i40";

        ISubmodel body = null;
        if (System.IO.File.Exists(certFile))
        {
            X509Certificate2Collection xc = new X509Certificate2Collection();
            xc.Import(certFile, certPW, X509KeyStorageFlags.PersistKeySet);

            var i = 0;
            var x5c = new string[xc.Count];
            for (var j = xc.Count - 1; j >= 0; j--)
            {
                var c = Convert.ToBase64String(xc[j].GetRawCertData());
                x5c[i++] = c;
            }

            using (var certificate = new X509Certificate2(certFile, certPW))
            {
                if (certificate == null)
                {
                    return null;
                }

                // Validate
                var parts = jws.Split('.');
                var headerJson = Encoding.UTF8.GetString(Jose.Base64Url.Decode(parts[0]));
                var header = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, JsonElement>>(headerJson);
                if (header == null)
                {
                    throw new InvalidOperationException("header missing");
                }

                if (!header.TryGetValue("x5c", out var x5cElement))
                {
                    throw new InvalidOperationException("x5c not found in header");
                }

                x5c = x5cElement.EnumerateArray().Select(x => x.GetString()).ToArray();
                if (x5c.Length == 0)
                {
                    throw new InvalidOperationException("x5c is empty");
                }

                var certBytes = Convert.FromBase64String(x5c[0]);
                var signingCert = new X509Certificate2(certBytes);
                using var rsaPublic = signingCert.GetRSAPublicKey();

                var payload = JWT.Decode(jws, rsaPublic, JwsAlgorithm.RS256);

                var chain = new X509Chain
                {
                    ChainPolicy = {
                                RevocationMode   = X509RevocationMode.NoCheck,
                                VerificationFlags= X509VerificationFlags.NoFlag,
                                TrustMode = X509ChainTrustMode.CustomRootTrust
                            }
                };

                var root = new X509Certificate2(Convert.FromBase64String(x5c.Last()));
                chain.ChainPolicy.CustomTrustStore.Add(root);

                for (i = 1; i < x5c.Length - 1; i++)
                {
                    var cert = new X509Certificate2(Convert.FromBase64String(x5c[i]));
                    chain.ChainPolicy.ExtraStore.Add(cert);
                }

                var isValid = chain.Build(signingCert);

                if (isValid)
                {
                    JsonNode node = System.Text.Json.JsonSerializer.Deserialize<JsonNode>(payload);

                    body = Jsonization.Deserialize.SubmodelFrom(node);
                }
            }
        }

        ProcessBody(body);

        return body;
    }

    /// <summary>
    /// Updates an existing submodel element at a specified path within submodel elements hierarchy
    /// </summary>
    /// <param name="body">Requested submodel element</param>
    /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
    /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
    /// <param name="level">Determines the structural depth of the respective resource content</param>
    /// <response code="204">Submodel element updated successfully</response>
    /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
    /// <response code="401">Unauthorized, e.g. the server refused the authorization attempt.</response>
    /// <response code="403">Forbidden</response>
    /// <response code="404">Not Found</response>
    /// <response code="500">Internal Server Error</response>
    /// <response code="0">Default error handling for unmentioned status codes</response>
    [HttpPut]
    [Route("submodels/{submodelIdentifier}/submodel-elements/{idShortPath}")]
    [ValidateModelState]
    [SwaggerOperation("PutSubmodelElementByPathSubmodelRepo")]
    [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
    [SwaggerResponse(statusCode: 401, type: typeof(Result), description: "Unauthorized, e.g. the server refused the authorization attempt.")]
    [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
    [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
    [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
    [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
    public async virtual Task<IActionResult> PutSubmodelElementByPathSubmodelRepo([FromBody] ISubmodelElement? body,
    [FromRoute][Required] string submodelIdentifier, [FromRoute][Required] string idShortPath,
    [FromQuery] string? level)
    {
        ProcessBody(body);

        var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);

        _logger.LogInformation($"Received request to replace a submodel element at {idShortPath} deom the submodel with id {decodedSubmodelIdentifier}.");
        if (decodedSubmodelIdentifier == null)
        {
            throw new NotAllowed($"Cannot proceed as {nameof(decodedSubmodelIdentifier)} is null");
        }

        var securityConfig = new SecurityConfig(Program.noSecurity, this);

        await _dbRequestHandlerService.ReplaceSubmodelElementByPath(securityConfig, null, decodedSubmodelIdentifier, idShortPath, body);

        return NoContent();
    }

    /// <summary>
    /// Uploads file content to an existing submodel element at a specified path within submodel elements hierarchy
    /// </summary>
    /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
    /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
    /// <param name="file">File to upload</param>
    /// <response code="204">Submodel element updated successfully</response>
    /// <response code="400">Bad Request</response>
    /// <response code="404">Not Found</response>
    /// <response code="0">Default error handling for unmentioned status codes</response>
    [HttpPut]
    [Route("submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment")]
    [ValidateModelState]
    [SwaggerOperation("PutFileByPathSubmodelRepo")]
    [SwaggerResponse(statusCode: 204, type: typeof(Result), description: "Submodel element updated successfully")]
    [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request")]
    [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
    [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
    public virtual async Task<IActionResult> PutFileByPathSubmodelRepo([FromRoute][Required] string submodelIdentifier, [FromRoute] string? idShortPath, IFormFile? file)
    {
        if (idShortPath == null)
        {
            throw new NotAllowed($"Cannot proceed as {nameof(idShortPath)} is null");
        }

        var decodedSubmodelIdentifier = _decoderService.Decode("submodelIdentifier", submodelIdentifier);
        if (decodedSubmodelIdentifier == null)
        {
            throw new NotAllowed($"Cannot proceed as {nameof(decodedSubmodelIdentifier)} is null");
        }

        var stream = new MemoryStream();
        file?.CopyTo(stream);
        var fileName = file?.FileName;
        var contentType = file?.ContentType;
        if (fileName == null)
        {
            throw new NotAllowed($"Cannot proceed as {nameof(fileName)} is null");
        }

        if (contentType == null)
        {
            throw new NotAllowed($"Cannot proceed as {nameof(contentType)} is null");
        }

        var securityConfig = new SecurityConfig(Program.noSecurity, this);
        //var idShortPathElements = _idShortPathParserService.ParseIdShortPath(idShortPath);
        await _dbRequestHandlerService.ReplaceFileByPath(securityConfig, null, decodedSubmodelIdentifier, idShortPath, fileName, contentType, stream);

        return NoContent();
    }

    private void ProcessBody(IClass body)
    {
        if (body == null)
        {
            throw new NotAllowed($"Cannot proceed as {nameof(body)} is null");
        }
        //Verify the body first
        _verificationService.VerifyRequestBody(body);
    }

    //ToDo: Move into security? Currently only for events, usually found in EntityFrameworkPersistenceService
    private bool InitSecurity(ISecurityConfig securityConfig)
    {
        if (securityConfig != null && !securityConfig.NoSecurity)
        {
            // Get claims
            var authResult = false;
            var accessRole = securityConfig.Principal.FindAll(ClaimTypes.Role).Select(c => c.Value).FirstOrDefault();
            var httpRoute = securityConfig.Principal.FindFirst("Route")?.Value;
            var neededRightsClaim = securityConfig.Principal.FindFirst("NeededRights")?.Value;
            if (accessRole != null && httpRoute != null && Enum.TryParse(neededRightsClaim, out AasSecurity.Models.AccessRights neededRights))
            {
                authResult = _contractSecurityRules.AuthorizeRequest(accessRole, httpRoute, neededRights, out _, out _, out _);
            }

            return authResult;
        }

        return true;
      }
}
