/*
 * DotAAS Part 2 | HTTP/REST | Asset Administration Shell Registry Service Specification
 *
 * The Full Profile of the Asset Administration Shell Registry Service Specification as part of the [Specification of the Asset Administration Shell: Part 2](http://industrialdigitaltwin.org/en/content-hub).
 * Publisher: Industrial Digital Twin Association (IDTA) 2023
 *
 * OpenAPI spec version: V3.0.1_SSP-001
 * Contact: info@idtwin.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using IO.Swagger.Lib.V3.Converters;

namespace IO.Swagger.Models;

/// <inheritdoc cref="IO.Swagger.Models.IServiceDescription" />
[DataContract]
public partial class ServiceDescription : IEquatable<ServiceDescription>, IServiceDescription
{
    /// <inheritdoc />
    [DataMember(Name = "profiles")]
    public List<ServiceProfiles>? Profiles { get; set; }

    /// <inheritdoc cref="IServiceDescription.ToString" />
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class ServiceDescription {\n");
        sb.Append("  Profiles: ").Append(Profiles).Append('\n');
        sb.Append("}\n");
        return sb.ToString();
    }

    
    /// <inheritdoc />
    public string ToJson() => JsonSerializer.Serialize(this, Options);

    private static readonly JsonSerializerOptions Options = new()
                                                            {
                                                                WriteIndented          = true,
                                                                DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull,
                                                                //Converters             = {new JsonStringEnumConverter()}
                                                                Converters             = {new ServiceProfileEnumValueConverter()}
                                                            };


    /// <inheritdoc cref="IServiceDescription.Equals(object?)" />
    public override bool Equals(object? obj)
    {
        if (ReferenceEquals(null, obj))
        {
            return false;
        }

        if (ReferenceEquals(this, obj))
        {
            return true;
        }

        return obj.GetType() == GetType() && Equals((ServiceDescription)obj);
    }


    /// <inheritdoc cref="IServiceDescription.Equals(IO.Swagger.Models.ServiceDescription?)" />
    public bool Equals(ServiceDescription? other)
    {
        if (ReferenceEquals(null, other))
        {
            return false;
        }

        if (ReferenceEquals(this, other))
        {
            return true;
        }

        return
            other.Profiles != null && (Profiles == other.Profiles ||
                                       (Profiles != null &&
                                        Profiles.SequenceEqual(other.Profiles)));
    }


    /// <inheritdoc cref="IServiceDescription.GetHashCode" />
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            // Suitable nullity checks etc., of course :)
            if (Profiles != null)
            {
                hashCode = (hashCode * 59) + Profiles.GetHashCode();
            }

            return hashCode;
        }
    }

    #region Operators

#pragma warning disable 1591

    public static bool operator ==(ServiceDescription left, ServiceDescription right) => Equals(left, right);

    public static bool operator !=(ServiceDescription left, ServiceDescription right) => !Equals(left, right);

#pragma warning restore 1591

    #endregion Operators
}