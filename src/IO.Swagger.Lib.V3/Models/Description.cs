/********************************************************************************
* Copyright (c) {2024} Contributors to the Eclipse Foundation
*
* See the NOTICE file(s) distributed with this work for additional
* information regarding copyright ownership.
*
* This program and the accompanying materials are made available under the
* terms of the Apache License Version 2.0 which is available at
* https://www.apache.org/licenses/LICENSE-2.0
*
* SPDX-License-Identifier: Apache-2.0
********************************************************************************/

/*
 * DotAAS Part 2 | HTTP/REST | Repository Service Specification
 *
 * The entire Repository Service Specification as part of Details of the Asset Administration Shell Part 2
 *
 * OpenAPI spec version: V3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// The Description object enables servers to present their capabilities to the clients, in particular which profiles they implement. At least one defined profile is required. Additional, proprietary attributes might be included. Nevertheless, the server must not expect that a regular client understands them.
    /// </summary>
    [DataContract]
    public partial class Description : IEquatable<Description>
    {
        /// <summary>
        /// Gets or Sets Profiles
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ProfilesEnum
        {
            /// <summary>
            /// Enum AssetAdministrationShellServiceSpecificationV30Enum for AssetAdministrationShellServiceSpecification/V3.0
            /// </summary>
            [EnumMember(Value = "AssetAdministrationShellServiceSpecification/V3.0")]
            AssetAdministrationShellServiceSpecificationV30Enum = 0,
            /// <summary>
            /// Enum AssetAdministrationShellServiceSpecificationV30MinimalProfileEnum for AssetAdministrationShellServiceSpecification/V3.0-MinimalProfile
            /// </summary>
            [EnumMember(Value = "AssetAdministrationShellServiceSpecification/V3.0-MinimalProfile")]
            AssetAdministrationShellServiceSpecificationV30MinimalProfileEnum = 1,
            /// <summary>
            /// Enum SubmodelServiceSpecificationV30Enum for SubmodelServiceSpecification/V3.0
            /// </summary>
            [EnumMember(Value = "SubmodelServiceSpecification/V3.0")]
            SubmodelServiceSpecificationV30Enum = 2,
            /// <summary>
            /// Enum SubmodelServiceSpecificationV30ValueProfileEnum for SubmodelServiceSpecification/V3.0-ValueProfile
            /// </summary>
            [EnumMember(Value = "SubmodelServiceSpecification/V3.0-ValueProfile")]
            SubmodelServiceSpecificationV30ValueProfileEnum = 3,
            /// <summary>
            /// Enum SubmodelServiceSpecificationV30MinimalProfileEnum for SubmodelServiceSpecification/V3.0-MinimalProfile
            /// </summary>
            [EnumMember(Value = "SubmodelServiceSpecification/V3.0-MinimalProfile")]
            SubmodelServiceSpecificationV30MinimalProfileEnum = 4,
            /// <summary>
            /// Enum AasxFileServerServiceSpecificationV30Enum for AasxFileServerServiceSpecification/V3.0
            /// </summary>
            [EnumMember(Value = "AasxFileServerServiceSpecification/V3.0")]
            AasxFileServerServiceSpecificationV30Enum = 5,
            /// <summary>
            /// Enum RegistryServiceSpecificationV30Enum for RegistryServiceSpecification/V3.0
            /// </summary>
            [EnumMember(Value = "RegistryServiceSpecification/V3.0")]
            RegistryServiceSpecificationV30Enum = 6,
            /// <summary>
            /// Enum RegistryServiceSpecificationV30AssetAdministrationShellRegistryEnum for RegistryServiceSpecification/V3.0- AssetAdministrationShellRegistry
            /// </summary>
            [EnumMember(Value = "RegistryServiceSpecification/V3.0- AssetAdministrationShellRegistry")]
            RegistryServiceSpecificationV30AssetAdministrationShellRegistryEnum = 7,
            /// <summary>
            /// Enum RegistryServiceSpecificationV30SubmodelRegistryEnum for RegistryServiceSpecification/V3.0-SubmodelRegistry
            /// </summary>
            [EnumMember(Value = "RegistryServiceSpecification/V3.0-SubmodelRegistry")]
            RegistryServiceSpecificationV30SubmodelRegistryEnum = 8,
            /// <summary>
            /// Enum RepositoryServiceSpecificationV30Enum for RepositoryServiceSpecification/V3.0
            /// </summary>
            [EnumMember(Value = "RepositoryServiceSpecification/V3.0")]
            RepositoryServiceSpecificationV30Enum = 9,
            /// <summary>
            /// Enum RepositoryServiceSpecificationV30MinimalProfileEnum for RepositoryServiceSpecification/V3.0-MinimalProfile
            /// </summary>
            [EnumMember(Value = "RepositoryServiceSpecification/V3.0-MinimalProfile")]
            RepositoryServiceSpecificationV30MinimalProfileEnum = 10,
            /// <summary>
            /// Enum AssetAdministrationShellRepositoryServiceSpecificationV30Enum for AssetAdministrationShellRepositoryServiceSpecification/V3.0
            /// </summary>
            [EnumMember(Value = "AssetAdministrationShellRepositoryServiceSpecification/V3.0")]
            AssetAdministrationShellRepositoryServiceSpecificationV30Enum = 11,
            /// <summary>
            /// Enum AssetAdministrationShellRepositoryServiceSpecificationV30MinimalProfileEnum for AssetAdministrationShellRepositoryServiceSpecification/V3.0-MinimalProfile
            /// </summary>
            [EnumMember(Value = "AssetAdministrationShellRepositoryServiceSpecification/V3.0-MinimalProfile")]
            AssetAdministrationShellRepositoryServiceSpecificationV30MinimalProfileEnum = 12,
            /// <summary>
            /// Enum SubmodelRepositoryServiceSpecificationV30Enum for SubmodelRepositoryServiceSpecification/V3.0
            /// </summary>
            [EnumMember(Value = "SubmodelRepositoryServiceSpecification/V3.0")]
            SubmodelRepositoryServiceSpecificationV30Enum = 13,
            /// <summary>
            /// Enum SubmodelRepositoryServiceSpecificationV30MinimalProfileEnum for SubmodelRepositoryServiceSpecification/V3.0-MinimalProfile
            /// </summary>
            [EnumMember(Value = "SubmodelRepositoryServiceSpecification/V3.0-MinimalProfile")]
            SubmodelRepositoryServiceSpecificationV30MinimalProfileEnum = 14,
            /// <summary>
            /// Enum RegistryAndDiscoveryServiceSpecificationV30Enum for RegistryAndDiscoveryServiceSpecification/V3.0
            /// </summary>
            [EnumMember(Value = "RegistryAndDiscoveryServiceSpecification/V3.0")]
            RegistryAndDiscoveryServiceSpecificationV30Enum = 15
        }

        /// <summary>
        /// Gets or Sets Profiles
        /// </summary>

        [DataMember(Name = "profiles")]
        public List<ProfilesEnum>? Profiles { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Description {\n");
            sb.Append("  Profiles: ").Append(Profiles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Description)obj);
        }

        /// <summary>
        /// Returns true if Description instances are equal
        /// </summary>
        /// <param name="other">Instance of Description to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Description? other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Profiles == other.Profiles ||
                    (Profiles != null &&
                     Profiles.SequenceEqual(other.Profiles))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Profiles != null)
                    hashCode = (hashCode * 59) + Profiles.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(Description left, Description right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Description left, Description right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
