/********************************************************************************
* Copyright (c) {2024} Contributors to the Eclipse Foundation
*
* See the NOTICE file(s) distributed with this work for additional
* information regarding copyright ownership.
*
* This program and the accompanying materials are made available under the
* terms of the Apache License Version 2.0 which is available at
* https://www.apache.org/licenses/LICENSE-2.0
*
* SPDX-License-Identifier: Apache-2.0
********************************************************************************/

/*
 * DotAAS Part 2 | HTTP/REST | Asset Administration Shell Registry Service Specification
 *
 * The Full Profile of the Asset Administration Shell Registry Service Specification as part of the [Specification of the Asset Administration Shell: Part 2](http://industrialdigitaltwin.org/en/content-hub).   Publisher: Industrial Digital Twin Association (IDTA) 2023
 *
 * OpenAPI spec version: V3.0.1_SSP-001
 * Contact: info@idtwin.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace IO.Swagger.Registry.Lib.V3.Models
{
    /// <summary>
    /// 
    /// </summary>
    [ DataContract ]
    public partial class ProtocolInformation : IEquatable<ProtocolInformation>
    {
        /// <summary>
        /// Gets or Sets Href
        /// </summary>
        [ Required ]
        [ MaxLength(2048) ]
        [ DataMember(Name = "href") ]
        public string? Href { get; set; }

        /// <summary>
        /// Gets or Sets EndpointProtocol
        /// </summary>

        [ MaxLength(128) ]
        [ DataMember(Name = "endpointProtocol") ]
        public string? EndpointProtocol { get; set; }

        /// <summary>
        /// Gets or Sets EndpointProtocolVersion
        /// </summary>

        [ DataMember(Name = "endpointProtocolVersion") ]
        public List<string>? EndpointProtocolVersion { get; set; }

        /// <summary>
        /// Gets or Sets Subprotocol
        /// </summary>

        [ MaxLength(128) ]
        [ DataMember(Name = "subprotocol") ]
        public string? Subprotocol { get; set; }

        /// <summary>
        /// Gets or Sets SubprotocolBody
        /// </summary>

        [ MaxLength(128) ]
        [ DataMember(Name = "subprotocolBody") ]
        public string? SubprotocolBody { get; set; }

        /// <summary>
        /// Gets or Sets SubprotocolBodyEncoding
        /// </summary>

        [ MaxLength(128) ]
        [ DataMember(Name = "subprotocolBodyEncoding") ]
        public string? SubprotocolBodyEncoding { get; set; }

        /// <summary>
        /// Gets or Sets SecurityAttributes
        /// </summary>

        [ DataMember(Name = "securityAttributes") ]
        public List<ProtocolInformationSecurityAttributes>? SecurityAttributes { get; set; }

        public ProtocolInformation(string? href = null, string? endpointProtocol = null, List<string>? endpointProtocolVersion = null, string? subprotocol = null,
            string? subprotocolBody = null, string? subprotocolBodyEncoding = null, List<ProtocolInformationSecurityAttributes>? securityAttributes = null)
        {
            Href = href;
            EndpointProtocol = endpointProtocol;
            EndpointProtocolVersion = endpointProtocolVersion;
            Subprotocol = subprotocol;
            SubprotocolBody = subprotocolBody;
            SubprotocolBodyEncoding = subprotocolBodyEncoding;
            SecurityAttributes = securityAttributes;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProtocolInformation {\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("  EndpointProtocol: ").Append(EndpointProtocol).Append("\n");
            sb.Append("  EndpointProtocolVersion: ").Append(EndpointProtocolVersion).Append("\n");
            sb.Append("  Subprotocol: ").Append(Subprotocol).Append("\n");
            sb.Append("  SubprotocolBody: ").Append(SubprotocolBody).Append("\n");
            sb.Append("  SubprotocolBodyEncoding: ").Append(SubprotocolBodyEncoding).Append("\n");
            sb.Append("  SecurityAttributes: ").Append(SecurityAttributes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ProtocolInformation) obj);
        }

        /// <summary>
        /// Returns true if ProtocolInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of ProtocolInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProtocolInformation? other = null)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Href == other.Href ||
                    Href != null &&
                    Href.Equals(other.Href)
                ) &&
                (
                    EndpointProtocol == other.EndpointProtocol ||
                    EndpointProtocol != null &&
                    EndpointProtocol.Equals(other.EndpointProtocol)
                ) &&
                (
                    EndpointProtocolVersion == other.EndpointProtocolVersion ||
                    EndpointProtocolVersion != null &&
                    EndpointProtocolVersion.SequenceEqual(other.EndpointProtocolVersion)
                ) &&
                (
                    Subprotocol == other.Subprotocol ||
                    Subprotocol != null &&
                    Subprotocol.Equals(other.Subprotocol)
                ) &&
                (
                    SubprotocolBody == other.SubprotocolBody ||
                    SubprotocolBody != null &&
                    SubprotocolBody.Equals(other.SubprotocolBody)
                ) &&
                (
                    SubprotocolBodyEncoding == other.SubprotocolBodyEncoding ||
                    SubprotocolBodyEncoding != null &&
                    SubprotocolBodyEncoding.Equals(other.SubprotocolBodyEncoding)
                ) &&
                (
                    SecurityAttributes == other.SecurityAttributes ||
                    SecurityAttributes != null &&
                    SecurityAttributes.SequenceEqual(other.SecurityAttributes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Href != null)
                    hashCode = hashCode * 59 + Href.GetHashCode();
                if (EndpointProtocol != null)
                    hashCode = hashCode * 59 + EndpointProtocol.GetHashCode();
                if (EndpointProtocolVersion != null)
                    hashCode = hashCode * 59 + EndpointProtocolVersion.GetHashCode();
                if (Subprotocol != null)
                    hashCode = hashCode * 59 + Subprotocol.GetHashCode();
                if (SubprotocolBody != null)
                    hashCode = hashCode * 59 + SubprotocolBody.GetHashCode();
                if (SubprotocolBodyEncoding != null)
                    hashCode = hashCode * 59 + SubprotocolBodyEncoding.GetHashCode();
                if (SecurityAttributes != null)
                    hashCode = hashCode * 59 + SecurityAttributes.GetHashCode();
                return hashCode;
            }
        }

        #region Operators

#pragma warning disable 1591

        public static bool operator ==(ProtocolInformation left, ProtocolInformation right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ProtocolInformation left, ProtocolInformation right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591

        #endregion Operators
    }
}